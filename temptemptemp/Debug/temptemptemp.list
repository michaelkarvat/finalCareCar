
temptemptemp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e18  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005080  08005080  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005080  08005080  00006080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005088  08005088  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005088  08005088  00006088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800508c  0800508c  0000608c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005090  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000244  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddaa  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c82  00000000  00000000  00014e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00016ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a10  00000000  00000000  000177a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000216e5  00000000  00000000  000181b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107a1  00000000  00000000  0003989d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbd58  00000000  00000000  0004a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00115d96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ecc  00000000  00000000  00115ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00119ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004fa0 	.word	0x08004fa0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004fa0 	.word	0x08004fa0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2f>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000854:	bf24      	itt	cs
 8000856:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800085a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800085e:	d90d      	bls.n	800087c <__aeabi_d2f+0x30>
 8000860:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000864:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000868:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800086c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000870:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000874:	bf08      	it	eq
 8000876:	f020 0001 	biceq.w	r0, r0, #1
 800087a:	4770      	bx	lr
 800087c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000880:	d121      	bne.n	80008c6 <__aeabi_d2f+0x7a>
 8000882:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000886:	bfbc      	itt	lt
 8000888:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	4770      	bxlt	lr
 800088e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000892:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000896:	f1c2 0218 	rsb	r2, r2, #24
 800089a:	f1c2 0c20 	rsb	ip, r2, #32
 800089e:	fa10 f30c 	lsls.w	r3, r0, ip
 80008a2:	fa20 f002 	lsr.w	r0, r0, r2
 80008a6:	bf18      	it	ne
 80008a8:	f040 0001 	orrne.w	r0, r0, #1
 80008ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008b8:	ea40 000c 	orr.w	r0, r0, ip
 80008bc:	fa23 f302 	lsr.w	r3, r3, r2
 80008c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008c4:	e7cc      	b.n	8000860 <__aeabi_d2f+0x14>
 80008c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ca:	d107      	bne.n	80008dc <__aeabi_d2f+0x90>
 80008cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008d0:	bf1e      	ittt	ne
 80008d2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80008d6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80008da:	4770      	bxne	lr
 80008dc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80008e0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80008e4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop

080008ec <main>:
float DS18B20_GetTemperature(void);
void PrintTemperature(void);

/* Main Function -------------------------------------------------------------*/
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
    HAL_Init();
 80008f0:	f000 fbea 	bl	80010c8 <HAL_Init>
    SystemClock_Config();
 80008f4:	f000 f814 	bl	8000920 <SystemClock_Config>
    MX_GPIO_Init();
 80008f8:	f000 f862 	bl	80009c0 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 80008fc:	f000 f88a 	bl	8000a14 <MX_USART2_UART_Init>
    MX_TIM1_Init();
 8000900:	f000 f8ac 	bl	8000a5c <MX_TIM1_Init>
    HAL_TIM_Base_Start(&htim1);
 8000904:	4805      	ldr	r0, [pc, #20]	@ (800091c <main+0x30>)
 8000906:	f002 fbf3 	bl	80030f0 <HAL_TIM_Base_Start>

    while (1)
    {
        PrintTemperature();
 800090a:	f000 fa1f 	bl	8000d4c <PrintTemperature>
        HAL_Delay(1000); // Delay 1 second between readings
 800090e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000912:	f000 fc3f 	bl	8001194 <HAL_Delay>
        PrintTemperature();
 8000916:	bf00      	nop
 8000918:	e7f7      	b.n	800090a <main+0x1e>
 800091a:	bf00      	nop
 800091c:	2000010c 	.word	0x2000010c

08000920 <SystemClock_Config>:
    }
}

/* System Clock Configuration ------------------------------------------------*/
void SystemClock_Config(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b0a6      	sub	sp, #152	@ 0x98
 8000924:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000926:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800092a:	2228      	movs	r2, #40	@ 0x28
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f003 fdb2 	bl	8004498 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000934:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	2258      	movs	r2, #88	@ 0x58
 8000948:	2100      	movs	r1, #0
 800094a:	4618      	mov	r0, r3
 800094c:	f003 fda4 	bl	8004498 <memset>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	673b      	str	r3, [r7, #112]	@ 0x70
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	2301      	movs	r3, #1
 8000956:	67fb      	str	r3, [r7, #124]	@ 0x7c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000958:	2310      	movs	r3, #16
 800095a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000964:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000968:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800096c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000970:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800097a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fecc 	bl	800171c <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000984:	230f      	movs	r3, #15
 8000986:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000988:	2302      	movs	r3, #2
 800098a:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098c:	2300      	movs	r3, #0
 800098e:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000994:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800099a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800099e:	2102      	movs	r1, #2
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 ff0f 	bl	80027c4 <HAL_RCC_ClockConfig>

    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	607b      	str	r3, [r7, #4]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	4618      	mov	r0, r3
 80009b2:	f002 f927 	bl	8002c04 <HAL_RCCEx_PeriphCLKConfig>
}
 80009b6:	bf00      	nop
 80009b8:	3798      	adds	r7, #152	@ 0x98
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <MX_GPIO_Init>:

/* GPIO Initialization -------------------------------------------------------*/
static void MX_GPIO_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
 80009d2:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000a10 <MX_GPIO_Init+0x50>)
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a10 <MX_GPIO_Init+0x50>)
 80009da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009de:	6153      	str	r3, [r2, #20]
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <MX_GPIO_Init+0x50>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009ec:	2302      	movs	r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80009f0:	2311      	movs	r3, #17
 80009f2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a04:	f000 fcd0 	bl	80013a8 <HAL_GPIO_Init>
}
 8000a08:	bf00      	nop
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000

08000a14 <MX_USART2_UART_Init>:

/* USART2 Initialization -----------------------------------------------------*/
static void MX_USART2_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    huart2.Instance = USART2;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a58 <MX_USART2_UART_Init+0x44>)
 8000a1c:	601a      	str	r2, [r3, #0]
    huart2.Init.BaudRate = 38400;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a20:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000a24:	605a      	str	r2, [r3, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b06      	ldr	r3, [pc, #24]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
    HAL_UART_Init(&huart2);
 8000a4a:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <MX_USART2_UART_Init+0x40>)
 8000a4c:	f002 fe52 	bl	80036f4 <HAL_UART_Init>
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000084 	.word	0x20000084
 8000a58:	40004400 	.word	0x40004400

08000a5c <MX_TIM1_Init>:

/* TIM1 Initialization -------------------------------------------------------*/
static void MX_TIM1_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a62:	f107 0310 	add.w	r3, r7, #16
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	1d3b      	adds	r3, r7, #4
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]

    htim1.Instance = TIM1;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000a7c:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <MX_TIM1_Init+0x7c>)
 8000a7e:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 71; // 72 MHz clock / (71 + 1) = 1 MHz (1 µs resolution)
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000a82:	2247      	movs	r2, #71	@ 0x47
 8000a84:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 0xFFFF; // Max period
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000a8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a92:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	619a      	str	r2, [r3, #24]
    HAL_TIM_Base_Init(&htim1);
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000aa2:	f002 facd 	bl	8003040 <HAL_TIM_Base_Init>

    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aaa:	613b      	str	r3, [r7, #16]
    HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig);
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4808      	ldr	r0, [pc, #32]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000ab4:	f002 fb84 	bl	80031c0 <HAL_TIM_ConfigClockSource>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
    HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig);
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <MX_TIM1_Init+0x78>)
 8000ac6:	f002 fd89 	bl	80035dc <HAL_TIMEx_MasterConfigSynchronization>
}
 8000aca:	bf00      	nop
 8000acc:	3720      	adds	r7, #32
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000010c 	.word	0x2000010c
 8000ad8:	40012c00 	.word	0x40012c00

08000adc <Delay_us>:

/* Delay in Microseconds -----------------------------------------------------*/
void Delay_us(uint16_t us)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000ae6:	4b09      	ldr	r3, [pc, #36]	@ (8000b0c <Delay_us+0x30>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < us);
 8000aee:	bf00      	nop
 8000af0:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <Delay_us+0x30>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	d3f9      	bcc.n	8000af0 <Delay_us+0x14>
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	2000010c 	.word	0x2000010c

08000b10 <DS18B20_Reset>:

/* DS18B20 Functions ---------------------------------------------------------*/
void DS18B20_Reset(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2102      	movs	r1, #2
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b1e:	f000 fde5 	bl	80016ec <HAL_GPIO_WritePin>
    Delay_us(480);
 8000b22:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000b26:	f7ff ffd9 	bl	8000adc <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b32:	f000 fddb 	bl	80016ec <HAL_GPIO_WritePin>
    Delay_us(70);
 8000b36:	2046      	movs	r0, #70	@ 0x46
 8000b38:	f7ff ffd0 	bl	8000adc <Delay_us>

    uint8_t presence = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000b3c:	2102      	movs	r1, #2
 8000b3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b42:	f000 fdbb 	bl	80016bc <HAL_GPIO_ReadPin>
 8000b46:	4603      	mov	r3, r0
 8000b48:	71fb      	strb	r3, [r7, #7]
    if (presence == GPIO_PIN_RESET)
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d103      	bne.n	8000b58 <DS18B20_Reset+0x48>
    {
        printf("DS18B20 detected!\r\n");
 8000b50:	4807      	ldr	r0, [pc, #28]	@ (8000b70 <DS18B20_Reset+0x60>)
 8000b52:	f003 fbc1 	bl	80042d8 <puts>
 8000b56:	e002      	b.n	8000b5e <DS18B20_Reset+0x4e>
    }
    else
    {
        printf("No DS18B20 detected.\r\n");
 8000b58:	4806      	ldr	r0, [pc, #24]	@ (8000b74 <DS18B20_Reset+0x64>)
 8000b5a:	f003 fbbd 	bl	80042d8 <puts>
    }
    Delay_us(410);
 8000b5e:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000b62:	f7ff ffbb 	bl	8000adc <Delay_us>
}
 8000b66:	bf00      	nop
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	08004fb8 	.word	0x08004fb8
 8000b74:	08004fcc 	.word	0x08004fcc

08000b78 <DS18B20_WriteBit>:

void DS18B20_WriteBit(uint8_t bit)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	71fb      	strb	r3, [r7, #7]
    if (bit)
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d012      	beq.n	8000bae <DS18B20_WriteBit+0x36>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	2102      	movs	r1, #2
 8000b8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b90:	f000 fdac 	bl	80016ec <HAL_GPIO_WritePin>
        Delay_us(1);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff ffa1 	bl	8000adc <Delay_us>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba2:	f000 fda3 	bl	80016ec <HAL_GPIO_WritePin>
        Delay_us(60);
 8000ba6:	203c      	movs	r0, #60	@ 0x3c
 8000ba8:	f7ff ff98 	bl	8000adc <Delay_us>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
        Delay_us(60);
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
    }
}
 8000bac:	e00e      	b.n	8000bcc <DS18B20_WriteBit+0x54>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2102      	movs	r1, #2
 8000bb2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bb6:	f000 fd99 	bl	80016ec <HAL_GPIO_WritePin>
        Delay_us(60);
 8000bba:	203c      	movs	r0, #60	@ 0x3c
 8000bbc:	f7ff ff8e 	bl	8000adc <Delay_us>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc8:	f000 fd90 	bl	80016ec <HAL_GPIO_WritePin>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <DS18B20_ReadBit>:

uint8_t DS18B20_ReadBit(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
    uint8_t bit = 0;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2102      	movs	r1, #2
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000be6:	f000 fd81 	bl	80016ec <HAL_GPIO_WritePin>
    Delay_us(1);
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff76 	bl	8000adc <Delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bf8:	f000 fd78 	bl	80016ec <HAL_GPIO_WritePin>
    Delay_us(15);
 8000bfc:	200f      	movs	r0, #15
 8000bfe:	f7ff ff6d 	bl	8000adc <Delay_us>
    bit = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000c02:	2102      	movs	r1, #2
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c08:	f000 fd58 	bl	80016bc <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	71fb      	strb	r3, [r7, #7]
    Delay_us(45);
 8000c10:	202d      	movs	r0, #45	@ 0x2d
 8000c12:	f7ff ff63 	bl	8000adc <Delay_us>
    return bit;
 8000c16:	79fb      	ldrb	r3, [r7, #7]
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <DS18B20_WriteByte>:

void DS18B20_WriteByte(uint8_t data)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	e00c      	b.n	8000c4a <DS18B20_WriteByte+0x2a>
    {
        DS18B20_WriteBit(data & 0x01);
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff ff9d 	bl	8000b78 <DS18B20_WriteBit>
        data >>= 1;
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	085b      	lsrs	r3, r3, #1
 8000c42:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	2b07      	cmp	r3, #7
 8000c4e:	ddef      	ble.n	8000c30 <DS18B20_WriteByte+0x10>
    }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <DS18B20_ReadByte>:

uint8_t DS18B20_ReadByte(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
    uint8_t data = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 8000c64:	2300      	movs	r3, #0
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	e00f      	b.n	8000c8a <DS18B20_ReadByte+0x30>
    {
        data |= (DS18B20_ReadBit() << i);
 8000c6a:	f7ff ffb3 	bl	8000bd4 <DS18B20_ReadBit>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	603b      	str	r3, [r7, #0]
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	2b07      	cmp	r3, #7
 8000c8e:	ddec      	ble.n	8000c6a <DS18B20_ReadByte+0x10>
    }
    return data;
 8000c90:	79fb      	ldrb	r3, [r7, #7]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <DS18B20_GetTemperature>:

float DS18B20_GetTemperature(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
    uint8_t scratchpad[9];
    int16_t temp_raw;
    float temperature;

    DS18B20_Reset();
 8000ca2:	f7ff ff35 	bl	8000b10 <DS18B20_Reset>
    DS18B20_WriteByte(0xCC);
 8000ca6:	20cc      	movs	r0, #204	@ 0xcc
 8000ca8:	f7ff ffba 	bl	8000c20 <DS18B20_WriteByte>
    DS18B20_WriteByte(0x44);
 8000cac:	2044      	movs	r0, #68	@ 0x44
 8000cae:	f7ff ffb7 	bl	8000c20 <DS18B20_WriteByte>
    HAL_Delay(750);
 8000cb2:	f240 20ee 	movw	r0, #750	@ 0x2ee
 8000cb6:	f000 fa6d 	bl	8001194 <HAL_Delay>

    DS18B20_Reset();
 8000cba:	f7ff ff29 	bl	8000b10 <DS18B20_Reset>
    DS18B20_WriteByte(0xCC);
 8000cbe:	20cc      	movs	r0, #204	@ 0xcc
 8000cc0:	f7ff ffae 	bl	8000c20 <DS18B20_WriteByte>
    DS18B20_WriteByte(0xBE);
 8000cc4:	20be      	movs	r0, #190	@ 0xbe
 8000cc6:	f7ff ffab 	bl	8000c20 <DS18B20_WriteByte>

    for (int i = 0; i < 9; i++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e014      	b.n	8000cfa <DS18B20_GetTemperature+0x5e>
    {
        scratchpad[i] = DS18B20_ReadByte();
 8000cd0:	f7ff ffc3 	bl	8000c5a <DS18B20_ReadByte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	463a      	mov	r2, r7
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	4413      	add	r3, r2
 8000cde:	460a      	mov	r2, r1
 8000ce0:	701a      	strb	r2, [r3, #0]
        printf("Scratchpad[%d]: 0x%02X\r\n", i, scratchpad[i]);
 8000ce2:	463a      	mov	r2, r7
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	461a      	mov	r2, r3
 8000cec:	6979      	ldr	r1, [r7, #20]
 8000cee:	4815      	ldr	r0, [pc, #84]	@ (8000d44 <DS18B20_GetTemperature+0xa8>)
 8000cf0:	f003 fa8a 	bl	8004208 <iprintf>
    for (int i = 0; i < 9; i++)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b08      	cmp	r3, #8
 8000cfe:	dde7      	ble.n	8000cd0 <DS18B20_GetTemperature+0x34>
    }

    temp_raw = (scratchpad[1] << 8) | scratchpad[0];
 8000d00:	787b      	ldrb	r3, [r7, #1]
 8000d02:	021b      	lsls	r3, r3, #8
 8000d04:	b21a      	sxth	r2, r3
 8000d06:	783b      	ldrb	r3, [r7, #0]
 8000d08:	b21b      	sxth	r3, r3
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	827b      	strh	r3, [r7, #18]
    temperature = temp_raw * 0.0625;
 8000d0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d12:	4618      	mov	r0, r3
 8000d14:	f7ff fd30 	bl	8000778 <__aeabi_i2d>
 8000d18:	f04f 0200 	mov.w	r2, #0
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d48 <DS18B20_GetTemperature+0xac>)
 8000d1e:	f7ff faaf 	bl	8000280 <__aeabi_dmul>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f7ff fd8f 	bl	800084c <__aeabi_d2f>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	60fb      	str	r3, [r7, #12]
    return temperature;
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	ee07 3a90 	vmov	s15, r3
}
 8000d38:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	08004fe4 	.word	0x08004fe4
 8000d48:	3fb00000 	.word	0x3fb00000

08000d4c <PrintTemperature>:

void PrintTemperature(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
    float temp = DS18B20_GetTemperature();
 8000d52:	f7ff ffa3 	bl	8000c9c <DS18B20_GetTemperature>
 8000d56:	ed87 0a01 	vstr	s0, [r7, #4]
    int num = (int)temp;
 8000d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d62:	ee17 3a90 	vmov	r3, s15
 8000d66:	603b      	str	r3, [r7, #0]
    printf("Temperature: %d'C\r\n", num);
 8000d68:	6839      	ldr	r1, [r7, #0]
 8000d6a:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <PrintTemperature+0x2c>)
 8000d6c:	f003 fa4c 	bl	8004208 <iprintf>
}
 8000d70:	bf00      	nop
 8000d72:	3708      	adds	r7, #8
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	08005000 	.word	0x08005000

08000d7c <__io_putchar>:

/* Debug UART Output ---------------------------------------------------------*/
int __io_putchar(int ch)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000d84:	1d39      	adds	r1, r7, #4
 8000d86:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <__io_putchar+0x20>)
 8000d8e:	f002 fcff 	bl	8003790 <HAL_UART_Transmit>
    return ch;
 8000d92:	687b      	ldr	r3, [r7, #4]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20000084 	.word	0x20000084

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <HAL_MspInit+0x44>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a0e      	ldr	r2, [pc, #56]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b0c      	ldr	r3, [pc, #48]	@ (8000de4 <HAL_MspInit+0x44>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a08      	ldr	r2, [pc, #32]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_MspInit+0x44>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dd6:	2007      	movs	r0, #7
 8000dd8:	f000 fab2 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	40021000 	.word	0x40021000

08000de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <HAL_TIM_Base_MspInit+0x38>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d10b      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000dfc:	699b      	ldr	r3, [r3, #24]
 8000dfe:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000e00:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e04:	6193      	str	r3, [r2, #24]
 8000e06:	4b07      	ldr	r3, [pc, #28]	@ (8000e24 <HAL_TIM_Base_MspInit+0x3c>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40012c00 	.word	0x40012c00
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	@ 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a17      	ldr	r2, [pc, #92]	@ (8000ea4 <HAL_UART_MspInit+0x7c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d128      	bne.n	8000e9c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e4a:	4b17      	ldr	r3, [pc, #92]	@ (8000ea8 <HAL_UART_MspInit+0x80>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a16      	ldr	r2, [pc, #88]	@ (8000ea8 <HAL_UART_MspInit+0x80>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b14      	ldr	r3, [pc, #80]	@ (8000ea8 <HAL_UART_MspInit+0x80>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <HAL_UART_MspInit+0x80>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	4a10      	ldr	r2, [pc, #64]	@ (8000ea8 <HAL_UART_MspInit+0x80>)
 8000e68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e6c:	6153      	str	r3, [r2, #20]
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_UART_MspInit+0x80>)
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e7a:	230c      	movs	r3, #12
 8000e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e98:	f000 fa86 	bl	80013a8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	@ 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40021000 	.word	0x40021000

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <HardFault_Handler+0x4>

08000ebc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <MemManage_Handler+0x4>

08000ec4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <BusFault_Handler+0x4>

08000ecc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <UsageFault_Handler+0x4>

08000ed4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr

08000efe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f02:	f000 f927 	bl	8001154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	60b9      	str	r1, [r7, #8]
 8000f14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	e00a      	b.n	8000f32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f1c:	f3af 8000 	nop.w
 8000f20:	4601      	mov	r1, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	60ba      	str	r2, [r7, #8]
 8000f28:	b2ca      	uxtb	r2, r1
 8000f2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	697a      	ldr	r2, [r7, #20]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	dbf0      	blt.n	8000f1c <_read+0x12>
  }

  return len;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	e009      	b.n	8000f6a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	60ba      	str	r2, [r7, #8]
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ff0c 	bl	8000d7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbf1      	blt.n	8000f56 <_write+0x12>
  }
  return len;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_close>:

int _close(int file)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa4:	605a      	str	r2, [r3, #4]
  return 0;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_isatty>:

int _isatty(int file)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fbc:	2301      	movs	r3, #1
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b085      	sub	sp, #20
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fd6:	2300      	movs	r3, #0
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fec:	4a14      	ldr	r2, [pc, #80]	@ (8001040 <_sbrk+0x5c>)
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <_sbrk+0x60>)
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ff8:	4b13      	ldr	r3, [pc, #76]	@ (8001048 <_sbrk+0x64>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d102      	bne.n	8001006 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001000:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <_sbrk+0x64>)
 8001002:	4a12      	ldr	r2, [pc, #72]	@ (800104c <_sbrk+0x68>)
 8001004:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001006:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <_sbrk+0x64>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4413      	add	r3, r2
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	429a      	cmp	r2, r3
 8001012:	d207      	bcs.n	8001024 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001014:	f003 fa8e 	bl	8004534 <__errno>
 8001018:	4603      	mov	r3, r0
 800101a:	220c      	movs	r2, #12
 800101c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800101e:	f04f 33ff 	mov.w	r3, #4294967295
 8001022:	e009      	b.n	8001038 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001024:	4b08      	ldr	r3, [pc, #32]	@ (8001048 <_sbrk+0x64>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <_sbrk+0x64>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4413      	add	r3, r2
 8001032:	4a05      	ldr	r2, [pc, #20]	@ (8001048 <_sbrk+0x64>)
 8001034:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001036:	68fb      	ldr	r3, [r7, #12]
}
 8001038:	4618      	mov	r0, r3
 800103a:	3718      	adds	r7, #24
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20010000 	.word	0x20010000
 8001044:	00000400 	.word	0x00000400
 8001048:	20000158 	.word	0x20000158
 800104c:	200002b0 	.word	0x200002b0

08001050 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <SystemInit+0x20>)
 8001056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105a:	4a05      	ldr	r2, [pc, #20]	@ (8001070 <SystemInit+0x20>)
 800105c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001060:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010ac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff ffea 	bl	8001050 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480c      	ldr	r0, [pc, #48]	@ (80010b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800107e:	490d      	ldr	r1, [pc, #52]	@ (80010b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001080:	4a0d      	ldr	r2, [pc, #52]	@ (80010b8 <LoopForever+0xe>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a0a      	ldr	r2, [pc, #40]	@ (80010bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001094:	4c0a      	ldr	r4, [pc, #40]	@ (80010c0 <LoopForever+0x16>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f003 fa4d 	bl	8004540 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010a6:	f7ff fc21 	bl	80008ec <main>

080010aa <LoopForever>:

LoopForever:
    b LoopForever
 80010aa:	e7fe      	b.n	80010aa <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80010ac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80010b8:	08005090 	.word	0x08005090
  ldr r2, =_sbss
 80010bc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80010c0:	200002ac 	.word	0x200002ac

080010c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC1_2_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <HAL_Init+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a07      	ldr	r2, [pc, #28]	@ (80010f0 <HAL_Init+0x28>)
 80010d2:	f043 0310 	orr.w	r3, r3, #16
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d8:	2003      	movs	r0, #3
 80010da:	f000 f931 	bl	8001340 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010de:	2000      	movs	r0, #0
 80010e0:	f000 f808 	bl	80010f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e4:	f7ff fe5c 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40022000 	.word	0x40022000

080010f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_InitTick+0x54>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b12      	ldr	r3, [pc, #72]	@ (800114c <HAL_InitTick+0x58>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	4619      	mov	r1, r3
 8001106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800110a:	fbb3 f3f1 	udiv	r3, r3, r1
 800110e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f000 f93b 	bl	800138e <HAL_SYSTICK_Config>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e00e      	b.n	8001140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b0f      	cmp	r3, #15
 8001126:	d80a      	bhi.n	800113e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001128:	2200      	movs	r2, #0
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	f04f 30ff 	mov.w	r0, #4294967295
 8001130:	f000 f911 	bl	8001356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001134:	4a06      	ldr	r2, [pc, #24]	@ (8001150 <HAL_InitTick+0x5c>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800113a:	2300      	movs	r3, #0
 800113c:	e000      	b.n	8001140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000000 	.word	0x20000000
 800114c:	20000008 	.word	0x20000008
 8001150:	20000004 	.word	0x20000004

08001154 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001158:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_IncTick+0x20>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_IncTick+0x24>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4413      	add	r3, r2
 8001164:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <HAL_IncTick+0x24>)
 8001166:	6013      	str	r3, [r2, #0]
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	20000008 	.word	0x20000008
 8001178:	2000015c 	.word	0x2000015c

0800117c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001180:	4b03      	ldr	r3, [pc, #12]	@ (8001190 <HAL_GetTick+0x14>)
 8001182:	681b      	ldr	r3, [r3, #0]
}
 8001184:	4618      	mov	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	2000015c 	.word	0x2000015c

08001194 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800119c:	f7ff ffee 	bl	800117c <HAL_GetTick>
 80011a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011ac:	d005      	beq.n	80011ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	@ (80011d8 <HAL_Delay+0x44>)
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	461a      	mov	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4413      	add	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011ba:	bf00      	nop
 80011bc:	f7ff ffde 	bl	800117c <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d8f7      	bhi.n	80011bc <HAL_Delay+0x28>
  {
  }
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3710      	adds	r7, #16
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000008 	.word	0x20000008

080011dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f8:	4013      	ands	r3, r2
 80011fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800120c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120e:	4a04      	ldr	r2, [pc, #16]	@ (8001220 <__NVIC_SetPriorityGrouping+0x44>)
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	60d3      	str	r3, [r2, #12]
}
 8001214:	bf00      	nop
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001228:	4b04      	ldr	r3, [pc, #16]	@ (800123c <__NVIC_GetPriorityGrouping+0x18>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	0a1b      	lsrs	r3, r3, #8
 800122e:	f003 0307 	and.w	r3, r3, #7
}
 8001232:	4618      	mov	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	6039      	str	r1, [r7, #0]
 800124a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	2b00      	cmp	r3, #0
 8001252:	db0a      	blt.n	800126a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	490c      	ldr	r1, [pc, #48]	@ (800128c <__NVIC_SetPriority+0x4c>)
 800125a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125e:	0112      	lsls	r2, r2, #4
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	440b      	add	r3, r1
 8001264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001268:	e00a      	b.n	8001280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	4908      	ldr	r1, [pc, #32]	@ (8001290 <__NVIC_SetPriority+0x50>)
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 030f 	and.w	r3, r3, #15
 8001276:	3b04      	subs	r3, #4
 8001278:	0112      	lsls	r2, r2, #4
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	440b      	add	r3, r1
 800127e:	761a      	strb	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000e100 	.word	0xe000e100
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	@ 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f003 0307 	and.w	r3, r3, #7
 80012a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f1c3 0307 	rsb	r3, r3, #7
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	bf28      	it	cs
 80012b2:	2304      	movcs	r3, #4
 80012b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3304      	adds	r3, #4
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d902      	bls.n	80012c4 <NVIC_EncodePriority+0x30>
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3b03      	subs	r3, #3
 80012c2:	e000      	b.n	80012c6 <NVIC_EncodePriority+0x32>
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	f04f 32ff 	mov.w	r2, #4294967295
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43da      	mvns	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	401a      	ands	r2, r3
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012dc:	f04f 31ff 	mov.w	r1, #4294967295
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	fa01 f303 	lsl.w	r3, r1, r3
 80012e6:	43d9      	mvns	r1, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ec:	4313      	orrs	r3, r2
         );
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	@ 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
	...

080012fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800130c:	d301      	bcc.n	8001312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800130e:	2301      	movs	r3, #1
 8001310:	e00f      	b.n	8001332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001312:	4a0a      	ldr	r2, [pc, #40]	@ (800133c <SysTick_Config+0x40>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800131a:	210f      	movs	r1, #15
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	f7ff ff8e 	bl	8001240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <SysTick_Config+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800132a:	4b04      	ldr	r3, [pc, #16]	@ (800133c <SysTick_Config+0x40>)
 800132c:	2207      	movs	r2, #7
 800132e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	e000e010 	.word	0xe000e010

08001340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff ff47 	bl	80011dc <__NVIC_SetPriorityGrouping>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b086      	sub	sp, #24
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	60b9      	str	r1, [r7, #8]
 8001360:	607a      	str	r2, [r7, #4]
 8001362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001368:	f7ff ff5c 	bl	8001224 <__NVIC_GetPriorityGrouping>
 800136c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	68b9      	ldr	r1, [r7, #8]
 8001372:	6978      	ldr	r0, [r7, #20]
 8001374:	f7ff ff8e 	bl	8001294 <NVIC_EncodePriority>
 8001378:	4602      	mov	r2, r0
 800137a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ff5d 	bl	8001240 <__NVIC_SetPriority>
}
 8001386:	bf00      	nop
 8001388:	3718      	adds	r7, #24
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff ffb0 	bl	80012fc <SysTick_Config>
 800139c:	4603      	mov	r3, r0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3708      	adds	r7, #8
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	e160      	b.n	800167a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	2101      	movs	r1, #1
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa01 f303 	lsl.w	r3, r1, r3
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f000 8152 	beq.w	8001674 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d005      	beq.n	80013e8 <HAL_GPIO_Init+0x40>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d130      	bne.n	800144a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	693a      	ldr	r2, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800141e:	2201      	movs	r2, #1
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	f003 0201 	and.w	r2, r3, #1
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0303 	and.w	r3, r3, #3
 8001452:	2b03      	cmp	r3, #3
 8001454:	d017      	beq.n	8001486 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	2203      	movs	r2, #3
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f003 0303 	and.w	r3, r3, #3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d123      	bne.n	80014da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f003 0307 	and.w	r3, r3, #7
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	691a      	ldr	r2, [r3, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	08da      	lsrs	r2, r3, #3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3208      	adds	r2, #8
 80014d4:	6939      	ldr	r1, [r7, #16]
 80014d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	2203      	movs	r2, #3
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43db      	mvns	r3, r3
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	4013      	ands	r3, r2
 80014f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0203 	and.w	r2, r3, #3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	693a      	ldr	r2, [r7, #16]
 800150c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 80ac 	beq.w	8001674 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151c:	4b5e      	ldr	r3, [pc, #376]	@ (8001698 <HAL_GPIO_Init+0x2f0>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a5d      	ldr	r2, [pc, #372]	@ (8001698 <HAL_GPIO_Init+0x2f0>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b5b      	ldr	r3, [pc, #364]	@ (8001698 <HAL_GPIO_Init+0x2f0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0301 	and.w	r3, r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001534:	4a59      	ldr	r2, [pc, #356]	@ (800169c <HAL_GPIO_Init+0x2f4>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	f003 0303 	and.w	r3, r3, #3
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800155e:	d025      	beq.n	80015ac <HAL_GPIO_Init+0x204>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a4f      	ldr	r2, [pc, #316]	@ (80016a0 <HAL_GPIO_Init+0x2f8>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d01f      	beq.n	80015a8 <HAL_GPIO_Init+0x200>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a4e      	ldr	r2, [pc, #312]	@ (80016a4 <HAL_GPIO_Init+0x2fc>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d019      	beq.n	80015a4 <HAL_GPIO_Init+0x1fc>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a4d      	ldr	r2, [pc, #308]	@ (80016a8 <HAL_GPIO_Init+0x300>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d013      	beq.n	80015a0 <HAL_GPIO_Init+0x1f8>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <HAL_GPIO_Init+0x304>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00d      	beq.n	800159c <HAL_GPIO_Init+0x1f4>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a4b      	ldr	r2, [pc, #300]	@ (80016b0 <HAL_GPIO_Init+0x308>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d007      	beq.n	8001598 <HAL_GPIO_Init+0x1f0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4a      	ldr	r2, [pc, #296]	@ (80016b4 <HAL_GPIO_Init+0x30c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d101      	bne.n	8001594 <HAL_GPIO_Init+0x1ec>
 8001590:	2306      	movs	r3, #6
 8001592:	e00c      	b.n	80015ae <HAL_GPIO_Init+0x206>
 8001594:	2307      	movs	r3, #7
 8001596:	e00a      	b.n	80015ae <HAL_GPIO_Init+0x206>
 8001598:	2305      	movs	r3, #5
 800159a:	e008      	b.n	80015ae <HAL_GPIO_Init+0x206>
 800159c:	2304      	movs	r3, #4
 800159e:	e006      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015a0:	2303      	movs	r3, #3
 80015a2:	e004      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015a4:	2302      	movs	r3, #2
 80015a6:	e002      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_GPIO_Init+0x206>
 80015ac:	2300      	movs	r3, #0
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	f002 0203 	and.w	r2, r2, #3
 80015b4:	0092      	lsls	r2, r2, #2
 80015b6:	4093      	lsls	r3, r2
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80015be:	4937      	ldr	r1, [pc, #220]	@ (800169c <HAL_GPIO_Init+0x2f4>)
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	3302      	adds	r3, #2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015cc:	4b3a      	ldr	r3, [pc, #232]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015f0:	4a31      	ldr	r2, [pc, #196]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f6:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800161a:	4a27      	ldr	r2, [pc, #156]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001620:	4b25      	ldr	r3, [pc, #148]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	43db      	mvns	r3, r3
 800162a:	693a      	ldr	r2, [r7, #16]
 800162c:	4013      	ands	r3, r2
 800162e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d003      	beq.n	8001644 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	4313      	orrs	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001644:	4a1c      	ldr	r2, [pc, #112]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800164a:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	43db      	mvns	r3, r3
 8001654:	693a      	ldr	r2, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <HAL_GPIO_Init+0x310>)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	3301      	adds	r3, #1
 8001678:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa22 f303 	lsr.w	r3, r2, r3
 8001684:	2b00      	cmp	r3, #0
 8001686:	f47f ae97 	bne.w	80013b8 <HAL_GPIO_Init+0x10>
  }
}
 800168a:	bf00      	nop
 800168c:	bf00      	nop
 800168e:	371c      	adds	r7, #28
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000
 80016a0:	48000400 	.word	0x48000400
 80016a4:	48000800 	.word	0x48000800
 80016a8:	48000c00 	.word	0x48000c00
 80016ac:	48001000 	.word	0x48001000
 80016b0:	48001400 	.word	0x48001400
 80016b4:	48001800 	.word	0x48001800
 80016b8:	40010400 	.word	0x40010400

080016bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	887b      	ldrh	r3, [r7, #2]
 80016ce:	4013      	ands	r3, r2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d002      	beq.n	80016da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
 80016d8:	e001      	b.n	80016de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016fc:	787b      	ldrb	r3, [r7, #1]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001702:	887a      	ldrh	r2, [r7, #2]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001708:	e002      	b.n	8001710 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800170a:	887a      	ldrh	r2, [r7, #2]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001722:	af00      	add	r7, sp, #0
 8001724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001728:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800172c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800172e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001732:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d102      	bne.n	8001742 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	f001 b83a 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001746:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 816f 	beq.w	8001a36 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001758:	4bb5      	ldr	r3, [pc, #724]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b04      	cmp	r3, #4
 8001762:	d00c      	beq.n	800177e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001764:	4bb2      	ldr	r3, [pc, #712]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	2b08      	cmp	r3, #8
 800176e:	d15c      	bne.n	800182a <HAL_RCC_OscConfig+0x10e>
 8001770:	4baf      	ldr	r3, [pc, #700]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800177c:	d155      	bne.n	800182a <HAL_RCC_OscConfig+0x10e>
 800177e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001782:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001792:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x94>
 80017aa:	4ba1      	ldr	r3, [pc, #644]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e015      	b.n	80017dc <HAL_RCC_OscConfig+0xc0>
 80017b0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017b4:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80017c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80017cc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80017d8:	4b95      	ldr	r3, [pc, #596]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80017da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017dc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017e0:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80017e4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80017e8:	fa92 f2a2 	rbit	r2, r2
 80017ec:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80017f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80017f4:	fab2 f282 	clz	r2, r2
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	f042 0220 	orr.w	r2, r2, #32
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	f002 021f 	and.w	r2, r2, #31
 8001804:	2101      	movs	r1, #1
 8001806:	fa01 f202 	lsl.w	r2, r1, r2
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 8111 	beq.w	8001a34 <HAL_RCC_OscConfig+0x318>
 8001812:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001816:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 8108 	bne.w	8001a34 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	f000 bfc6 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800182e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800183a:	d106      	bne.n	800184a <HAL_RCC_OscConfig+0x12e>
 800183c:	4b7c      	ldr	r3, [pc, #496]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a7b      	ldr	r2, [pc, #492]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e036      	b.n	80018b8 <HAL_RCC_OscConfig+0x19c>
 800184a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800184e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10c      	bne.n	8001874 <HAL_RCC_OscConfig+0x158>
 800185a:	4b75      	ldr	r3, [pc, #468]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a74      	ldr	r2, [pc, #464]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	4b72      	ldr	r3, [pc, #456]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a71      	ldr	r2, [pc, #452]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 800186c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	e021      	b.n	80018b8 <HAL_RCC_OscConfig+0x19c>
 8001874:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001878:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001884:	d10c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x184>
 8001886:	4b6a      	ldr	r3, [pc, #424]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a69      	ldr	r2, [pc, #420]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 800188c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	4b67      	ldr	r3, [pc, #412]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a66      	ldr	r2, [pc, #408]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001898:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800189c:	6013      	str	r3, [r2, #0]
 800189e:	e00b      	b.n	80018b8 <HAL_RCC_OscConfig+0x19c>
 80018a0:	4b63      	ldr	r3, [pc, #396]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a62      	ldr	r2, [pc, #392]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b60      	ldr	r3, [pc, #384]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a5f      	ldr	r2, [pc, #380]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80018b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018b6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d059      	beq.n	800197c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fc58 	bl	800117c <HAL_GetTick>
 80018cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d0:	e00a      	b.n	80018e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d2:	f7ff fc53 	bl	800117c <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b64      	cmp	r3, #100	@ 0x64
 80018e0:	d902      	bls.n	80018e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	f000 bf67 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 80018e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80018ec:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80018fc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d102      	bne.n	800191a <HAL_RCC_OscConfig+0x1fe>
 8001914:	4b46      	ldr	r3, [pc, #280]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x22a>
 800191a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800191e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001922:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001926:	fa93 f3a3 	rbit	r3, r3
 800192a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800192e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001932:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001936:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001942:	4b3b      	ldr	r3, [pc, #236]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 8001944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001946:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800194a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800194e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001952:	fa92 f2a2 	rbit	r2, r2
 8001956:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800195a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800195e:	fab2 f282 	clz	r2, r2
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f002 021f 	and.w	r2, r2, #31
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0ab      	beq.n	80018d2 <HAL_RCC_OscConfig+0x1b6>
 800197a:	e05c      	b.n	8001a36 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fbfe 	bl	800117c <HAL_GetTick>
 8001980:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001986:	f7ff fbf9 	bl	800117c <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	2b64      	cmp	r3, #100	@ 0x64
 8001994:	d902      	bls.n	800199c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	f000 bf0d 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 800199c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80019a8:	fa93 f3a3 	rbit	r3, r3
 80019ac:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80019b0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d102      	bne.n	80019ce <HAL_RCC_OscConfig+0x2b2>
 80019c8:	4b19      	ldr	r3, [pc, #100]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	e015      	b.n	80019fa <HAL_RCC_OscConfig+0x2de>
 80019ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019d2:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80019e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e6:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80019ea:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80019ee:	fa93 f3a3 	rbit	r3, r3
 80019f2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80019f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a30 <HAL_RCC_OscConfig+0x314>)
 80019f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80019fe:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8001a02:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001a06:	fa92 f2a2 	rbit	r2, r2
 8001a0a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001a0e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001a12:	fab2 f282 	clz	r2, r2
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	f042 0220 	orr.w	r2, r2, #32
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	f002 021f 	and.w	r2, r2, #31
 8001a22:	2101      	movs	r1, #1
 8001a24:	fa01 f202 	lsl.w	r2, r1, r2
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ab      	bne.n	8001986 <HAL_RCC_OscConfig+0x26a>
 8001a2e:	e002      	b.n	8001a36 <HAL_RCC_OscConfig+0x31a>
 8001a30:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 817f 	beq.w	8001d4a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a4c:	4ba7      	ldr	r3, [pc, #668]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f003 030c 	and.w	r3, r3, #12
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a58:	4ba4      	ldr	r3, [pc, #656]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d173      	bne.n	8001b4c <HAL_RCC_OscConfig+0x430>
 8001a64:	4ba1      	ldr	r3, [pc, #644]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001a70:	d16c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x430>
 8001a72:	2302      	movs	r3, #2
 8001a74:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a78:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8001a84:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a88:	fab3 f383 	clz	r3, r3
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d102      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x386>
 8001a9c:	4b93      	ldr	r3, [pc, #588]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	e013      	b.n	8001aca <HAL_RCC_OscConfig+0x3ae>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001aba:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001abe:	fa93 f3a3 	rbit	r3, r3
 8001ac2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001ac6:	4b89      	ldr	r3, [pc, #548]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	2202      	movs	r2, #2
 8001acc:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001ad0:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001ad4:	fa92 f2a2 	rbit	r2, r2
 8001ad8:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001adc:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f042 0220 	orr.w	r2, r2, #32
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f002 021f 	and.w	r2, r2, #31
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d00a      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3f6>
 8001afc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d002      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	f000 be52 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b76      	ldr	r3, [pc, #472]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b1e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	21f8      	movs	r1, #248	@ 0xf8
 8001b28:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001b30:	fa91 f1a1 	rbit	r1, r1
 8001b34:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001b38:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001b3c:	fab1 f181 	clz	r1, r1
 8001b40:	b2c9      	uxtb	r1, r1
 8001b42:	408b      	lsls	r3, r1
 8001b44:	4969      	ldr	r1, [pc, #420]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	e0fe      	b.n	8001d4a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8088 	beq.w	8001c6e <HAL_RCC_OscConfig+0x552>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b64:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001b68:	fa93 f3a3 	rbit	r3, r3
 8001b6c:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8001b70:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	fab3 f383 	clz	r3, r3
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001b7e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	461a      	mov	r2, r3
 8001b86:	2301      	movs	r3, #1
 8001b88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff faf7 	bl	800117c <HAL_GetTick>
 8001b8e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b92:	e00a      	b.n	8001baa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff faf2 	bl	800117c <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d902      	bls.n	8001baa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	f000 be06 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001baa:	2302      	movs	r3, #2
 8001bac:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001bb4:	fa93 f3a3 	rbit	r3, r3
 8001bb8:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001bbc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bc0:	fab3 f383 	clz	r3, r3
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d102      	bne.n	8001bda <HAL_RCC_OscConfig+0x4be>
 8001bd4:	4b45      	ldr	r3, [pc, #276]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	e013      	b.n	8001c02 <HAL_RCC_OscConfig+0x4e6>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001be4:	fa93 f3a3 	rbit	r3, r3
 8001be8:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001bf2:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001bfe:	4b3b      	ldr	r3, [pc, #236]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c02:	2202      	movs	r2, #2
 8001c04:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001c08:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001c0c:	fa92 f2a2 	rbit	r2, r2
 8001c10:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001c14:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001c18:	fab2 f282 	clz	r2, r2
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	f042 0220 	orr.w	r2, r2, #32
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	f002 021f 	and.w	r2, r2, #31
 8001c28:	2101      	movs	r1, #1
 8001c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0af      	beq.n	8001b94 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c34:	4b2d      	ldr	r3, [pc, #180]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	21f8      	movs	r1, #248	@ 0xf8
 8001c4a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8001c52:	fa91 f1a1 	rbit	r1, r1
 8001c56:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001c5a:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001c5e:	fab1 f181 	clz	r1, r1
 8001c62:	b2c9      	uxtb	r1, r1
 8001c64:	408b      	lsls	r3, r1
 8001c66:	4921      	ldr	r1, [pc, #132]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	600b      	str	r3, [r1, #0]
 8001c6c:	e06d      	b.n	8001d4a <HAL_RCC_OscConfig+0x62e>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001c78:	fa93 f3a3 	rbit	r3, r3
 8001c7c:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8001c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c84:	fab3 f383 	clz	r3, r3
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c8e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	461a      	mov	r2, r3
 8001c96:	2300      	movs	r3, #0
 8001c98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fa6f 	bl	800117c <HAL_GetTick>
 8001c9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fa6a 	bl	800117c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 bd7e 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001cc4:	fa93 f3a3 	rbit	r3, r3
 8001cc8:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001ccc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd0:	fab3 f383 	clz	r3, r3
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5d4>
 8001ce4:	4b01      	ldr	r3, [pc, #4]	@ (8001cec <HAL_RCC_OscConfig+0x5d0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	e016      	b.n	8001d18 <HAL_RCC_OscConfig+0x5fc>
 8001cea:	bf00      	nop
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001d08:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001d14:	4bbf      	ldr	r3, [pc, #764]	@ (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	2202      	movs	r2, #2
 8001d1a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001d1e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8001d22:	fa92 f2a2 	rbit	r2, r2
 8001d26:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001d2a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001d2e:	fab2 f282 	clz	r2, r2
 8001d32:	b2d2      	uxtb	r2, r2
 8001d34:	f042 0220 	orr.w	r2, r2, #32
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f002 021f 	and.w	r2, r2, #31
 8001d3e:	2101      	movs	r1, #1
 8001d40:	fa01 f202 	lsl.w	r2, r1, r2
 8001d44:	4013      	ands	r3, r2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1ac      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d4e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8113 	beq.w	8001f86 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	695b      	ldr	r3, [r3, #20]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d07c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x74e>
 8001d70:	2301      	movs	r3, #1
 8001d72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001d7a:	fa93 f3a3 	rbit	r3, r3
 8001d7e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8001d82:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d86:	fab3 f383 	clz	r3, r3
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4ba2      	ldr	r3, [pc, #648]	@ (8002018 <HAL_RCC_OscConfig+0x8fc>)
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	461a      	mov	r2, r3
 8001d96:	2301      	movs	r3, #1
 8001d98:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f9ef 	bl	800117c <HAL_GetTick>
 8001d9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001da2:	e00a      	b.n	8001dba <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff f9ea 	bl	800117c <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d902      	bls.n	8001dba <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	f000 bcfe 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001dc4:	fa93 f2a3 	rbit	r2, r3
 8001dc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dcc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001dda:	2202      	movs	r2, #2
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	fa93 f2a3 	rbit	r2, r3
 8001dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dfa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001dfe:	2202      	movs	r2, #2
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	fa93 f2a3 	rbit	r2, r3
 8001e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001e18:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1a:	4b7e      	ldr	r3, [pc, #504]	@ (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001e1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e22:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e26:	2102      	movs	r1, #2
 8001e28:	6019      	str	r1, [r3, #0]
 8001e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f1a3 	rbit	r1, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e40:	6019      	str	r1, [r3, #0]
  return result;
 8001e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e46:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	f003 031f 	and.w	r3, r3, #31
 8001e5c:	2101      	movs	r1, #1
 8001e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d09d      	beq.n	8001da4 <HAL_RCC_OscConfig+0x688>
 8001e68:	e08d      	b.n	8001f86 <HAL_RCC_OscConfig+0x86a>
 8001e6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e6e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e88:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e8c:	601a      	str	r2, [r3, #0]
  return result;
 8001e8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e92:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001e96:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e98:	fab3 f383 	clz	r3, r3
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4b5d      	ldr	r3, [pc, #372]	@ (8002018 <HAL_RCC_OscConfig+0x8fc>)
 8001ea2:	4413      	add	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff f966 	bl	800117c <HAL_GetTick>
 8001eb0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f961 	bl	800117c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d902      	bls.n	8001ecc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	f000 bc75 	b.w	80027b6 <HAL_RCC_OscConfig+0x109a>
 8001ecc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001edc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	fa93 f2a3 	rbit	r2, r3
 8001ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eea:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ef4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ef8:	2202      	movs	r2, #2
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	fa93 f2a3 	rbit	r2, r3
 8001f0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f0e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f18:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	fa93 f2a3 	rbit	r2, r3
 8001f2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001f36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f38:	4b36      	ldr	r3, [pc, #216]	@ (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001f3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f40:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f44:	2102      	movs	r1, #2
 8001f46:	6019      	str	r1, [r3, #0]
 8001f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	fa93 f1a3 	rbit	r1, r3
 8001f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f5a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f5e:	6019      	str	r1, [r3, #0]
  return result;
 8001f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f64:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	f003 031f 	and.w	r3, r3, #31
 8001f7a:	2101      	movs	r1, #1
 8001f7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f80:	4013      	ands	r3, r2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d197      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 81a5 	beq.w	80022e6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a18      	ldr	r2, [pc, #96]	@ (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b16      	ldr	r3, [pc, #88]	@ (8002014 <HAL_RCC_OscConfig+0x8f8>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fd4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <HAL_RCC_OscConfig+0x900>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d121      	bne.n	800202c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <HAL_RCC_OscConfig+0x900>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a0b      	ldr	r2, [pc, #44]	@ (800201c <HAL_RCC_OscConfig+0x900>)
 8001fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff2:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff4:	f7ff f8c2 	bl	800117c <HAL_GetTick>
 8001ff8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e010      	b.n	8002020 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7ff f8bd 	bl	800117c <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b64      	cmp	r3, #100	@ 0x64
 800200c:	d908      	bls.n	8002020 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e3d1      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	10908120 	.word	0x10908120
 800201c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b8d      	ldr	r3, [pc, #564]	@ (8002258 <HAL_RCC_OscConfig+0xb3c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0e8      	beq.n	8001ffe <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002030:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x92e>
 800203c:	4b87      	ldr	r3, [pc, #540]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a86      	ldr	r2, [pc, #536]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e035      	b.n	80020b6 <HAL_RCC_OscConfig+0x99a>
 800204a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800204e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x958>
 800205a:	4b80      	ldr	r3, [pc, #512]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a7f      	ldr	r2, [pc, #508]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b7d      	ldr	r3, [pc, #500]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a7c      	ldr	r2, [pc, #496]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
 8002072:	e020      	b.n	80020b6 <HAL_RCC_OscConfig+0x99a>
 8002074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002078:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x982>
 8002084:	4b75      	ldr	r3, [pc, #468]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a74      	ldr	r2, [pc, #464]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b72      	ldr	r3, [pc, #456]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a71      	ldr	r2, [pc, #452]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x99a>
 800209e:	4b6f      	ldr	r3, [pc, #444]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a6e      	ldr	r2, [pc, #440]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b6c      	ldr	r3, [pc, #432]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a6b      	ldr	r2, [pc, #428]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ba:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8081 	beq.w	80021ca <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c8:	f7ff f858 	bl	800117c <HAL_GetTick>
 80020cc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	e00b      	b.n	80020ea <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff f853 	bl	800117c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e365      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 80020ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020ee:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020f2:	2202      	movs	r2, #2
 80020f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	fa93 f2a3 	rbit	r2, r3
 8002104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002108:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002112:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002116:	2202      	movs	r2, #2
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800211e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	fa93 f2a3 	rbit	r2, r3
 8002128:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002130:	601a      	str	r2, [r3, #0]
  return result;
 8002132:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002136:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800213a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213c:	fab3 f383 	clz	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	095b      	lsrs	r3, r3, #5
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f043 0302 	orr.w	r3, r3, #2
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d102      	bne.n	8002156 <HAL_RCC_OscConfig+0xa3a>
 8002150:	4b42      	ldr	r3, [pc, #264]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	e013      	b.n	800217e <HAL_RCC_OscConfig+0xa62>
 8002156:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800215e:	2202      	movs	r2, #2
 8002160:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002162:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002166:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	fa93 f2a3 	rbit	r2, r3
 8002170:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002174:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	4b38      	ldr	r3, [pc, #224]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002182:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002186:	2102      	movs	r1, #2
 8002188:	6011      	str	r1, [r2, #0]
 800218a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800218e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	fa92 f1a2 	rbit	r1, r2
 8002198:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800219c:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80021a0:	6011      	str	r1, [r2, #0]
  return result;
 80021a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80021a6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80021aa:	6812      	ldr	r2, [r2, #0]
 80021ac:	fab2 f282 	clz	r2, r2
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	f002 021f 	and.w	r2, r2, #31
 80021bc:	2101      	movs	r1, #1
 80021be:	fa01 f202 	lsl.w	r2, r1, r2
 80021c2:	4013      	ands	r3, r2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d084      	beq.n	80020d2 <HAL_RCC_OscConfig+0x9b6>
 80021c8:	e083      	b.n	80022d2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ca:	f7fe ffd7 	bl	800117c <HAL_GetTick>
 80021ce:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d2:	e00b      	b.n	80021ec <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe ffd2 	bl	800117c <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e2e4      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 80021ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80021f4:	2202      	movs	r2, #2
 80021f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	fa93 f2a3 	rbit	r2, r3
 8002206:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002214:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002218:	2202      	movs	r2, #2
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002220:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	fa93 f2a3 	rbit	r2, r3
 800222a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800222e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002232:	601a      	str	r2, [r3, #0]
  return result;
 8002234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002238:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800223c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d106      	bne.n	8002260 <HAL_RCC_OscConfig+0xb44>
 8002252:	4b02      	ldr	r3, [pc, #8]	@ (800225c <HAL_RCC_OscConfig+0xb40>)
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	e017      	b.n	8002288 <HAL_RCC_OscConfig+0xb6c>
 8002258:	40007000 	.word	0x40007000
 800225c:	40021000 	.word	0x40021000
 8002260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002264:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002268:	2202      	movs	r2, #2
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002270:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800227e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	4bb3      	ldr	r3, [pc, #716]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800228c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002290:	2102      	movs	r1, #2
 8002292:	6011      	str	r1, [r2, #0]
 8002294:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002298:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800229c:	6812      	ldr	r2, [r2, #0]
 800229e:	fa92 f1a2 	rbit	r1, r2
 80022a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022a6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80022aa:	6011      	str	r1, [r2, #0]
  return result;
 80022ac:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80022b0:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d180      	bne.n	80021d4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d2:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b9e      	ldr	r3, [pc, #632]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	4a9d      	ldr	r2, [pc, #628]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 825e 	beq.w	80027b4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022f8:	4b96      	ldr	r3, [pc, #600]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	f000 821f 	beq.w	8002744 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002306:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800230a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b02      	cmp	r3, #2
 8002314:	f040 8170 	bne.w	80025f8 <HAL_RCC_OscConfig+0xedc>
 8002318:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800231c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002320:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002324:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002326:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800232a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002338:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800233c:	601a      	str	r2, [r3, #0]
  return result;
 800233e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002342:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002346:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002348:	fab3 f383 	clz	r3, r3
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002352:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	461a      	mov	r2, r3
 800235a:	2300      	movs	r3, #0
 800235c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800235e:	f7fe ff0d 	bl	800117c <HAL_GetTick>
 8002362:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002366:	e009      	b.n	800237c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe ff08 	bl	800117c <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d901      	bls.n	800237c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e21c      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 800237c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002380:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002384:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002388:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800238a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800238e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	fa93 f2a3 	rbit	r2, r3
 8002398:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800239c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023a0:	601a      	str	r2, [r3, #0]
  return result;
 80023a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023a6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80023aa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d102      	bne.n	80023c6 <HAL_RCC_OscConfig+0xcaa>
 80023c0:	4b64      	ldr	r3, [pc, #400]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	e027      	b.n	8002416 <HAL_RCC_OscConfig+0xcfa>
 80023c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ca:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023ce:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	fa93 f2a3 	rbit	r2, r3
 80023e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e6:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023f0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80023f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fe:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	fa93 f2a3 	rbit	r2, r3
 8002408:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800240c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	4b50      	ldr	r3, [pc, #320]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002416:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800241a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800241e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002422:	6011      	str	r1, [r2, #0]
 8002424:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002428:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800242c:	6812      	ldr	r2, [r2, #0]
 800242e:	fa92 f1a2 	rbit	r1, r2
 8002432:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002436:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800243a:	6011      	str	r1, [r2, #0]
  return result;
 800243c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002440:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002444:	6812      	ldr	r2, [r2, #0]
 8002446:	fab2 f282 	clz	r2, r2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f042 0220 	orr.w	r2, r2, #32
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	f002 021f 	and.w	r2, r2, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f202 	lsl.w	r2, r1, r2
 800245c:	4013      	ands	r3, r2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d182      	bne.n	8002368 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002462:	4b3c      	ldr	r3, [pc, #240]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	f023 020f 	bic.w	r2, r3, #15
 800246a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	4937      	ldr	r1, [pc, #220]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 8002478:	4313      	orrs	r3, r2
 800247a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800247c:	4b35      	ldr	r3, [pc, #212]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002484:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002488:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a19      	ldr	r1, [r3, #32]
 8002490:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002494:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	69db      	ldr	r3, [r3, #28]
 800249c:	430b      	orrs	r3, r1
 800249e:	492d      	ldr	r1, [pc, #180]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80024b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b6:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	fa93 f2a3 	rbit	r2, r3
 80024c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024c8:	601a      	str	r2, [r3, #0]
  return result;
 80024ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80024d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d4:	fab3 f383 	clz	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80024de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	461a      	mov	r2, r3
 80024e6:	2301      	movs	r3, #1
 80024e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ea:	f7fe fe47 	bl	800117c <HAL_GetTick>
 80024ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f2:	e009      	b.n	8002508 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f4:	f7fe fe42 	bl	800117c <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e156      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 8002508:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800250c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002510:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	fa93 f2a3 	rbit	r2, r3
 8002524:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002528:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800252c:	601a      	str	r2, [r3, #0]
  return result;
 800252e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002532:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002536:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002538:	fab3 f383 	clz	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	095b      	lsrs	r3, r3, #5
 8002540:	b2db      	uxtb	r3, r3
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCC_OscConfig+0xe3c>
 800254c:	4b01      	ldr	r3, [pc, #4]	@ (8002554 <HAL_RCC_OscConfig+0xe38>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	e02a      	b.n	80025a8 <HAL_RCC_OscConfig+0xe8c>
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002560:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800256a:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	fa93 f2a3 	rbit	r2, r3
 8002574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002578:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002582:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002586:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800258a:	601a      	str	r2, [r3, #0]
 800258c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002590:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800259e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	4b86      	ldr	r3, [pc, #536]	@ (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ac:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025b0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80025b4:	6011      	str	r1, [r2, #0]
 80025b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	fa92 f1a2 	rbit	r1, r2
 80025c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025c8:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80025cc:	6011      	str	r1, [r2, #0]
  return result;
 80025ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80025d2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0220 	orr.w	r2, r2, #32
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f43f af7f 	beq.w	80024f4 <HAL_RCC_OscConfig+0xdd8>
 80025f6:	e0dd      	b.n	80027b4 <HAL_RCC_OscConfig+0x1098>
 80025f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025fc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002600:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002604:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002606:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800260a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	fa93 f2a3 	rbit	r2, r3
 8002614:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002618:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800261c:	601a      	str	r2, [r3, #0]
  return result;
 800261e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002622:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002626:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002628:	fab3 f383 	clz	r3, r3
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002632:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	461a      	mov	r2, r3
 800263a:	2300      	movs	r3, #0
 800263c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800263e:	f7fe fd9d 	bl	800117c <HAL_GetTick>
 8002642:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002646:	e009      	b.n	800265c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002648:	f7fe fd98 	bl	800117c <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d901      	bls.n	800265c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0ac      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
 800265c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002660:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002664:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800266e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	fa93 f2a3 	rbit	r2, r3
 8002678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002680:	601a      	str	r2, [r3, #0]
  return result;
 8002682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002686:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800268a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_OscConfig+0xf8a>
 80026a0:	4b47      	ldr	r3, [pc, #284]	@ (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e027      	b.n	80026f6 <HAL_RCC_OscConfig+0xfda>
 80026a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026aa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b8:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	fa93 f2a3 	rbit	r2, r3
 80026c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026c6:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026de:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	fa93 f2a3 	rbit	r2, r3
 80026e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026ec:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	4b33      	ldr	r3, [pc, #204]	@ (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 80026f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80026fa:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80026fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002702:	6011      	str	r1, [r2, #0]
 8002704:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002708:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	fa92 f1a2 	rbit	r1, r2
 8002712:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002716:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800271a:	6011      	str	r1, [r2, #0]
  return result;
 800271c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002720:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d182      	bne.n	8002648 <HAL_RCC_OscConfig+0xf2c>
 8002742:	e037      	b.n	80027b4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002744:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002748:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e02e      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002760:	4b17      	ldr	r3, [pc, #92]	@ (80027c0 <HAL_RCC_OscConfig+0x10a4>)
 8002762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002764:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002768:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 800276c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002770:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002774:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	429a      	cmp	r2, r3
 800277e:	d117      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002780:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002784:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002788:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800278c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002794:	429a      	cmp	r2, r3
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002798:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d001      	beq.n	80027b4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40021000 	.word	0x40021000

080027c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b09e      	sub	sp, #120	@ 0x78
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e162      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b90      	ldr	r3, [pc, #576]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	498b      	ldr	r1, [pc, #556]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b89      	ldr	r3, [pc, #548]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e14a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002818:	4b82      	ldr	r3, [pc, #520]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	497f      	ldr	r1, [pc, #508]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002826:	4313      	orrs	r3, r2
 8002828:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 80dc 	beq.w	80029f0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d13c      	bne.n	80028ba <HAL_RCC_ClockConfig+0xf6>
 8002840:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002844:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002846:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002848:	fa93 f3a3 	rbit	r3, r3
 800284c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800284e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	b2db      	uxtb	r3, r3
 8002856:	095b      	lsrs	r3, r3, #5
 8002858:	b2db      	uxtb	r3, r3
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b01      	cmp	r3, #1
 8002862:	d102      	bne.n	800286a <HAL_RCC_ClockConfig+0xa6>
 8002864:	4b6f      	ldr	r3, [pc, #444]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	e00f      	b.n	800288a <HAL_RCC_ClockConfig+0xc6>
 800286a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800286e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	667b      	str	r3, [r7, #100]	@ 0x64
 8002878:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287c:	663b      	str	r3, [r7, #96]	@ 0x60
 800287e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002880:	fa93 f3a3 	rbit	r3, r3
 8002884:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002886:	4b67      	ldr	r3, [pc, #412]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800288e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002890:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002892:	fa92 f2a2 	rbit	r2, r2
 8002896:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002898:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	f042 0220 	orr.w	r2, r2, #32
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	f002 021f 	and.w	r2, r2, #31
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	4013      	ands	r3, r2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d17b      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e0f3      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d13c      	bne.n	800293c <HAL_RCC_ClockConfig+0x178>
 80028c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028ca:	fa93 f3a3 	rbit	r3, r3
 80028ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80028d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	fab3 f383 	clz	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d102      	bne.n	80028ec <HAL_RCC_ClockConfig+0x128>
 80028e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	e00f      	b.n	800290c <HAL_RCC_ClockConfig+0x148>
 80028ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028f4:	fa93 f3a3 	rbit	r3, r3
 80028f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80028fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8002900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002902:	fa93 f3a3 	rbit	r3, r3
 8002906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002908:	4b46      	ldr	r3, [pc, #280]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800290a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800290c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002910:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002914:	fa92 f2a2 	rbit	r2, r2
 8002918:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800291a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800291c:	fab2 f282 	clz	r2, r2
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	f042 0220 	orr.w	r2, r2, #32
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	f002 021f 	and.w	r2, r2, #31
 800292c:	2101      	movs	r1, #1
 800292e:	fa01 f202 	lsl.w	r2, r1, r2
 8002932:	4013      	ands	r3, r2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13a      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e0b2      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
 800293c:	2302      	movs	r3, #2
 800293e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	095b      	lsrs	r3, r3, #5
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b01      	cmp	r3, #1
 800295c:	d102      	bne.n	8002964 <HAL_RCC_ClockConfig+0x1a0>
 800295e:	4b31      	ldr	r3, [pc, #196]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	e00d      	b.n	8002980 <HAL_RCC_ClockConfig+0x1bc>
 8002964:	2302      	movs	r3, #2
 8002966:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296a:	fa93 f3a3 	rbit	r3, r3
 800296e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002970:	2302      	movs	r3, #2
 8002972:	623b      	str	r3, [r7, #32]
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	fa93 f3a3 	rbit	r3, r3
 800297a:	61fb      	str	r3, [r7, #28]
 800297c:	4b29      	ldr	r3, [pc, #164]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 800297e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002980:	2202      	movs	r2, #2
 8002982:	61ba      	str	r2, [r7, #24]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	fa92 f2a2 	rbit	r2, r2
 800298a:	617a      	str	r2, [r7, #20]
  return result;
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	fab2 f282 	clz	r2, r2
 8002992:	b2d2      	uxtb	r2, r2
 8002994:	f042 0220 	orr.w	r2, r2, #32
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	f002 021f 	and.w	r2, r2, #31
 800299e:	2101      	movs	r1, #1
 80029a0:	fa01 f202 	lsl.w	r2, r1, r2
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e079      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f023 0203 	bic.w	r2, r3, #3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	491a      	ldr	r1, [pc, #104]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029c0:	f7fe fbdc 	bl	800117c <HAL_GetTick>
 80029c4:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c6:	e00a      	b.n	80029de <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c8:	f7fe fbd8 	bl	800117c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e061      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	4b11      	ldr	r3, [pc, #68]	@ (8002a24 <HAL_RCC_ClockConfig+0x260>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 020c 	and.w	r2, r3, #12
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d1eb      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0307 	and.w	r3, r3, #7
 80029f8:	683a      	ldr	r2, [r7, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d214      	bcs.n	8002a28 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 0207 	bic.w	r2, r3, #7
 8002a06:	4906      	ldr	r1, [pc, #24]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a0e:	4b04      	ldr	r3, [pc, #16]	@ (8002a20 <HAL_RCC_ClockConfig+0x25c>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0307 	and.w	r3, r3, #7
 8002a16:	683a      	ldr	r2, [r7, #0]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e040      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x2de>
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	491a      	ldr	r1, [pc, #104]	@ (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0308 	and.w	r3, r3, #8
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a52:	4b16      	ldr	r3, [pc, #88]	@ (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4912      	ldr	r1, [pc, #72]	@ (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a66:	f000 f829 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8002a6a:	4601      	mov	r1, r0
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002aac <HAL_RCC_ClockConfig+0x2e8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a74:	22f0      	movs	r2, #240	@ 0xf0
 8002a76:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	fa92 f2a2 	rbit	r2, r2
 8002a7e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	fab2 f282 	clz	r2, r2
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	40d3      	lsrs	r3, r2
 8002a8a:	4a09      	ldr	r2, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x2ec>)
 8002a8c:	5cd3      	ldrb	r3, [r2, r3]
 8002a8e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a92:	4a08      	ldr	r2, [pc, #32]	@ (8002ab4 <HAL_RCC_ClockConfig+0x2f0>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <HAL_RCC_ClockConfig+0x2f4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fb2a 	bl	80010f4 <HAL_InitTick>
  
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3778      	adds	r7, #120	@ 0x78
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	08005014 	.word	0x08005014
 8002ab4:	20000000 	.word	0x20000000
 8002ab8:	20000004 	.word	0x20000004

08002abc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f003 030c 	and.w	r3, r3, #12
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x30>
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x36>
 8002aea:	e029      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002aec:	4b1a      	ldr	r3, [pc, #104]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002aee:	613b      	str	r3, [r7, #16]
      break;
 8002af0:	e029      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	0c9b      	lsrs	r3, r3, #18
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	4a18      	ldr	r2, [pc, #96]	@ (8002b5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002afc:	5cd3      	ldrb	r3, [r2, r3]
 8002afe:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002b00:	4b14      	ldr	r3, [pc, #80]	@ (8002b54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	4a15      	ldr	r2, [pc, #84]	@ (8002b60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b0a:	5cd3      	ldrb	r3, [r2, r3]
 8002b0c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b18:	4a0f      	ldr	r2, [pc, #60]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	fb02 f303 	mul.w	r3, r2, r3
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e007      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	fb02 f303 	mul.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	613b      	str	r3, [r7, #16]
      break;
 8002b3e:	e002      	b.n	8002b46 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b40:	4b05      	ldr	r3, [pc, #20]	@ (8002b58 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b42:	613b      	str	r3, [r7, #16]
      break;
 8002b44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b46:	693b      	ldr	r3, [r7, #16]
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	371c      	adds	r7, #28
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40021000 	.word	0x40021000
 8002b58:	007a1200 	.word	0x007a1200
 8002b5c:	0800502c 	.word	0x0800502c
 8002b60:	0800503c 	.word	0x0800503c

08002b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b68:	4b03      	ldr	r3, [pc, #12]	@ (8002b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	20000000 	.word	0x20000000

08002b7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002b82:	f7ff ffef 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002b86:	4601      	mov	r1, r0
 8002b88:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b90:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002b94:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	fa92 f2a2 	rbit	r2, r2
 8002b9c:	603a      	str	r2, [r7, #0]
  return result;
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	40d3      	lsrs	r3, r2
 8002ba8:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <HAL_RCC_GetPCLK1Freq+0x40>)
 8002baa:	5cd3      	ldrb	r3, [r2, r3]
 8002bac:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	08005024 	.word	0x08005024

08002bc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002bc6:	f7ff ffcd 	bl	8002b64 <HAL_RCC_GetHCLKFreq>
 8002bca:	4601      	mov	r1, r0
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002bd4:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002bd8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	fa92 f2a2 	rbit	r2, r2
 8002be0:	603a      	str	r2, [r7, #0]
  return result;
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	fab2 f282 	clz	r2, r2
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	40d3      	lsrs	r3, r2
 8002bec:	4a04      	ldr	r2, [pc, #16]	@ (8002c00 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002bee:	5cd3      	ldrb	r3, [r2, r3]
 8002bf0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	08005024 	.word	0x08005024

08002c04 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b092      	sub	sp, #72	@ 0x48
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	f000 80d4 	beq.w	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c28:	4b4e      	ldr	r3, [pc, #312]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10e      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c34:	4b4b      	ldr	r3, [pc, #300]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	4a4a      	ldr	r2, [pc, #296]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c3e:	61d3      	str	r3, [r2, #28]
 8002c40:	4b48      	ldr	r3, [pc, #288]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b45      	ldr	r3, [pc, #276]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d118      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b42      	ldr	r3, [pc, #264]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a41      	ldr	r2, [pc, #260]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c68:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7fe fa87 	bl	800117c <HAL_GetTick>
 8002c6e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e008      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe fa83 	bl	800117c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b64      	cmp	r3, #100	@ 0x64
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e1d6      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	4b38      	ldr	r3, [pc, #224]	@ (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d0f0      	beq.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c90:	4b34      	ldr	r3, [pc, #208]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c92:	6a1b      	ldr	r3, [r3, #32]
 8002c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8084 	beq.w	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002caa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d07c      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002cbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cc2:	fa93 f3a3 	rbit	r3, r3
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	fab3 f383 	clz	r3, r3
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b26      	ldr	r3, [pc, #152]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2301      	movs	r3, #1
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce6:	fa93 f3a3 	rbit	r3, r3
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2300      	movs	r3, #0
 8002d00:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d02:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d06:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d04b      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d12:	f7fe fa33 	bl	800117c <HAL_GetTick>
 8002d16:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	e00a      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d1a:	f7fe fa2f 	bl	800117c <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e180      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d30:	2302      	movs	r3, #2
 8002d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	623b      	str	r3, [r7, #32]
 8002d40:	6a3b      	ldr	r3, [r7, #32]
 8002d42:	fa93 f3a3 	rbit	r3, r3
 8002d46:	61fb      	str	r3, [r7, #28]
  return result;
 8002d48:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d4a:	fab3 f383 	clz	r3, r3
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	095b      	lsrs	r3, r3, #5
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0302 	orr.w	r3, r3, #2
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002d5e:	4b01      	ldr	r3, [pc, #4]	@ (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	e00d      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002d64:	40021000 	.word	0x40021000
 8002d68:	40007000 	.word	0x40007000
 8002d6c:	10908100 	.word	0x10908100
 8002d70:	2302      	movs	r3, #2
 8002d72:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	fa93 f3a3 	rbit	r3, r3
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	4b9a      	ldr	r3, [pc, #616]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d80:	2202      	movs	r2, #2
 8002d82:	613a      	str	r2, [r7, #16]
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	fa92 f2a2 	rbit	r2, r2
 8002d8a:	60fa      	str	r2, [r7, #12]
  return result;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	fab2 f282 	clz	r2, r2
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d98:	b2d2      	uxtb	r2, r2
 8002d9a:	f002 021f 	and.w	r2, r2, #31
 8002d9e:	2101      	movs	r1, #1
 8002da0:	fa01 f202 	lsl.w	r2, r1, r2
 8002da4:	4013      	ands	r3, r2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0b7      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002daa:	4b8f      	ldr	r3, [pc, #572]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	498c      	ldr	r1, [pc, #560]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002dbc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d105      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dc4:	4b88      	ldr	r3, [pc, #544]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a87      	ldr	r2, [pc, #540]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d008      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ddc:	4b82      	ldr	r3, [pc, #520]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de0:	f023 0203 	bic.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	497f      	ldr	r1, [pc, #508]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfa:	4b7b      	ldr	r3, [pc, #492]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4978      	ldr	r1, [pc, #480]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e18:	4b73      	ldr	r3, [pc, #460]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	4970      	ldr	r1, [pc, #448]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d008      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e36:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	f023 0210 	bic.w	r2, r3, #16
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	69db      	ldr	r3, [r3, #28]
 8002e42:	4969      	ldr	r1, [pc, #420]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e54:	4b64      	ldr	r3, [pc, #400]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	4961      	ldr	r1, [pc, #388]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e72:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e76:	f023 0220 	bic.w	r2, r3, #32
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	495a      	ldr	r1, [pc, #360]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d008      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e90:	4b55      	ldr	r3, [pc, #340]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e94:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e9c:	4952      	ldr	r1, [pc, #328]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d008      	beq.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002eae:	4b4e      	ldr	r3, [pc, #312]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	494b      	ldr	r1, [pc, #300]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ecc:	4b46      	ldr	r3, [pc, #280]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	4943      	ldr	r1, [pc, #268]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d008      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002eea:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	493c      	ldr	r1, [pc, #240]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f08:	4b37      	ldr	r3, [pc, #220]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f14:	4934      	ldr	r1, [pc, #208]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f26:	4b30      	ldr	r3, [pc, #192]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f32:	492d      	ldr	r1, [pc, #180]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f44:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	4925      	ldr	r1, [pc, #148]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002f62:	4b21      	ldr	r3, [pc, #132]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f66:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	491e      	ldr	r1, [pc, #120]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d008      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002f80:	4b19      	ldr	r3, [pc, #100]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8c:	4916      	ldr	r1, [pc, #88]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d008      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002f9e:	4b12      	ldr	r3, [pc, #72]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002faa:	490f      	ldr	r1, [pc, #60]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d008      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc8:	4907      	ldr	r1, [pc, #28]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002fda:	4b03      	ldr	r3, [pc, #12]	@ (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fde:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	e002      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002fe6:	bf00      	nop
 8002fe8:	40021000 	.word	0x40021000
 8002fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fee:	4913      	ldr	r1, [pc, #76]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d008      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003000:	4b0e      	ldr	r3, [pc, #56]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800300c:	490b      	ldr	r1, [pc, #44]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800300e:	4313      	orrs	r3, r2
 8003010:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800301e:	4b07      	ldr	r3, [pc, #28]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003022:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800302a:	4904      	ldr	r1, [pc, #16]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800302c:	4313      	orrs	r3, r2
 800302e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3748      	adds	r7, #72	@ 0x48
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40021000 	.word	0x40021000

08003040 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e049      	b.n	80030e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d106      	bne.n	800306c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fd febe 	bl	8000de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3304      	adds	r3, #4
 800307c:	4619      	mov	r1, r3
 800307e:	4610      	mov	r0, r2
 8003080:	f000 f968 	bl	8003354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d001      	beq.n	8003108 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e047      	b.n	8003198 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a23      	ldr	r2, [pc, #140]	@ (80031a4 <HAL_TIM_Base_Start+0xb4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d01d      	beq.n	8003156 <HAL_TIM_Base_Start+0x66>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003122:	d018      	beq.n	8003156 <HAL_TIM_Base_Start+0x66>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1f      	ldr	r2, [pc, #124]	@ (80031a8 <HAL_TIM_Base_Start+0xb8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d013      	beq.n	8003156 <HAL_TIM_Base_Start+0x66>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a1e      	ldr	r2, [pc, #120]	@ (80031ac <HAL_TIM_Base_Start+0xbc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_TIM_Base_Start+0x66>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a1c      	ldr	r2, [pc, #112]	@ (80031b0 <HAL_TIM_Base_Start+0xc0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_TIM_Base_Start+0x66>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1b      	ldr	r2, [pc, #108]	@ (80031b4 <HAL_TIM_Base_Start+0xc4>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_TIM_Base_Start+0x66>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a19      	ldr	r2, [pc, #100]	@ (80031b8 <HAL_TIM_Base_Start+0xc8>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d115      	bne.n	8003182 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <HAL_TIM_Base_Start+0xcc>)
 800315e:	4013      	ands	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b06      	cmp	r3, #6
 8003166:	d015      	beq.n	8003194 <HAL_TIM_Base_Start+0xa4>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316e:	d011      	beq.n	8003194 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0201 	orr.w	r2, r2, #1
 800317e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003180:	e008      	b.n	8003194 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	e000      	b.n	8003196 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003194:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3714      	adds	r7, #20
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40013400 	.word	0x40013400
 80031b4:	40014000 	.word	0x40014000
 80031b8:	40015000 	.word	0x40015000
 80031bc:	00010007 	.word	0x00010007

080031c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d101      	bne.n	80031dc <HAL_TIM_ConfigClockSource+0x1c>
 80031d8:	2302      	movs	r3, #2
 80031da:	e0b6      	b.n	800334a <HAL_TIM_ConfigClockSource+0x18a>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031fa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80031fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003218:	d03e      	beq.n	8003298 <HAL_TIM_ConfigClockSource+0xd8>
 800321a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321e:	f200 8087 	bhi.w	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003226:	f000 8086 	beq.w	8003336 <HAL_TIM_ConfigClockSource+0x176>
 800322a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322e:	d87f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003230:	2b70      	cmp	r3, #112	@ 0x70
 8003232:	d01a      	beq.n	800326a <HAL_TIM_ConfigClockSource+0xaa>
 8003234:	2b70      	cmp	r3, #112	@ 0x70
 8003236:	d87b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003238:	2b60      	cmp	r3, #96	@ 0x60
 800323a:	d050      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x11e>
 800323c:	2b60      	cmp	r3, #96	@ 0x60
 800323e:	d877      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003240:	2b50      	cmp	r3, #80	@ 0x50
 8003242:	d03c      	beq.n	80032be <HAL_TIM_ConfigClockSource+0xfe>
 8003244:	2b50      	cmp	r3, #80	@ 0x50
 8003246:	d873      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003248:	2b40      	cmp	r3, #64	@ 0x40
 800324a:	d058      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x13e>
 800324c:	2b40      	cmp	r3, #64	@ 0x40
 800324e:	d86f      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003250:	2b30      	cmp	r3, #48	@ 0x30
 8003252:	d064      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 8003254:	2b30      	cmp	r3, #48	@ 0x30
 8003256:	d86b      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003258:	2b20      	cmp	r3, #32
 800325a:	d060      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d867      	bhi.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
 8003260:	2b00      	cmp	r3, #0
 8003262:	d05c      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 8003264:	2b10      	cmp	r3, #16
 8003266:	d05a      	beq.n	800331e <HAL_TIM_ConfigClockSource+0x15e>
 8003268:	e062      	b.n	8003330 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800327a:	f000 f98f 	bl	800359c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800328c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68ba      	ldr	r2, [r7, #8]
 8003294:	609a      	str	r2, [r3, #8]
      break;
 8003296:	e04f      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032a8:	f000 f978 	bl	800359c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032ba:	609a      	str	r2, [r3, #8]
      break;
 80032bc:	e03c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 f8ec 	bl	80034a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2150      	movs	r1, #80	@ 0x50
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f945 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 80032dc:	e02c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 f90b 	bl	8003506 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2160      	movs	r1, #96	@ 0x60
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f935 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 80032fc:	e01c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330a:	461a      	mov	r2, r3
 800330c:	f000 f8cc 	bl	80034a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2140      	movs	r1, #64	@ 0x40
 8003316:	4618      	mov	r0, r3
 8003318:	f000 f925 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 800331c:	e00c      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4619      	mov	r1, r3
 8003328:	4610      	mov	r0, r2
 800332a:	f000 f91c 	bl	8003566 <TIM_ITRx_SetConfig>
      break;
 800332e:	e003      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	73fb      	strb	r3, [r7, #15]
      break;
 8003334:	e000      	b.n	8003338 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003348:	7bfb      	ldrb	r3, [r7, #15]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003354:	b480      	push	{r7}
 8003356:	b085      	sub	sp, #20
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a48      	ldr	r2, [pc, #288]	@ (8003488 <TIM_Base_SetConfig+0x134>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d013      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003372:	d00f      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a45      	ldr	r2, [pc, #276]	@ (800348c <TIM_Base_SetConfig+0x138>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d00b      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a44      	ldr	r2, [pc, #272]	@ (8003490 <TIM_Base_SetConfig+0x13c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d007      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a43      	ldr	r2, [pc, #268]	@ (8003494 <TIM_Base_SetConfig+0x140>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d003      	beq.n	8003394 <TIM_Base_SetConfig+0x40>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a42      	ldr	r2, [pc, #264]	@ (8003498 <TIM_Base_SetConfig+0x144>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d108      	bne.n	80033a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800339a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a37      	ldr	r2, [pc, #220]	@ (8003488 <TIM_Base_SetConfig+0x134>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d01f      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033b4:	d01b      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a34      	ldr	r2, [pc, #208]	@ (800348c <TIM_Base_SetConfig+0x138>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d017      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a33      	ldr	r2, [pc, #204]	@ (8003490 <TIM_Base_SetConfig+0x13c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d013      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a32      	ldr	r2, [pc, #200]	@ (8003494 <TIM_Base_SetConfig+0x140>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d00f      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a32      	ldr	r2, [pc, #200]	@ (800349c <TIM_Base_SetConfig+0x148>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00b      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a31      	ldr	r2, [pc, #196]	@ (80034a0 <TIM_Base_SetConfig+0x14c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d007      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a30      	ldr	r2, [pc, #192]	@ (80034a4 <TIM_Base_SetConfig+0x150>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d003      	beq.n	80033ee <TIM_Base_SetConfig+0x9a>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2b      	ldr	r2, [pc, #172]	@ (8003498 <TIM_Base_SetConfig+0x144>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d108      	bne.n	8003400 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a18      	ldr	r2, [pc, #96]	@ (8003488 <TIM_Base_SetConfig+0x134>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d013      	beq.n	8003454 <TIM_Base_SetConfig+0x100>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a19      	ldr	r2, [pc, #100]	@ (8003494 <TIM_Base_SetConfig+0x140>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00f      	beq.n	8003454 <TIM_Base_SetConfig+0x100>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a19      	ldr	r2, [pc, #100]	@ (800349c <TIM_Base_SetConfig+0x148>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00b      	beq.n	8003454 <TIM_Base_SetConfig+0x100>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a18      	ldr	r2, [pc, #96]	@ (80034a0 <TIM_Base_SetConfig+0x14c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <TIM_Base_SetConfig+0x100>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a17      	ldr	r2, [pc, #92]	@ (80034a4 <TIM_Base_SetConfig+0x150>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_Base_SetConfig+0x100>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a12      	ldr	r2, [pc, #72]	@ (8003498 <TIM_Base_SetConfig+0x144>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b01      	cmp	r3, #1
 800346c:	d105      	bne.n	800347a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	611a      	str	r2, [r3, #16]
  }
}
 800347a:	bf00      	nop
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	40012c00 	.word	0x40012c00
 800348c:	40000400 	.word	0x40000400
 8003490:	40000800 	.word	0x40000800
 8003494:	40013400 	.word	0x40013400
 8003498:	40015000 	.word	0x40015000
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800

080034a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0201 	bic.w	r2, r3, #1
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4313      	orrs	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	f023 030a 	bic.w	r3, r3, #10
 80034e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	621a      	str	r2, [r3, #32]
}
 80034fa:	bf00      	nop
 80034fc:	371c      	adds	r7, #28
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr

08003506 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003506:	b480      	push	{r7}
 8003508:	b087      	sub	sp, #28
 800350a:	af00      	add	r7, sp, #0
 800350c:	60f8      	str	r0, [r7, #12]
 800350e:	60b9      	str	r1, [r7, #8]
 8003510:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f023 0210 	bic.w	r2, r3, #16
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003530:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	031b      	lsls	r3, r3, #12
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003542:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4313      	orrs	r3, r2
 800354c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003566:	b480      	push	{r7}
 8003568:	b085      	sub	sp, #20
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800357c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4313      	orrs	r3, r2
 8003584:	f043 0307 	orr.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	609a      	str	r2, [r3, #8]
}
 8003590:	bf00      	nop
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	021a      	lsls	r2, r3, #8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	431a      	orrs	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	609a      	str	r2, [r3, #8]
}
 80035d0:	bf00      	nop
 80035d2:	371c      	adds	r7, #28
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d101      	bne.n	80035f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035f0:	2302      	movs	r3, #2
 80035f2:	e06d      	b.n	80036d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2202      	movs	r2, #2
 8003600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a30      	ldr	r2, [pc, #192]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2f      	ldr	r2, [pc, #188]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a2d      	ldr	r2, [pc, #180]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003638:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	4313      	orrs	r3, r2
 8003654:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1e      	ldr	r2, [pc, #120]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d01d      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003670:	d018      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d013      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a1a      	ldr	r2, [pc, #104]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00e      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a15      	ldr	r2, [pc, #84]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d009      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a16      	ldr	r2, [pc, #88]	@ (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d004      	beq.n	80036a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a11      	ldr	r2, [pc, #68]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d10c      	bne.n	80036be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40012c00 	.word	0x40012c00
 80036e0:	40013400 	.word	0x40013400
 80036e4:	40015000 	.word	0x40015000
 80036e8:	40000400 	.word	0x40000400
 80036ec:	40000800 	.word	0x40000800
 80036f0:	40014000 	.word	0x40014000

080036f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e040      	b.n	8003788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fb86 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	@ 0x24
 8003720:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fa86 	bl	8003c4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 f8af 	bl	80038a4 <UART_SetConfig>
 8003746:	4603      	mov	r3, r0
 8003748:	2b01      	cmp	r3, #1
 800374a:	d101      	bne.n	8003750 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e01b      	b.n	8003788 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800375e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800376e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb05 	bl	8003d90 <UART_CheckIdleState>
 8003786:	4603      	mov	r3, r0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	@ 0x28
 8003794:	af02      	add	r7, sp, #8
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	603b      	str	r3, [r7, #0]
 800379c:	4613      	mov	r3, r2
 800379e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037a4:	2b20      	cmp	r3, #32
 80037a6:	d177      	bne.n	8003898 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d002      	beq.n	80037b4 <HAL_UART_Transmit+0x24>
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e070      	b.n	800389a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2221      	movs	r2, #33	@ 0x21
 80037c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037c6:	f7fd fcd9 	bl	800117c <HAL_GetTick>
 80037ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	88fa      	ldrh	r2, [r7, #6]
 80037d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037e4:	d108      	bne.n	80037f8 <HAL_UART_Transmit+0x68>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d104      	bne.n	80037f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037ee:	2300      	movs	r3, #0
 80037f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	e003      	b.n	8003800 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037fc:	2300      	movs	r3, #0
 80037fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003800:	e02f      	b.n	8003862 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2200      	movs	r2, #0
 800380a:	2180      	movs	r1, #128	@ 0x80
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fb67 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d004      	beq.n	8003822 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e03b      	b.n	800389a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d10b      	bne.n	8003840 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	881a      	ldrh	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003834:	b292      	uxth	r2, r2
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	3302      	adds	r3, #2
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e007      	b.n	8003850 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3301      	adds	r3, #1
 800384e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1c9      	bne.n	8003802 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2140      	movs	r1, #64	@ 0x40
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fb31 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e005      	b.n	800389a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2220      	movs	r2, #32
 8003892:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	4618      	mov	r0, r3
 800389c:	3720      	adds	r7, #32
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
	...

080038a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b088      	sub	sp, #32
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689a      	ldr	r2, [r3, #8]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	431a      	orrs	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	4b92      	ldr	r3, [pc, #584]	@ (8003b18 <UART_SetConfig+0x274>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	6979      	ldr	r1, [r7, #20]
 80038d8:	430b      	orrs	r3, r1
 80038da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	4313      	orrs	r3, r2
 8003900:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	430a      	orrs	r2, r1
 8003914:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a80      	ldr	r2, [pc, #512]	@ (8003b1c <UART_SetConfig+0x278>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d120      	bne.n	8003962 <UART_SetConfig+0xbe>
 8003920:	4b7f      	ldr	r3, [pc, #508]	@ (8003b20 <UART_SetConfig+0x27c>)
 8003922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	2b03      	cmp	r3, #3
 800392a:	d817      	bhi.n	800395c <UART_SetConfig+0xb8>
 800392c:	a201      	add	r2, pc, #4	@ (adr r2, 8003934 <UART_SetConfig+0x90>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003945 	.word	0x08003945
 8003938:	08003951 	.word	0x08003951
 800393c:	08003957 	.word	0x08003957
 8003940:	0800394b 	.word	0x0800394b
 8003944:	2301      	movs	r3, #1
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e0b5      	b.n	8003ab6 <UART_SetConfig+0x212>
 800394a:	2302      	movs	r3, #2
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e0b2      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003950:	2304      	movs	r3, #4
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e0af      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003956:	2308      	movs	r3, #8
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e0ac      	b.n	8003ab6 <UART_SetConfig+0x212>
 800395c:	2310      	movs	r3, #16
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e0a9      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a6f      	ldr	r2, [pc, #444]	@ (8003b24 <UART_SetConfig+0x280>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d124      	bne.n	80039b6 <UART_SetConfig+0x112>
 800396c:	4b6c      	ldr	r3, [pc, #432]	@ (8003b20 <UART_SetConfig+0x27c>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003974:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003978:	d011      	beq.n	800399e <UART_SetConfig+0xfa>
 800397a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800397e:	d817      	bhi.n	80039b0 <UART_SetConfig+0x10c>
 8003980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003984:	d011      	beq.n	80039aa <UART_SetConfig+0x106>
 8003986:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800398a:	d811      	bhi.n	80039b0 <UART_SetConfig+0x10c>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <UART_SetConfig+0xf4>
 8003990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003994:	d006      	beq.n	80039a4 <UART_SetConfig+0x100>
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x10c>
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e08b      	b.n	8003ab6 <UART_SetConfig+0x212>
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e088      	b.n	8003ab6 <UART_SetConfig+0x212>
 80039a4:	2304      	movs	r3, #4
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e085      	b.n	8003ab6 <UART_SetConfig+0x212>
 80039aa:	2308      	movs	r3, #8
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e082      	b.n	8003ab6 <UART_SetConfig+0x212>
 80039b0:	2310      	movs	r3, #16
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e07f      	b.n	8003ab6 <UART_SetConfig+0x212>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003b28 <UART_SetConfig+0x284>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d124      	bne.n	8003a0a <UART_SetConfig+0x166>
 80039c0:	4b57      	ldr	r3, [pc, #348]	@ (8003b20 <UART_SetConfig+0x27c>)
 80039c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80039c8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039cc:	d011      	beq.n	80039f2 <UART_SetConfig+0x14e>
 80039ce:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80039d2:	d817      	bhi.n	8003a04 <UART_SetConfig+0x160>
 80039d4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039d8:	d011      	beq.n	80039fe <UART_SetConfig+0x15a>
 80039da:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80039de:	d811      	bhi.n	8003a04 <UART_SetConfig+0x160>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <UART_SetConfig+0x148>
 80039e4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039e8:	d006      	beq.n	80039f8 <UART_SetConfig+0x154>
 80039ea:	e00b      	b.n	8003a04 <UART_SetConfig+0x160>
 80039ec:	2300      	movs	r3, #0
 80039ee:	77fb      	strb	r3, [r7, #31]
 80039f0:	e061      	b.n	8003ab6 <UART_SetConfig+0x212>
 80039f2:	2302      	movs	r3, #2
 80039f4:	77fb      	strb	r3, [r7, #31]
 80039f6:	e05e      	b.n	8003ab6 <UART_SetConfig+0x212>
 80039f8:	2304      	movs	r3, #4
 80039fa:	77fb      	strb	r3, [r7, #31]
 80039fc:	e05b      	b.n	8003ab6 <UART_SetConfig+0x212>
 80039fe:	2308      	movs	r3, #8
 8003a00:	77fb      	strb	r3, [r7, #31]
 8003a02:	e058      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a04:	2310      	movs	r3, #16
 8003a06:	77fb      	strb	r3, [r7, #31]
 8003a08:	e055      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a47      	ldr	r2, [pc, #284]	@ (8003b2c <UART_SetConfig+0x288>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d124      	bne.n	8003a5e <UART_SetConfig+0x1ba>
 8003a14:	4b42      	ldr	r3, [pc, #264]	@ (8003b20 <UART_SetConfig+0x27c>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003a1c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a20:	d011      	beq.n	8003a46 <UART_SetConfig+0x1a2>
 8003a22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a26:	d817      	bhi.n	8003a58 <UART_SetConfig+0x1b4>
 8003a28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a2c:	d011      	beq.n	8003a52 <UART_SetConfig+0x1ae>
 8003a2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a32:	d811      	bhi.n	8003a58 <UART_SetConfig+0x1b4>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <UART_SetConfig+0x19c>
 8003a38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a3c:	d006      	beq.n	8003a4c <UART_SetConfig+0x1a8>
 8003a3e:	e00b      	b.n	8003a58 <UART_SetConfig+0x1b4>
 8003a40:	2300      	movs	r3, #0
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e037      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a46:	2302      	movs	r3, #2
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e034      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e031      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a52:	2308      	movs	r3, #8
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e02e      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a58:	2310      	movs	r3, #16
 8003a5a:	77fb      	strb	r3, [r7, #31]
 8003a5c:	e02b      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a33      	ldr	r2, [pc, #204]	@ (8003b30 <UART_SetConfig+0x28c>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d124      	bne.n	8003ab2 <UART_SetConfig+0x20e>
 8003a68:	4b2d      	ldr	r3, [pc, #180]	@ (8003b20 <UART_SetConfig+0x27c>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a6c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003a70:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a74:	d011      	beq.n	8003a9a <UART_SetConfig+0x1f6>
 8003a76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003a7a:	d817      	bhi.n	8003aac <UART_SetConfig+0x208>
 8003a7c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a80:	d011      	beq.n	8003aa6 <UART_SetConfig+0x202>
 8003a82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003a86:	d811      	bhi.n	8003aac <UART_SetConfig+0x208>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d003      	beq.n	8003a94 <UART_SetConfig+0x1f0>
 8003a8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a90:	d006      	beq.n	8003aa0 <UART_SetConfig+0x1fc>
 8003a92:	e00b      	b.n	8003aac <UART_SetConfig+0x208>
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e00d      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	77fb      	strb	r3, [r7, #31]
 8003a9e:	e00a      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e007      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e004      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003aac:	2310      	movs	r3, #16
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e001      	b.n	8003ab6 <UART_SetConfig+0x212>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003abe:	d16b      	bne.n	8003b98 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003ac0:	7ffb      	ldrb	r3, [r7, #31]
 8003ac2:	2b08      	cmp	r3, #8
 8003ac4:	d838      	bhi.n	8003b38 <UART_SetConfig+0x294>
 8003ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8003acc <UART_SetConfig+0x228>)
 8003ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003acc:	08003af1 	.word	0x08003af1
 8003ad0:	08003af9 	.word	0x08003af9
 8003ad4:	08003b01 	.word	0x08003b01
 8003ad8:	08003b39 	.word	0x08003b39
 8003adc:	08003b07 	.word	0x08003b07
 8003ae0:	08003b39 	.word	0x08003b39
 8003ae4:	08003b39 	.word	0x08003b39
 8003ae8:	08003b39 	.word	0x08003b39
 8003aec:	08003b0f 	.word	0x08003b0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af0:	f7ff f844 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8003af4:	61b8      	str	r0, [r7, #24]
        break;
 8003af6:	e024      	b.n	8003b42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003af8:	f7ff f862 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8003afc:	61b8      	str	r0, [r7, #24]
        break;
 8003afe:	e020      	b.n	8003b42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b00:	4b0c      	ldr	r3, [pc, #48]	@ (8003b34 <UART_SetConfig+0x290>)
 8003b02:	61bb      	str	r3, [r7, #24]
        break;
 8003b04:	e01d      	b.n	8003b42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b06:	f7fe ffd9 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8003b0a:	61b8      	str	r0, [r7, #24]
        break;
 8003b0c:	e019      	b.n	8003b42 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b12:	61bb      	str	r3, [r7, #24]
        break;
 8003b14:	e015      	b.n	8003b42 <UART_SetConfig+0x29e>
 8003b16:	bf00      	nop
 8003b18:	efff69f3 	.word	0xefff69f3
 8003b1c:	40013800 	.word	0x40013800
 8003b20:	40021000 	.word	0x40021000
 8003b24:	40004400 	.word	0x40004400
 8003b28:	40004800 	.word	0x40004800
 8003b2c:	40004c00 	.word	0x40004c00
 8003b30:	40005000 	.word	0x40005000
 8003b34:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	77bb      	strb	r3, [r7, #30]
        break;
 8003b40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d073      	beq.n	8003c30 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	005a      	lsls	r2, r3, #1
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	085b      	lsrs	r3, r3, #1
 8003b52:	441a      	add	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d916      	bls.n	8003b92 <UART_SetConfig+0x2ee>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b6a:	d212      	bcs.n	8003b92 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f023 030f 	bic.w	r3, r3, #15
 8003b74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	89fa      	ldrh	r2, [r7, #14]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	e04e      	b.n	8003c30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	77bb      	strb	r3, [r7, #30]
 8003b96:	e04b      	b.n	8003c30 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b98:	7ffb      	ldrb	r3, [r7, #31]
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d827      	bhi.n	8003bee <UART_SetConfig+0x34a>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <UART_SetConfig+0x300>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7fe ffd8 	bl	8002b7c <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61b8      	str	r0, [r7, #24]
        break;
 8003bce:	e013      	b.n	8003bf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7fe fff6 	bl	8002bc0 <HAL_RCC_GetPCLK2Freq>
 8003bd4:	61b8      	str	r0, [r7, #24]
        break;
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c48 <UART_SetConfig+0x3a4>)
 8003bda:	61bb      	str	r3, [r7, #24]
        break;
 8003bdc:	e00c      	b.n	8003bf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7fe ff6d 	bl	8002abc <HAL_RCC_GetSysClockFreq>
 8003be2:	61b8      	str	r0, [r7, #24]
        break;
 8003be4:	e008      	b.n	8003bf8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bea:	61bb      	str	r3, [r7, #24]
        break;
 8003bec:	e004      	b.n	8003bf8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bf6:	bf00      	nop
    }

    if (pclk != 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d018      	beq.n	8003c30 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085a      	lsrs	r2, r3, #1
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	2b0f      	cmp	r3, #15
 8003c16:	d909      	bls.n	8003c2c <UART_SetConfig+0x388>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c1e:	d205      	bcs.n	8003c2c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e001      	b.n	8003c30 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003c3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d00a      	beq.n	8003c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00a      	beq.n	8003c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9c:	f003 0302 	and.w	r3, r3, #2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	f003 0304 	and.w	r3, r3, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	430a      	orrs	r2, r1
 8003cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d01a      	beq.n	8003d62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d46:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d4a:	d10a      	bne.n	8003d62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	430a      	orrs	r2, r1
 8003d60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00a      	beq.n	8003d84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]
  }
}
 8003d84:	bf00      	nop
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b098      	sub	sp, #96	@ 0x60
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003da0:	f7fd f9ec 	bl	800117c <HAL_GetTick>
 8003da4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d12e      	bne.n	8003e12 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003db4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003db8:	9300      	str	r3, [sp, #0]
 8003dba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f88c 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d021      	beq.n	8003e12 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd6:	e853 3f00 	ldrex	r3, [r3]
 8003dda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003de2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003dec:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dee:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003df2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e6      	bne.n	8003dce <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e062      	b.n	8003ed8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d149      	bne.n	8003eb4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e20:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003e24:	9300      	str	r3, [sp, #0]
 8003e26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f856 	bl	8003ee0 <UART_WaitOnFlagUntilTimeout>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d03c      	beq.n	8003eb4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	623b      	str	r3, [r7, #32]
   return(result);
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	461a      	mov	r2, r3
 8003e56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e6      	bne.n	8003e3a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3308      	adds	r3, #8
 8003e72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	e853 3f00 	ldrex	r3, [r3]
 8003e7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3308      	adds	r3, #8
 8003e8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003e8c:	61fa      	str	r2, [r7, #28]
 8003e8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e90:	69b9      	ldr	r1, [r7, #24]
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	e841 2300 	strex	r3, r2, [r1]
 8003e98:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1e5      	bne.n	8003e6c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e011      	b.n	8003ed8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3758      	adds	r7, #88	@ 0x58
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	603b      	str	r3, [r7, #0]
 8003eec:	4613      	mov	r3, r2
 8003eee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef0:	e04f      	b.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef8:	d04b      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efa:	f7fd f93f 	bl	800117c <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d302      	bcc.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e04e      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d037      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b80      	cmp	r3, #128	@ 0x80
 8003f26:	d034      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2b40      	cmp	r3, #64	@ 0x40
 8003f2c:	d031      	beq.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b08      	cmp	r3, #8
 8003f3a:	d110      	bne.n	8003f5e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2208      	movs	r2, #8
 8003f42:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f838 	bl	8003fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e029      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f6c:	d111      	bne.n	8003f92 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f81e 	bl	8003fba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e00f      	b.n	8003fb2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	68ba      	ldr	r2, [r7, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	bf0c      	ite	eq
 8003fa2:	2301      	moveq	r3, #1
 8003fa4:	2300      	movne	r3, #0
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	461a      	mov	r2, r3
 8003faa:	79fb      	ldrb	r3, [r7, #7]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d0a0      	beq.n	8003ef2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}

08003fba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fba:	b480      	push	{r7}
 8003fbc:	b095      	sub	sp, #84	@ 0x54
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fe0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fe2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003fe6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e6      	bne.n	8003fc2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	e853 3f00 	ldrex	r3, [r3]
 8004002:	61fb      	str	r3, [r7, #28]
   return(result);
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3308      	adds	r3, #8
 8004012:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004014:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004016:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004018:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800401a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800401c:	e841 2300 	strex	r3, r2, [r1]
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1e5      	bne.n	8003ff4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800402c:	2b01      	cmp	r3, #1
 800402e:	d118      	bne.n	8004062 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e853 3f00 	ldrex	r3, [r3]
 800403c:	60bb      	str	r3, [r7, #8]
   return(result);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f023 0310 	bic.w	r3, r3, #16
 8004044:	647b      	str	r3, [r7, #68]	@ 0x44
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004052:	6979      	ldr	r1, [r7, #20]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	613b      	str	r3, [r7, #16]
   return(result);
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1e6      	bne.n	8004030 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2200      	movs	r2, #0
 800406e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004076:	bf00      	nop
 8004078:	3754      	adds	r7, #84	@ 0x54
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
	...

08004084 <std>:
 8004084:	2300      	movs	r3, #0
 8004086:	b510      	push	{r4, lr}
 8004088:	4604      	mov	r4, r0
 800408a:	e9c0 3300 	strd	r3, r3, [r0]
 800408e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004092:	6083      	str	r3, [r0, #8]
 8004094:	8181      	strh	r1, [r0, #12]
 8004096:	6643      	str	r3, [r0, #100]	@ 0x64
 8004098:	81c2      	strh	r2, [r0, #14]
 800409a:	6183      	str	r3, [r0, #24]
 800409c:	4619      	mov	r1, r3
 800409e:	2208      	movs	r2, #8
 80040a0:	305c      	adds	r0, #92	@ 0x5c
 80040a2:	f000 f9f9 	bl	8004498 <memset>
 80040a6:	4b0d      	ldr	r3, [pc, #52]	@ (80040dc <std+0x58>)
 80040a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <std+0x5c>)
 80040ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80040ae:	4b0d      	ldr	r3, [pc, #52]	@ (80040e4 <std+0x60>)
 80040b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80040b2:	4b0d      	ldr	r3, [pc, #52]	@ (80040e8 <std+0x64>)
 80040b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80040b6:	4b0d      	ldr	r3, [pc, #52]	@ (80040ec <std+0x68>)
 80040b8:	6224      	str	r4, [r4, #32]
 80040ba:	429c      	cmp	r4, r3
 80040bc:	d006      	beq.n	80040cc <std+0x48>
 80040be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80040c2:	4294      	cmp	r4, r2
 80040c4:	d002      	beq.n	80040cc <std+0x48>
 80040c6:	33d0      	adds	r3, #208	@ 0xd0
 80040c8:	429c      	cmp	r4, r3
 80040ca:	d105      	bne.n	80040d8 <std+0x54>
 80040cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80040d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040d4:	f000 ba58 	b.w	8004588 <__retarget_lock_init_recursive>
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	080042e9 	.word	0x080042e9
 80040e0:	0800430b 	.word	0x0800430b
 80040e4:	08004343 	.word	0x08004343
 80040e8:	08004367 	.word	0x08004367
 80040ec:	20000160 	.word	0x20000160

080040f0 <stdio_exit_handler>:
 80040f0:	4a02      	ldr	r2, [pc, #8]	@ (80040fc <stdio_exit_handler+0xc>)
 80040f2:	4903      	ldr	r1, [pc, #12]	@ (8004100 <stdio_exit_handler+0x10>)
 80040f4:	4803      	ldr	r0, [pc, #12]	@ (8004104 <stdio_exit_handler+0x14>)
 80040f6:	f000 b869 	b.w	80041cc <_fwalk_sglue>
 80040fa:	bf00      	nop
 80040fc:	2000000c 	.word	0x2000000c
 8004100:	08004e29 	.word	0x08004e29
 8004104:	2000001c 	.word	0x2000001c

08004108 <cleanup_stdio>:
 8004108:	6841      	ldr	r1, [r0, #4]
 800410a:	4b0c      	ldr	r3, [pc, #48]	@ (800413c <cleanup_stdio+0x34>)
 800410c:	4299      	cmp	r1, r3
 800410e:	b510      	push	{r4, lr}
 8004110:	4604      	mov	r4, r0
 8004112:	d001      	beq.n	8004118 <cleanup_stdio+0x10>
 8004114:	f000 fe88 	bl	8004e28 <_fflush_r>
 8004118:	68a1      	ldr	r1, [r4, #8]
 800411a:	4b09      	ldr	r3, [pc, #36]	@ (8004140 <cleanup_stdio+0x38>)
 800411c:	4299      	cmp	r1, r3
 800411e:	d002      	beq.n	8004126 <cleanup_stdio+0x1e>
 8004120:	4620      	mov	r0, r4
 8004122:	f000 fe81 	bl	8004e28 <_fflush_r>
 8004126:	68e1      	ldr	r1, [r4, #12]
 8004128:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <cleanup_stdio+0x3c>)
 800412a:	4299      	cmp	r1, r3
 800412c:	d004      	beq.n	8004138 <cleanup_stdio+0x30>
 800412e:	4620      	mov	r0, r4
 8004130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004134:	f000 be78 	b.w	8004e28 <_fflush_r>
 8004138:	bd10      	pop	{r4, pc}
 800413a:	bf00      	nop
 800413c:	20000160 	.word	0x20000160
 8004140:	200001c8 	.word	0x200001c8
 8004144:	20000230 	.word	0x20000230

08004148 <global_stdio_init.part.0>:
 8004148:	b510      	push	{r4, lr}
 800414a:	4b0b      	ldr	r3, [pc, #44]	@ (8004178 <global_stdio_init.part.0+0x30>)
 800414c:	4c0b      	ldr	r4, [pc, #44]	@ (800417c <global_stdio_init.part.0+0x34>)
 800414e:	4a0c      	ldr	r2, [pc, #48]	@ (8004180 <global_stdio_init.part.0+0x38>)
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	4620      	mov	r0, r4
 8004154:	2200      	movs	r2, #0
 8004156:	2104      	movs	r1, #4
 8004158:	f7ff ff94 	bl	8004084 <std>
 800415c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004160:	2201      	movs	r2, #1
 8004162:	2109      	movs	r1, #9
 8004164:	f7ff ff8e 	bl	8004084 <std>
 8004168:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800416c:	2202      	movs	r2, #2
 800416e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004172:	2112      	movs	r1, #18
 8004174:	f7ff bf86 	b.w	8004084 <std>
 8004178:	20000298 	.word	0x20000298
 800417c:	20000160 	.word	0x20000160
 8004180:	080040f1 	.word	0x080040f1

08004184 <__sfp_lock_acquire>:
 8004184:	4801      	ldr	r0, [pc, #4]	@ (800418c <__sfp_lock_acquire+0x8>)
 8004186:	f000 ba00 	b.w	800458a <__retarget_lock_acquire_recursive>
 800418a:	bf00      	nop
 800418c:	200002a1 	.word	0x200002a1

08004190 <__sfp_lock_release>:
 8004190:	4801      	ldr	r0, [pc, #4]	@ (8004198 <__sfp_lock_release+0x8>)
 8004192:	f000 b9fb 	b.w	800458c <__retarget_lock_release_recursive>
 8004196:	bf00      	nop
 8004198:	200002a1 	.word	0x200002a1

0800419c <__sinit>:
 800419c:	b510      	push	{r4, lr}
 800419e:	4604      	mov	r4, r0
 80041a0:	f7ff fff0 	bl	8004184 <__sfp_lock_acquire>
 80041a4:	6a23      	ldr	r3, [r4, #32]
 80041a6:	b11b      	cbz	r3, 80041b0 <__sinit+0x14>
 80041a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041ac:	f7ff bff0 	b.w	8004190 <__sfp_lock_release>
 80041b0:	4b04      	ldr	r3, [pc, #16]	@ (80041c4 <__sinit+0x28>)
 80041b2:	6223      	str	r3, [r4, #32]
 80041b4:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <__sinit+0x2c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f5      	bne.n	80041a8 <__sinit+0xc>
 80041bc:	f7ff ffc4 	bl	8004148 <global_stdio_init.part.0>
 80041c0:	e7f2      	b.n	80041a8 <__sinit+0xc>
 80041c2:	bf00      	nop
 80041c4:	08004109 	.word	0x08004109
 80041c8:	20000298 	.word	0x20000298

080041cc <_fwalk_sglue>:
 80041cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041d0:	4607      	mov	r7, r0
 80041d2:	4688      	mov	r8, r1
 80041d4:	4614      	mov	r4, r2
 80041d6:	2600      	movs	r6, #0
 80041d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041dc:	f1b9 0901 	subs.w	r9, r9, #1
 80041e0:	d505      	bpl.n	80041ee <_fwalk_sglue+0x22>
 80041e2:	6824      	ldr	r4, [r4, #0]
 80041e4:	2c00      	cmp	r4, #0
 80041e6:	d1f7      	bne.n	80041d8 <_fwalk_sglue+0xc>
 80041e8:	4630      	mov	r0, r6
 80041ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041ee:	89ab      	ldrh	r3, [r5, #12]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d907      	bls.n	8004204 <_fwalk_sglue+0x38>
 80041f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041f8:	3301      	adds	r3, #1
 80041fa:	d003      	beq.n	8004204 <_fwalk_sglue+0x38>
 80041fc:	4629      	mov	r1, r5
 80041fe:	4638      	mov	r0, r7
 8004200:	47c0      	blx	r8
 8004202:	4306      	orrs	r6, r0
 8004204:	3568      	adds	r5, #104	@ 0x68
 8004206:	e7e9      	b.n	80041dc <_fwalk_sglue+0x10>

08004208 <iprintf>:
 8004208:	b40f      	push	{r0, r1, r2, r3}
 800420a:	b507      	push	{r0, r1, r2, lr}
 800420c:	4906      	ldr	r1, [pc, #24]	@ (8004228 <iprintf+0x20>)
 800420e:	ab04      	add	r3, sp, #16
 8004210:	6808      	ldr	r0, [r1, #0]
 8004212:	f853 2b04 	ldr.w	r2, [r3], #4
 8004216:	6881      	ldr	r1, [r0, #8]
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	f000 fadb 	bl	80047d4 <_vfiprintf_r>
 800421e:	b003      	add	sp, #12
 8004220:	f85d eb04 	ldr.w	lr, [sp], #4
 8004224:	b004      	add	sp, #16
 8004226:	4770      	bx	lr
 8004228:	20000018 	.word	0x20000018

0800422c <_puts_r>:
 800422c:	6a03      	ldr	r3, [r0, #32]
 800422e:	b570      	push	{r4, r5, r6, lr}
 8004230:	6884      	ldr	r4, [r0, #8]
 8004232:	4605      	mov	r5, r0
 8004234:	460e      	mov	r6, r1
 8004236:	b90b      	cbnz	r3, 800423c <_puts_r+0x10>
 8004238:	f7ff ffb0 	bl	800419c <__sinit>
 800423c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800423e:	07db      	lsls	r3, r3, #31
 8004240:	d405      	bmi.n	800424e <_puts_r+0x22>
 8004242:	89a3      	ldrh	r3, [r4, #12]
 8004244:	0598      	lsls	r0, r3, #22
 8004246:	d402      	bmi.n	800424e <_puts_r+0x22>
 8004248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800424a:	f000 f99e 	bl	800458a <__retarget_lock_acquire_recursive>
 800424e:	89a3      	ldrh	r3, [r4, #12]
 8004250:	0719      	lsls	r1, r3, #28
 8004252:	d502      	bpl.n	800425a <_puts_r+0x2e>
 8004254:	6923      	ldr	r3, [r4, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d135      	bne.n	80042c6 <_puts_r+0x9a>
 800425a:	4621      	mov	r1, r4
 800425c:	4628      	mov	r0, r5
 800425e:	f000 f8c5 	bl	80043ec <__swsetup_r>
 8004262:	b380      	cbz	r0, 80042c6 <_puts_r+0x9a>
 8004264:	f04f 35ff 	mov.w	r5, #4294967295
 8004268:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800426a:	07da      	lsls	r2, r3, #31
 800426c:	d405      	bmi.n	800427a <_puts_r+0x4e>
 800426e:	89a3      	ldrh	r3, [r4, #12]
 8004270:	059b      	lsls	r3, r3, #22
 8004272:	d402      	bmi.n	800427a <_puts_r+0x4e>
 8004274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004276:	f000 f989 	bl	800458c <__retarget_lock_release_recursive>
 800427a:	4628      	mov	r0, r5
 800427c:	bd70      	pop	{r4, r5, r6, pc}
 800427e:	2b00      	cmp	r3, #0
 8004280:	da04      	bge.n	800428c <_puts_r+0x60>
 8004282:	69a2      	ldr	r2, [r4, #24]
 8004284:	429a      	cmp	r2, r3
 8004286:	dc17      	bgt.n	80042b8 <_puts_r+0x8c>
 8004288:	290a      	cmp	r1, #10
 800428a:	d015      	beq.n	80042b8 <_puts_r+0x8c>
 800428c:	6823      	ldr	r3, [r4, #0]
 800428e:	1c5a      	adds	r2, r3, #1
 8004290:	6022      	str	r2, [r4, #0]
 8004292:	7019      	strb	r1, [r3, #0]
 8004294:	68a3      	ldr	r3, [r4, #8]
 8004296:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800429a:	3b01      	subs	r3, #1
 800429c:	60a3      	str	r3, [r4, #8]
 800429e:	2900      	cmp	r1, #0
 80042a0:	d1ed      	bne.n	800427e <_puts_r+0x52>
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	da11      	bge.n	80042ca <_puts_r+0x9e>
 80042a6:	4622      	mov	r2, r4
 80042a8:	210a      	movs	r1, #10
 80042aa:	4628      	mov	r0, r5
 80042ac:	f000 f85f 	bl	800436e <__swbuf_r>
 80042b0:	3001      	adds	r0, #1
 80042b2:	d0d7      	beq.n	8004264 <_puts_r+0x38>
 80042b4:	250a      	movs	r5, #10
 80042b6:	e7d7      	b.n	8004268 <_puts_r+0x3c>
 80042b8:	4622      	mov	r2, r4
 80042ba:	4628      	mov	r0, r5
 80042bc:	f000 f857 	bl	800436e <__swbuf_r>
 80042c0:	3001      	adds	r0, #1
 80042c2:	d1e7      	bne.n	8004294 <_puts_r+0x68>
 80042c4:	e7ce      	b.n	8004264 <_puts_r+0x38>
 80042c6:	3e01      	subs	r6, #1
 80042c8:	e7e4      	b.n	8004294 <_puts_r+0x68>
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	6022      	str	r2, [r4, #0]
 80042d0:	220a      	movs	r2, #10
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	e7ee      	b.n	80042b4 <_puts_r+0x88>
	...

080042d8 <puts>:
 80042d8:	4b02      	ldr	r3, [pc, #8]	@ (80042e4 <puts+0xc>)
 80042da:	4601      	mov	r1, r0
 80042dc:	6818      	ldr	r0, [r3, #0]
 80042de:	f7ff bfa5 	b.w	800422c <_puts_r>
 80042e2:	bf00      	nop
 80042e4:	20000018 	.word	0x20000018

080042e8 <__sread>:
 80042e8:	b510      	push	{r4, lr}
 80042ea:	460c      	mov	r4, r1
 80042ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042f0:	f000 f8fc 	bl	80044ec <_read_r>
 80042f4:	2800      	cmp	r0, #0
 80042f6:	bfab      	itete	ge
 80042f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80042fa:	89a3      	ldrhlt	r3, [r4, #12]
 80042fc:	181b      	addge	r3, r3, r0
 80042fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004302:	bfac      	ite	ge
 8004304:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004306:	81a3      	strhlt	r3, [r4, #12]
 8004308:	bd10      	pop	{r4, pc}

0800430a <__swrite>:
 800430a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800430e:	461f      	mov	r7, r3
 8004310:	898b      	ldrh	r3, [r1, #12]
 8004312:	05db      	lsls	r3, r3, #23
 8004314:	4605      	mov	r5, r0
 8004316:	460c      	mov	r4, r1
 8004318:	4616      	mov	r6, r2
 800431a:	d505      	bpl.n	8004328 <__swrite+0x1e>
 800431c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004320:	2302      	movs	r3, #2
 8004322:	2200      	movs	r2, #0
 8004324:	f000 f8d0 	bl	80044c8 <_lseek_r>
 8004328:	89a3      	ldrh	r3, [r4, #12]
 800432a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800432e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004332:	81a3      	strh	r3, [r4, #12]
 8004334:	4632      	mov	r2, r6
 8004336:	463b      	mov	r3, r7
 8004338:	4628      	mov	r0, r5
 800433a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800433e:	f000 b8e7 	b.w	8004510 <_write_r>

08004342 <__sseek>:
 8004342:	b510      	push	{r4, lr}
 8004344:	460c      	mov	r4, r1
 8004346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800434a:	f000 f8bd 	bl	80044c8 <_lseek_r>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	89a3      	ldrh	r3, [r4, #12]
 8004352:	bf15      	itete	ne
 8004354:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004356:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800435a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800435e:	81a3      	strheq	r3, [r4, #12]
 8004360:	bf18      	it	ne
 8004362:	81a3      	strhne	r3, [r4, #12]
 8004364:	bd10      	pop	{r4, pc}

08004366 <__sclose>:
 8004366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800436a:	f000 b89d 	b.w	80044a8 <_close_r>

0800436e <__swbuf_r>:
 800436e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004370:	460e      	mov	r6, r1
 8004372:	4614      	mov	r4, r2
 8004374:	4605      	mov	r5, r0
 8004376:	b118      	cbz	r0, 8004380 <__swbuf_r+0x12>
 8004378:	6a03      	ldr	r3, [r0, #32]
 800437a:	b90b      	cbnz	r3, 8004380 <__swbuf_r+0x12>
 800437c:	f7ff ff0e 	bl	800419c <__sinit>
 8004380:	69a3      	ldr	r3, [r4, #24]
 8004382:	60a3      	str	r3, [r4, #8]
 8004384:	89a3      	ldrh	r3, [r4, #12]
 8004386:	071a      	lsls	r2, r3, #28
 8004388:	d501      	bpl.n	800438e <__swbuf_r+0x20>
 800438a:	6923      	ldr	r3, [r4, #16]
 800438c:	b943      	cbnz	r3, 80043a0 <__swbuf_r+0x32>
 800438e:	4621      	mov	r1, r4
 8004390:	4628      	mov	r0, r5
 8004392:	f000 f82b 	bl	80043ec <__swsetup_r>
 8004396:	b118      	cbz	r0, 80043a0 <__swbuf_r+0x32>
 8004398:	f04f 37ff 	mov.w	r7, #4294967295
 800439c:	4638      	mov	r0, r7
 800439e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	6922      	ldr	r2, [r4, #16]
 80043a4:	1a98      	subs	r0, r3, r2
 80043a6:	6963      	ldr	r3, [r4, #20]
 80043a8:	b2f6      	uxtb	r6, r6
 80043aa:	4283      	cmp	r3, r0
 80043ac:	4637      	mov	r7, r6
 80043ae:	dc05      	bgt.n	80043bc <__swbuf_r+0x4e>
 80043b0:	4621      	mov	r1, r4
 80043b2:	4628      	mov	r0, r5
 80043b4:	f000 fd38 	bl	8004e28 <_fflush_r>
 80043b8:	2800      	cmp	r0, #0
 80043ba:	d1ed      	bne.n	8004398 <__swbuf_r+0x2a>
 80043bc:	68a3      	ldr	r3, [r4, #8]
 80043be:	3b01      	subs	r3, #1
 80043c0:	60a3      	str	r3, [r4, #8]
 80043c2:	6823      	ldr	r3, [r4, #0]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	6022      	str	r2, [r4, #0]
 80043c8:	701e      	strb	r6, [r3, #0]
 80043ca:	6962      	ldr	r2, [r4, #20]
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d004      	beq.n	80043dc <__swbuf_r+0x6e>
 80043d2:	89a3      	ldrh	r3, [r4, #12]
 80043d4:	07db      	lsls	r3, r3, #31
 80043d6:	d5e1      	bpl.n	800439c <__swbuf_r+0x2e>
 80043d8:	2e0a      	cmp	r6, #10
 80043da:	d1df      	bne.n	800439c <__swbuf_r+0x2e>
 80043dc:	4621      	mov	r1, r4
 80043de:	4628      	mov	r0, r5
 80043e0:	f000 fd22 	bl	8004e28 <_fflush_r>
 80043e4:	2800      	cmp	r0, #0
 80043e6:	d0d9      	beq.n	800439c <__swbuf_r+0x2e>
 80043e8:	e7d6      	b.n	8004398 <__swbuf_r+0x2a>
	...

080043ec <__swsetup_r>:
 80043ec:	b538      	push	{r3, r4, r5, lr}
 80043ee:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <__swsetup_r+0xa8>)
 80043f0:	4605      	mov	r5, r0
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	460c      	mov	r4, r1
 80043f6:	b118      	cbz	r0, 8004400 <__swsetup_r+0x14>
 80043f8:	6a03      	ldr	r3, [r0, #32]
 80043fa:	b90b      	cbnz	r3, 8004400 <__swsetup_r+0x14>
 80043fc:	f7ff fece 	bl	800419c <__sinit>
 8004400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004404:	0719      	lsls	r1, r3, #28
 8004406:	d422      	bmi.n	800444e <__swsetup_r+0x62>
 8004408:	06da      	lsls	r2, r3, #27
 800440a:	d407      	bmi.n	800441c <__swsetup_r+0x30>
 800440c:	2209      	movs	r2, #9
 800440e:	602a      	str	r2, [r5, #0]
 8004410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004414:	81a3      	strh	r3, [r4, #12]
 8004416:	f04f 30ff 	mov.w	r0, #4294967295
 800441a:	e033      	b.n	8004484 <__swsetup_r+0x98>
 800441c:	0758      	lsls	r0, r3, #29
 800441e:	d512      	bpl.n	8004446 <__swsetup_r+0x5a>
 8004420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004422:	b141      	cbz	r1, 8004436 <__swsetup_r+0x4a>
 8004424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004428:	4299      	cmp	r1, r3
 800442a:	d002      	beq.n	8004432 <__swsetup_r+0x46>
 800442c:	4628      	mov	r0, r5
 800442e:	f000 f8af 	bl	8004590 <_free_r>
 8004432:	2300      	movs	r3, #0
 8004434:	6363      	str	r3, [r4, #52]	@ 0x34
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800443c:	81a3      	strh	r3, [r4, #12]
 800443e:	2300      	movs	r3, #0
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	6923      	ldr	r3, [r4, #16]
 8004444:	6023      	str	r3, [r4, #0]
 8004446:	89a3      	ldrh	r3, [r4, #12]
 8004448:	f043 0308 	orr.w	r3, r3, #8
 800444c:	81a3      	strh	r3, [r4, #12]
 800444e:	6923      	ldr	r3, [r4, #16]
 8004450:	b94b      	cbnz	r3, 8004466 <__swsetup_r+0x7a>
 8004452:	89a3      	ldrh	r3, [r4, #12]
 8004454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800445c:	d003      	beq.n	8004466 <__swsetup_r+0x7a>
 800445e:	4621      	mov	r1, r4
 8004460:	4628      	mov	r0, r5
 8004462:	f000 fd2f 	bl	8004ec4 <__smakebuf_r>
 8004466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800446a:	f013 0201 	ands.w	r2, r3, #1
 800446e:	d00a      	beq.n	8004486 <__swsetup_r+0x9a>
 8004470:	2200      	movs	r2, #0
 8004472:	60a2      	str	r2, [r4, #8]
 8004474:	6962      	ldr	r2, [r4, #20]
 8004476:	4252      	negs	r2, r2
 8004478:	61a2      	str	r2, [r4, #24]
 800447a:	6922      	ldr	r2, [r4, #16]
 800447c:	b942      	cbnz	r2, 8004490 <__swsetup_r+0xa4>
 800447e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004482:	d1c5      	bne.n	8004410 <__swsetup_r+0x24>
 8004484:	bd38      	pop	{r3, r4, r5, pc}
 8004486:	0799      	lsls	r1, r3, #30
 8004488:	bf58      	it	pl
 800448a:	6962      	ldrpl	r2, [r4, #20]
 800448c:	60a2      	str	r2, [r4, #8]
 800448e:	e7f4      	b.n	800447a <__swsetup_r+0x8e>
 8004490:	2000      	movs	r0, #0
 8004492:	e7f7      	b.n	8004484 <__swsetup_r+0x98>
 8004494:	20000018 	.word	0x20000018

08004498 <memset>:
 8004498:	4402      	add	r2, r0
 800449a:	4603      	mov	r3, r0
 800449c:	4293      	cmp	r3, r2
 800449e:	d100      	bne.n	80044a2 <memset+0xa>
 80044a0:	4770      	bx	lr
 80044a2:	f803 1b01 	strb.w	r1, [r3], #1
 80044a6:	e7f9      	b.n	800449c <memset+0x4>

080044a8 <_close_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4d06      	ldr	r5, [pc, #24]	@ (80044c4 <_close_r+0x1c>)
 80044ac:	2300      	movs	r3, #0
 80044ae:	4604      	mov	r4, r0
 80044b0:	4608      	mov	r0, r1
 80044b2:	602b      	str	r3, [r5, #0]
 80044b4:	f7fc fd62 	bl	8000f7c <_close>
 80044b8:	1c43      	adds	r3, r0, #1
 80044ba:	d102      	bne.n	80044c2 <_close_r+0x1a>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	b103      	cbz	r3, 80044c2 <_close_r+0x1a>
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	bd38      	pop	{r3, r4, r5, pc}
 80044c4:	2000029c 	.word	0x2000029c

080044c8 <_lseek_r>:
 80044c8:	b538      	push	{r3, r4, r5, lr}
 80044ca:	4d07      	ldr	r5, [pc, #28]	@ (80044e8 <_lseek_r+0x20>)
 80044cc:	4604      	mov	r4, r0
 80044ce:	4608      	mov	r0, r1
 80044d0:	4611      	mov	r1, r2
 80044d2:	2200      	movs	r2, #0
 80044d4:	602a      	str	r2, [r5, #0]
 80044d6:	461a      	mov	r2, r3
 80044d8:	f7fc fd77 	bl	8000fca <_lseek>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_lseek_r+0x1e>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_lseek_r+0x1e>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	2000029c 	.word	0x2000029c

080044ec <_read_r>:
 80044ec:	b538      	push	{r3, r4, r5, lr}
 80044ee:	4d07      	ldr	r5, [pc, #28]	@ (800450c <_read_r+0x20>)
 80044f0:	4604      	mov	r4, r0
 80044f2:	4608      	mov	r0, r1
 80044f4:	4611      	mov	r1, r2
 80044f6:	2200      	movs	r2, #0
 80044f8:	602a      	str	r2, [r5, #0]
 80044fa:	461a      	mov	r2, r3
 80044fc:	f7fc fd05 	bl	8000f0a <_read>
 8004500:	1c43      	adds	r3, r0, #1
 8004502:	d102      	bne.n	800450a <_read_r+0x1e>
 8004504:	682b      	ldr	r3, [r5, #0]
 8004506:	b103      	cbz	r3, 800450a <_read_r+0x1e>
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	bd38      	pop	{r3, r4, r5, pc}
 800450c:	2000029c 	.word	0x2000029c

08004510 <_write_r>:
 8004510:	b538      	push	{r3, r4, r5, lr}
 8004512:	4d07      	ldr	r5, [pc, #28]	@ (8004530 <_write_r+0x20>)
 8004514:	4604      	mov	r4, r0
 8004516:	4608      	mov	r0, r1
 8004518:	4611      	mov	r1, r2
 800451a:	2200      	movs	r2, #0
 800451c:	602a      	str	r2, [r5, #0]
 800451e:	461a      	mov	r2, r3
 8004520:	f7fc fd10 	bl	8000f44 <_write>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d102      	bne.n	800452e <_write_r+0x1e>
 8004528:	682b      	ldr	r3, [r5, #0]
 800452a:	b103      	cbz	r3, 800452e <_write_r+0x1e>
 800452c:	6023      	str	r3, [r4, #0]
 800452e:	bd38      	pop	{r3, r4, r5, pc}
 8004530:	2000029c 	.word	0x2000029c

08004534 <__errno>:
 8004534:	4b01      	ldr	r3, [pc, #4]	@ (800453c <__errno+0x8>)
 8004536:	6818      	ldr	r0, [r3, #0]
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	20000018 	.word	0x20000018

08004540 <__libc_init_array>:
 8004540:	b570      	push	{r4, r5, r6, lr}
 8004542:	4d0d      	ldr	r5, [pc, #52]	@ (8004578 <__libc_init_array+0x38>)
 8004544:	4c0d      	ldr	r4, [pc, #52]	@ (800457c <__libc_init_array+0x3c>)
 8004546:	1b64      	subs	r4, r4, r5
 8004548:	10a4      	asrs	r4, r4, #2
 800454a:	2600      	movs	r6, #0
 800454c:	42a6      	cmp	r6, r4
 800454e:	d109      	bne.n	8004564 <__libc_init_array+0x24>
 8004550:	4d0b      	ldr	r5, [pc, #44]	@ (8004580 <__libc_init_array+0x40>)
 8004552:	4c0c      	ldr	r4, [pc, #48]	@ (8004584 <__libc_init_array+0x44>)
 8004554:	f000 fd24 	bl	8004fa0 <_init>
 8004558:	1b64      	subs	r4, r4, r5
 800455a:	10a4      	asrs	r4, r4, #2
 800455c:	2600      	movs	r6, #0
 800455e:	42a6      	cmp	r6, r4
 8004560:	d105      	bne.n	800456e <__libc_init_array+0x2e>
 8004562:	bd70      	pop	{r4, r5, r6, pc}
 8004564:	f855 3b04 	ldr.w	r3, [r5], #4
 8004568:	4798      	blx	r3
 800456a:	3601      	adds	r6, #1
 800456c:	e7ee      	b.n	800454c <__libc_init_array+0xc>
 800456e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004572:	4798      	blx	r3
 8004574:	3601      	adds	r6, #1
 8004576:	e7f2      	b.n	800455e <__libc_init_array+0x1e>
 8004578:	08005088 	.word	0x08005088
 800457c:	08005088 	.word	0x08005088
 8004580:	08005088 	.word	0x08005088
 8004584:	0800508c 	.word	0x0800508c

08004588 <__retarget_lock_init_recursive>:
 8004588:	4770      	bx	lr

0800458a <__retarget_lock_acquire_recursive>:
 800458a:	4770      	bx	lr

0800458c <__retarget_lock_release_recursive>:
 800458c:	4770      	bx	lr
	...

08004590 <_free_r>:
 8004590:	b538      	push	{r3, r4, r5, lr}
 8004592:	4605      	mov	r5, r0
 8004594:	2900      	cmp	r1, #0
 8004596:	d041      	beq.n	800461c <_free_r+0x8c>
 8004598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800459c:	1f0c      	subs	r4, r1, #4
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bfb8      	it	lt
 80045a2:	18e4      	addlt	r4, r4, r3
 80045a4:	f000 f8e0 	bl	8004768 <__malloc_lock>
 80045a8:	4a1d      	ldr	r2, [pc, #116]	@ (8004620 <_free_r+0x90>)
 80045aa:	6813      	ldr	r3, [r2, #0]
 80045ac:	b933      	cbnz	r3, 80045bc <_free_r+0x2c>
 80045ae:	6063      	str	r3, [r4, #4]
 80045b0:	6014      	str	r4, [r2, #0]
 80045b2:	4628      	mov	r0, r5
 80045b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045b8:	f000 b8dc 	b.w	8004774 <__malloc_unlock>
 80045bc:	42a3      	cmp	r3, r4
 80045be:	d908      	bls.n	80045d2 <_free_r+0x42>
 80045c0:	6820      	ldr	r0, [r4, #0]
 80045c2:	1821      	adds	r1, r4, r0
 80045c4:	428b      	cmp	r3, r1
 80045c6:	bf01      	itttt	eq
 80045c8:	6819      	ldreq	r1, [r3, #0]
 80045ca:	685b      	ldreq	r3, [r3, #4]
 80045cc:	1809      	addeq	r1, r1, r0
 80045ce:	6021      	streq	r1, [r4, #0]
 80045d0:	e7ed      	b.n	80045ae <_free_r+0x1e>
 80045d2:	461a      	mov	r2, r3
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	b10b      	cbz	r3, 80045dc <_free_r+0x4c>
 80045d8:	42a3      	cmp	r3, r4
 80045da:	d9fa      	bls.n	80045d2 <_free_r+0x42>
 80045dc:	6811      	ldr	r1, [r2, #0]
 80045de:	1850      	adds	r0, r2, r1
 80045e0:	42a0      	cmp	r0, r4
 80045e2:	d10b      	bne.n	80045fc <_free_r+0x6c>
 80045e4:	6820      	ldr	r0, [r4, #0]
 80045e6:	4401      	add	r1, r0
 80045e8:	1850      	adds	r0, r2, r1
 80045ea:	4283      	cmp	r3, r0
 80045ec:	6011      	str	r1, [r2, #0]
 80045ee:	d1e0      	bne.n	80045b2 <_free_r+0x22>
 80045f0:	6818      	ldr	r0, [r3, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	6053      	str	r3, [r2, #4]
 80045f6:	4408      	add	r0, r1
 80045f8:	6010      	str	r0, [r2, #0]
 80045fa:	e7da      	b.n	80045b2 <_free_r+0x22>
 80045fc:	d902      	bls.n	8004604 <_free_r+0x74>
 80045fe:	230c      	movs	r3, #12
 8004600:	602b      	str	r3, [r5, #0]
 8004602:	e7d6      	b.n	80045b2 <_free_r+0x22>
 8004604:	6820      	ldr	r0, [r4, #0]
 8004606:	1821      	adds	r1, r4, r0
 8004608:	428b      	cmp	r3, r1
 800460a:	bf04      	itt	eq
 800460c:	6819      	ldreq	r1, [r3, #0]
 800460e:	685b      	ldreq	r3, [r3, #4]
 8004610:	6063      	str	r3, [r4, #4]
 8004612:	bf04      	itt	eq
 8004614:	1809      	addeq	r1, r1, r0
 8004616:	6021      	streq	r1, [r4, #0]
 8004618:	6054      	str	r4, [r2, #4]
 800461a:	e7ca      	b.n	80045b2 <_free_r+0x22>
 800461c:	bd38      	pop	{r3, r4, r5, pc}
 800461e:	bf00      	nop
 8004620:	200002a8 	.word	0x200002a8

08004624 <sbrk_aligned>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	4e0f      	ldr	r6, [pc, #60]	@ (8004664 <sbrk_aligned+0x40>)
 8004628:	460c      	mov	r4, r1
 800462a:	6831      	ldr	r1, [r6, #0]
 800462c:	4605      	mov	r5, r0
 800462e:	b911      	cbnz	r1, 8004636 <sbrk_aligned+0x12>
 8004630:	f000 fca6 	bl	8004f80 <_sbrk_r>
 8004634:	6030      	str	r0, [r6, #0]
 8004636:	4621      	mov	r1, r4
 8004638:	4628      	mov	r0, r5
 800463a:	f000 fca1 	bl	8004f80 <_sbrk_r>
 800463e:	1c43      	adds	r3, r0, #1
 8004640:	d103      	bne.n	800464a <sbrk_aligned+0x26>
 8004642:	f04f 34ff 	mov.w	r4, #4294967295
 8004646:	4620      	mov	r0, r4
 8004648:	bd70      	pop	{r4, r5, r6, pc}
 800464a:	1cc4      	adds	r4, r0, #3
 800464c:	f024 0403 	bic.w	r4, r4, #3
 8004650:	42a0      	cmp	r0, r4
 8004652:	d0f8      	beq.n	8004646 <sbrk_aligned+0x22>
 8004654:	1a21      	subs	r1, r4, r0
 8004656:	4628      	mov	r0, r5
 8004658:	f000 fc92 	bl	8004f80 <_sbrk_r>
 800465c:	3001      	adds	r0, #1
 800465e:	d1f2      	bne.n	8004646 <sbrk_aligned+0x22>
 8004660:	e7ef      	b.n	8004642 <sbrk_aligned+0x1e>
 8004662:	bf00      	nop
 8004664:	200002a4 	.word	0x200002a4

08004668 <_malloc_r>:
 8004668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800466c:	1ccd      	adds	r5, r1, #3
 800466e:	f025 0503 	bic.w	r5, r5, #3
 8004672:	3508      	adds	r5, #8
 8004674:	2d0c      	cmp	r5, #12
 8004676:	bf38      	it	cc
 8004678:	250c      	movcc	r5, #12
 800467a:	2d00      	cmp	r5, #0
 800467c:	4606      	mov	r6, r0
 800467e:	db01      	blt.n	8004684 <_malloc_r+0x1c>
 8004680:	42a9      	cmp	r1, r5
 8004682:	d904      	bls.n	800468e <_malloc_r+0x26>
 8004684:	230c      	movs	r3, #12
 8004686:	6033      	str	r3, [r6, #0]
 8004688:	2000      	movs	r0, #0
 800468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800468e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004764 <_malloc_r+0xfc>
 8004692:	f000 f869 	bl	8004768 <__malloc_lock>
 8004696:	f8d8 3000 	ldr.w	r3, [r8]
 800469a:	461c      	mov	r4, r3
 800469c:	bb44      	cbnz	r4, 80046f0 <_malloc_r+0x88>
 800469e:	4629      	mov	r1, r5
 80046a0:	4630      	mov	r0, r6
 80046a2:	f7ff ffbf 	bl	8004624 <sbrk_aligned>
 80046a6:	1c43      	adds	r3, r0, #1
 80046a8:	4604      	mov	r4, r0
 80046aa:	d158      	bne.n	800475e <_malloc_r+0xf6>
 80046ac:	f8d8 4000 	ldr.w	r4, [r8]
 80046b0:	4627      	mov	r7, r4
 80046b2:	2f00      	cmp	r7, #0
 80046b4:	d143      	bne.n	800473e <_malloc_r+0xd6>
 80046b6:	2c00      	cmp	r4, #0
 80046b8:	d04b      	beq.n	8004752 <_malloc_r+0xea>
 80046ba:	6823      	ldr	r3, [r4, #0]
 80046bc:	4639      	mov	r1, r7
 80046be:	4630      	mov	r0, r6
 80046c0:	eb04 0903 	add.w	r9, r4, r3
 80046c4:	f000 fc5c 	bl	8004f80 <_sbrk_r>
 80046c8:	4581      	cmp	r9, r0
 80046ca:	d142      	bne.n	8004752 <_malloc_r+0xea>
 80046cc:	6821      	ldr	r1, [r4, #0]
 80046ce:	1a6d      	subs	r5, r5, r1
 80046d0:	4629      	mov	r1, r5
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7ff ffa6 	bl	8004624 <sbrk_aligned>
 80046d8:	3001      	adds	r0, #1
 80046da:	d03a      	beq.n	8004752 <_malloc_r+0xea>
 80046dc:	6823      	ldr	r3, [r4, #0]
 80046de:	442b      	add	r3, r5
 80046e0:	6023      	str	r3, [r4, #0]
 80046e2:	f8d8 3000 	ldr.w	r3, [r8]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	bb62      	cbnz	r2, 8004744 <_malloc_r+0xdc>
 80046ea:	f8c8 7000 	str.w	r7, [r8]
 80046ee:	e00f      	b.n	8004710 <_malloc_r+0xa8>
 80046f0:	6822      	ldr	r2, [r4, #0]
 80046f2:	1b52      	subs	r2, r2, r5
 80046f4:	d420      	bmi.n	8004738 <_malloc_r+0xd0>
 80046f6:	2a0b      	cmp	r2, #11
 80046f8:	d917      	bls.n	800472a <_malloc_r+0xc2>
 80046fa:	1961      	adds	r1, r4, r5
 80046fc:	42a3      	cmp	r3, r4
 80046fe:	6025      	str	r5, [r4, #0]
 8004700:	bf18      	it	ne
 8004702:	6059      	strne	r1, [r3, #4]
 8004704:	6863      	ldr	r3, [r4, #4]
 8004706:	bf08      	it	eq
 8004708:	f8c8 1000 	streq.w	r1, [r8]
 800470c:	5162      	str	r2, [r4, r5]
 800470e:	604b      	str	r3, [r1, #4]
 8004710:	4630      	mov	r0, r6
 8004712:	f000 f82f 	bl	8004774 <__malloc_unlock>
 8004716:	f104 000b 	add.w	r0, r4, #11
 800471a:	1d23      	adds	r3, r4, #4
 800471c:	f020 0007 	bic.w	r0, r0, #7
 8004720:	1ac2      	subs	r2, r0, r3
 8004722:	bf1c      	itt	ne
 8004724:	1a1b      	subne	r3, r3, r0
 8004726:	50a3      	strne	r3, [r4, r2]
 8004728:	e7af      	b.n	800468a <_malloc_r+0x22>
 800472a:	6862      	ldr	r2, [r4, #4]
 800472c:	42a3      	cmp	r3, r4
 800472e:	bf0c      	ite	eq
 8004730:	f8c8 2000 	streq.w	r2, [r8]
 8004734:	605a      	strne	r2, [r3, #4]
 8004736:	e7eb      	b.n	8004710 <_malloc_r+0xa8>
 8004738:	4623      	mov	r3, r4
 800473a:	6864      	ldr	r4, [r4, #4]
 800473c:	e7ae      	b.n	800469c <_malloc_r+0x34>
 800473e:	463c      	mov	r4, r7
 8004740:	687f      	ldr	r7, [r7, #4]
 8004742:	e7b6      	b.n	80046b2 <_malloc_r+0x4a>
 8004744:	461a      	mov	r2, r3
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	42a3      	cmp	r3, r4
 800474a:	d1fb      	bne.n	8004744 <_malloc_r+0xdc>
 800474c:	2300      	movs	r3, #0
 800474e:	6053      	str	r3, [r2, #4]
 8004750:	e7de      	b.n	8004710 <_malloc_r+0xa8>
 8004752:	230c      	movs	r3, #12
 8004754:	6033      	str	r3, [r6, #0]
 8004756:	4630      	mov	r0, r6
 8004758:	f000 f80c 	bl	8004774 <__malloc_unlock>
 800475c:	e794      	b.n	8004688 <_malloc_r+0x20>
 800475e:	6005      	str	r5, [r0, #0]
 8004760:	e7d6      	b.n	8004710 <_malloc_r+0xa8>
 8004762:	bf00      	nop
 8004764:	200002a8 	.word	0x200002a8

08004768 <__malloc_lock>:
 8004768:	4801      	ldr	r0, [pc, #4]	@ (8004770 <__malloc_lock+0x8>)
 800476a:	f7ff bf0e 	b.w	800458a <__retarget_lock_acquire_recursive>
 800476e:	bf00      	nop
 8004770:	200002a0 	.word	0x200002a0

08004774 <__malloc_unlock>:
 8004774:	4801      	ldr	r0, [pc, #4]	@ (800477c <__malloc_unlock+0x8>)
 8004776:	f7ff bf09 	b.w	800458c <__retarget_lock_release_recursive>
 800477a:	bf00      	nop
 800477c:	200002a0 	.word	0x200002a0

08004780 <__sfputc_r>:
 8004780:	6893      	ldr	r3, [r2, #8]
 8004782:	3b01      	subs	r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	b410      	push	{r4}
 8004788:	6093      	str	r3, [r2, #8]
 800478a:	da08      	bge.n	800479e <__sfputc_r+0x1e>
 800478c:	6994      	ldr	r4, [r2, #24]
 800478e:	42a3      	cmp	r3, r4
 8004790:	db01      	blt.n	8004796 <__sfputc_r+0x16>
 8004792:	290a      	cmp	r1, #10
 8004794:	d103      	bne.n	800479e <__sfputc_r+0x1e>
 8004796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800479a:	f7ff bde8 	b.w	800436e <__swbuf_r>
 800479e:	6813      	ldr	r3, [r2, #0]
 80047a0:	1c58      	adds	r0, r3, #1
 80047a2:	6010      	str	r0, [r2, #0]
 80047a4:	7019      	strb	r1, [r3, #0]
 80047a6:	4608      	mov	r0, r1
 80047a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <__sfputs_r>:
 80047ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047b0:	4606      	mov	r6, r0
 80047b2:	460f      	mov	r7, r1
 80047b4:	4614      	mov	r4, r2
 80047b6:	18d5      	adds	r5, r2, r3
 80047b8:	42ac      	cmp	r4, r5
 80047ba:	d101      	bne.n	80047c0 <__sfputs_r+0x12>
 80047bc:	2000      	movs	r0, #0
 80047be:	e007      	b.n	80047d0 <__sfputs_r+0x22>
 80047c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c4:	463a      	mov	r2, r7
 80047c6:	4630      	mov	r0, r6
 80047c8:	f7ff ffda 	bl	8004780 <__sfputc_r>
 80047cc:	1c43      	adds	r3, r0, #1
 80047ce:	d1f3      	bne.n	80047b8 <__sfputs_r+0xa>
 80047d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047d4 <_vfiprintf_r>:
 80047d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047d8:	460d      	mov	r5, r1
 80047da:	b09d      	sub	sp, #116	@ 0x74
 80047dc:	4614      	mov	r4, r2
 80047de:	4698      	mov	r8, r3
 80047e0:	4606      	mov	r6, r0
 80047e2:	b118      	cbz	r0, 80047ec <_vfiprintf_r+0x18>
 80047e4:	6a03      	ldr	r3, [r0, #32]
 80047e6:	b90b      	cbnz	r3, 80047ec <_vfiprintf_r+0x18>
 80047e8:	f7ff fcd8 	bl	800419c <__sinit>
 80047ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047ee:	07d9      	lsls	r1, r3, #31
 80047f0:	d405      	bmi.n	80047fe <_vfiprintf_r+0x2a>
 80047f2:	89ab      	ldrh	r3, [r5, #12]
 80047f4:	059a      	lsls	r2, r3, #22
 80047f6:	d402      	bmi.n	80047fe <_vfiprintf_r+0x2a>
 80047f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047fa:	f7ff fec6 	bl	800458a <__retarget_lock_acquire_recursive>
 80047fe:	89ab      	ldrh	r3, [r5, #12]
 8004800:	071b      	lsls	r3, r3, #28
 8004802:	d501      	bpl.n	8004808 <_vfiprintf_r+0x34>
 8004804:	692b      	ldr	r3, [r5, #16]
 8004806:	b99b      	cbnz	r3, 8004830 <_vfiprintf_r+0x5c>
 8004808:	4629      	mov	r1, r5
 800480a:	4630      	mov	r0, r6
 800480c:	f7ff fdee 	bl	80043ec <__swsetup_r>
 8004810:	b170      	cbz	r0, 8004830 <_vfiprintf_r+0x5c>
 8004812:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004814:	07dc      	lsls	r4, r3, #31
 8004816:	d504      	bpl.n	8004822 <_vfiprintf_r+0x4e>
 8004818:	f04f 30ff 	mov.w	r0, #4294967295
 800481c:	b01d      	add	sp, #116	@ 0x74
 800481e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004822:	89ab      	ldrh	r3, [r5, #12]
 8004824:	0598      	lsls	r0, r3, #22
 8004826:	d4f7      	bmi.n	8004818 <_vfiprintf_r+0x44>
 8004828:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800482a:	f7ff feaf 	bl	800458c <__retarget_lock_release_recursive>
 800482e:	e7f3      	b.n	8004818 <_vfiprintf_r+0x44>
 8004830:	2300      	movs	r3, #0
 8004832:	9309      	str	r3, [sp, #36]	@ 0x24
 8004834:	2320      	movs	r3, #32
 8004836:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800483a:	f8cd 800c 	str.w	r8, [sp, #12]
 800483e:	2330      	movs	r3, #48	@ 0x30
 8004840:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80049f0 <_vfiprintf_r+0x21c>
 8004844:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004848:	f04f 0901 	mov.w	r9, #1
 800484c:	4623      	mov	r3, r4
 800484e:	469a      	mov	sl, r3
 8004850:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004854:	b10a      	cbz	r2, 800485a <_vfiprintf_r+0x86>
 8004856:	2a25      	cmp	r2, #37	@ 0x25
 8004858:	d1f9      	bne.n	800484e <_vfiprintf_r+0x7a>
 800485a:	ebba 0b04 	subs.w	fp, sl, r4
 800485e:	d00b      	beq.n	8004878 <_vfiprintf_r+0xa4>
 8004860:	465b      	mov	r3, fp
 8004862:	4622      	mov	r2, r4
 8004864:	4629      	mov	r1, r5
 8004866:	4630      	mov	r0, r6
 8004868:	f7ff ffa1 	bl	80047ae <__sfputs_r>
 800486c:	3001      	adds	r0, #1
 800486e:	f000 80a7 	beq.w	80049c0 <_vfiprintf_r+0x1ec>
 8004872:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004874:	445a      	add	r2, fp
 8004876:	9209      	str	r2, [sp, #36]	@ 0x24
 8004878:	f89a 3000 	ldrb.w	r3, [sl]
 800487c:	2b00      	cmp	r3, #0
 800487e:	f000 809f 	beq.w	80049c0 <_vfiprintf_r+0x1ec>
 8004882:	2300      	movs	r3, #0
 8004884:	f04f 32ff 	mov.w	r2, #4294967295
 8004888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800488c:	f10a 0a01 	add.w	sl, sl, #1
 8004890:	9304      	str	r3, [sp, #16]
 8004892:	9307      	str	r3, [sp, #28]
 8004894:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004898:	931a      	str	r3, [sp, #104]	@ 0x68
 800489a:	4654      	mov	r4, sl
 800489c:	2205      	movs	r2, #5
 800489e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a2:	4853      	ldr	r0, [pc, #332]	@ (80049f0 <_vfiprintf_r+0x21c>)
 80048a4:	f7fb fc9c 	bl	80001e0 <memchr>
 80048a8:	9a04      	ldr	r2, [sp, #16]
 80048aa:	b9d8      	cbnz	r0, 80048e4 <_vfiprintf_r+0x110>
 80048ac:	06d1      	lsls	r1, r2, #27
 80048ae:	bf44      	itt	mi
 80048b0:	2320      	movmi	r3, #32
 80048b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048b6:	0713      	lsls	r3, r2, #28
 80048b8:	bf44      	itt	mi
 80048ba:	232b      	movmi	r3, #43	@ 0x2b
 80048bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048c0:	f89a 3000 	ldrb.w	r3, [sl]
 80048c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80048c6:	d015      	beq.n	80048f4 <_vfiprintf_r+0x120>
 80048c8:	9a07      	ldr	r2, [sp, #28]
 80048ca:	4654      	mov	r4, sl
 80048cc:	2000      	movs	r0, #0
 80048ce:	f04f 0c0a 	mov.w	ip, #10
 80048d2:	4621      	mov	r1, r4
 80048d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048d8:	3b30      	subs	r3, #48	@ 0x30
 80048da:	2b09      	cmp	r3, #9
 80048dc:	d94b      	bls.n	8004976 <_vfiprintf_r+0x1a2>
 80048de:	b1b0      	cbz	r0, 800490e <_vfiprintf_r+0x13a>
 80048e0:	9207      	str	r2, [sp, #28]
 80048e2:	e014      	b.n	800490e <_vfiprintf_r+0x13a>
 80048e4:	eba0 0308 	sub.w	r3, r0, r8
 80048e8:	fa09 f303 	lsl.w	r3, r9, r3
 80048ec:	4313      	orrs	r3, r2
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	46a2      	mov	sl, r4
 80048f2:	e7d2      	b.n	800489a <_vfiprintf_r+0xc6>
 80048f4:	9b03      	ldr	r3, [sp, #12]
 80048f6:	1d19      	adds	r1, r3, #4
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	9103      	str	r1, [sp, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	bfbb      	ittet	lt
 8004900:	425b      	neglt	r3, r3
 8004902:	f042 0202 	orrlt.w	r2, r2, #2
 8004906:	9307      	strge	r3, [sp, #28]
 8004908:	9307      	strlt	r3, [sp, #28]
 800490a:	bfb8      	it	lt
 800490c:	9204      	strlt	r2, [sp, #16]
 800490e:	7823      	ldrb	r3, [r4, #0]
 8004910:	2b2e      	cmp	r3, #46	@ 0x2e
 8004912:	d10a      	bne.n	800492a <_vfiprintf_r+0x156>
 8004914:	7863      	ldrb	r3, [r4, #1]
 8004916:	2b2a      	cmp	r3, #42	@ 0x2a
 8004918:	d132      	bne.n	8004980 <_vfiprintf_r+0x1ac>
 800491a:	9b03      	ldr	r3, [sp, #12]
 800491c:	1d1a      	adds	r2, r3, #4
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	9203      	str	r2, [sp, #12]
 8004922:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004926:	3402      	adds	r4, #2
 8004928:	9305      	str	r3, [sp, #20]
 800492a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004a00 <_vfiprintf_r+0x22c>
 800492e:	7821      	ldrb	r1, [r4, #0]
 8004930:	2203      	movs	r2, #3
 8004932:	4650      	mov	r0, sl
 8004934:	f7fb fc54 	bl	80001e0 <memchr>
 8004938:	b138      	cbz	r0, 800494a <_vfiprintf_r+0x176>
 800493a:	9b04      	ldr	r3, [sp, #16]
 800493c:	eba0 000a 	sub.w	r0, r0, sl
 8004940:	2240      	movs	r2, #64	@ 0x40
 8004942:	4082      	lsls	r2, r0
 8004944:	4313      	orrs	r3, r2
 8004946:	3401      	adds	r4, #1
 8004948:	9304      	str	r3, [sp, #16]
 800494a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800494e:	4829      	ldr	r0, [pc, #164]	@ (80049f4 <_vfiprintf_r+0x220>)
 8004950:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004954:	2206      	movs	r2, #6
 8004956:	f7fb fc43 	bl	80001e0 <memchr>
 800495a:	2800      	cmp	r0, #0
 800495c:	d03f      	beq.n	80049de <_vfiprintf_r+0x20a>
 800495e:	4b26      	ldr	r3, [pc, #152]	@ (80049f8 <_vfiprintf_r+0x224>)
 8004960:	bb1b      	cbnz	r3, 80049aa <_vfiprintf_r+0x1d6>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	3307      	adds	r3, #7
 8004966:	f023 0307 	bic.w	r3, r3, #7
 800496a:	3308      	adds	r3, #8
 800496c:	9303      	str	r3, [sp, #12]
 800496e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004970:	443b      	add	r3, r7
 8004972:	9309      	str	r3, [sp, #36]	@ 0x24
 8004974:	e76a      	b.n	800484c <_vfiprintf_r+0x78>
 8004976:	fb0c 3202 	mla	r2, ip, r2, r3
 800497a:	460c      	mov	r4, r1
 800497c:	2001      	movs	r0, #1
 800497e:	e7a8      	b.n	80048d2 <_vfiprintf_r+0xfe>
 8004980:	2300      	movs	r3, #0
 8004982:	3401      	adds	r4, #1
 8004984:	9305      	str	r3, [sp, #20]
 8004986:	4619      	mov	r1, r3
 8004988:	f04f 0c0a 	mov.w	ip, #10
 800498c:	4620      	mov	r0, r4
 800498e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004992:	3a30      	subs	r2, #48	@ 0x30
 8004994:	2a09      	cmp	r2, #9
 8004996:	d903      	bls.n	80049a0 <_vfiprintf_r+0x1cc>
 8004998:	2b00      	cmp	r3, #0
 800499a:	d0c6      	beq.n	800492a <_vfiprintf_r+0x156>
 800499c:	9105      	str	r1, [sp, #20]
 800499e:	e7c4      	b.n	800492a <_vfiprintf_r+0x156>
 80049a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80049a4:	4604      	mov	r4, r0
 80049a6:	2301      	movs	r3, #1
 80049a8:	e7f0      	b.n	800498c <_vfiprintf_r+0x1b8>
 80049aa:	ab03      	add	r3, sp, #12
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	462a      	mov	r2, r5
 80049b0:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <_vfiprintf_r+0x228>)
 80049b2:	a904      	add	r1, sp, #16
 80049b4:	4630      	mov	r0, r6
 80049b6:	f3af 8000 	nop.w
 80049ba:	4607      	mov	r7, r0
 80049bc:	1c78      	adds	r0, r7, #1
 80049be:	d1d6      	bne.n	800496e <_vfiprintf_r+0x19a>
 80049c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80049c2:	07d9      	lsls	r1, r3, #31
 80049c4:	d405      	bmi.n	80049d2 <_vfiprintf_r+0x1fe>
 80049c6:	89ab      	ldrh	r3, [r5, #12]
 80049c8:	059a      	lsls	r2, r3, #22
 80049ca:	d402      	bmi.n	80049d2 <_vfiprintf_r+0x1fe>
 80049cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80049ce:	f7ff fddd 	bl	800458c <__retarget_lock_release_recursive>
 80049d2:	89ab      	ldrh	r3, [r5, #12]
 80049d4:	065b      	lsls	r3, r3, #25
 80049d6:	f53f af1f 	bmi.w	8004818 <_vfiprintf_r+0x44>
 80049da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049dc:	e71e      	b.n	800481c <_vfiprintf_r+0x48>
 80049de:	ab03      	add	r3, sp, #12
 80049e0:	9300      	str	r3, [sp, #0]
 80049e2:	462a      	mov	r2, r5
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <_vfiprintf_r+0x228>)
 80049e6:	a904      	add	r1, sp, #16
 80049e8:	4630      	mov	r0, r6
 80049ea:	f000 f879 	bl	8004ae0 <_printf_i>
 80049ee:	e7e4      	b.n	80049ba <_vfiprintf_r+0x1e6>
 80049f0:	0800504c 	.word	0x0800504c
 80049f4:	08005056 	.word	0x08005056
 80049f8:	00000000 	.word	0x00000000
 80049fc:	080047af 	.word	0x080047af
 8004a00:	08005052 	.word	0x08005052

08004a04 <_printf_common>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4616      	mov	r6, r2
 8004a0a:	4698      	mov	r8, r3
 8004a0c:	688a      	ldr	r2, [r1, #8]
 8004a0e:	690b      	ldr	r3, [r1, #16]
 8004a10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfb8      	it	lt
 8004a18:	4613      	movlt	r3, r2
 8004a1a:	6033      	str	r3, [r6, #0]
 8004a1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a20:	4607      	mov	r7, r0
 8004a22:	460c      	mov	r4, r1
 8004a24:	b10a      	cbz	r2, 8004a2a <_printf_common+0x26>
 8004a26:	3301      	adds	r3, #1
 8004a28:	6033      	str	r3, [r6, #0]
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	0699      	lsls	r1, r3, #26
 8004a2e:	bf42      	ittt	mi
 8004a30:	6833      	ldrmi	r3, [r6, #0]
 8004a32:	3302      	addmi	r3, #2
 8004a34:	6033      	strmi	r3, [r6, #0]
 8004a36:	6825      	ldr	r5, [r4, #0]
 8004a38:	f015 0506 	ands.w	r5, r5, #6
 8004a3c:	d106      	bne.n	8004a4c <_printf_common+0x48>
 8004a3e:	f104 0a19 	add.w	sl, r4, #25
 8004a42:	68e3      	ldr	r3, [r4, #12]
 8004a44:	6832      	ldr	r2, [r6, #0]
 8004a46:	1a9b      	subs	r3, r3, r2
 8004a48:	42ab      	cmp	r3, r5
 8004a4a:	dc26      	bgt.n	8004a9a <_printf_common+0x96>
 8004a4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a50:	6822      	ldr	r2, [r4, #0]
 8004a52:	3b00      	subs	r3, #0
 8004a54:	bf18      	it	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	0692      	lsls	r2, r2, #26
 8004a5a:	d42b      	bmi.n	8004ab4 <_printf_common+0xb0>
 8004a5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a60:	4641      	mov	r1, r8
 8004a62:	4638      	mov	r0, r7
 8004a64:	47c8      	blx	r9
 8004a66:	3001      	adds	r0, #1
 8004a68:	d01e      	beq.n	8004aa8 <_printf_common+0xa4>
 8004a6a:	6823      	ldr	r3, [r4, #0]
 8004a6c:	6922      	ldr	r2, [r4, #16]
 8004a6e:	f003 0306 	and.w	r3, r3, #6
 8004a72:	2b04      	cmp	r3, #4
 8004a74:	bf02      	ittt	eq
 8004a76:	68e5      	ldreq	r5, [r4, #12]
 8004a78:	6833      	ldreq	r3, [r6, #0]
 8004a7a:	1aed      	subeq	r5, r5, r3
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	bf0c      	ite	eq
 8004a80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a84:	2500      	movne	r5, #0
 8004a86:	4293      	cmp	r3, r2
 8004a88:	bfc4      	itt	gt
 8004a8a:	1a9b      	subgt	r3, r3, r2
 8004a8c:	18ed      	addgt	r5, r5, r3
 8004a8e:	2600      	movs	r6, #0
 8004a90:	341a      	adds	r4, #26
 8004a92:	42b5      	cmp	r5, r6
 8004a94:	d11a      	bne.n	8004acc <_printf_common+0xc8>
 8004a96:	2000      	movs	r0, #0
 8004a98:	e008      	b.n	8004aac <_printf_common+0xa8>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	4652      	mov	r2, sl
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	47c8      	blx	r9
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	d103      	bne.n	8004ab0 <_printf_common+0xac>
 8004aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8004aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ab0:	3501      	adds	r5, #1
 8004ab2:	e7c6      	b.n	8004a42 <_printf_common+0x3e>
 8004ab4:	18e1      	adds	r1, r4, r3
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	2030      	movs	r0, #48	@ 0x30
 8004aba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004abe:	4422      	add	r2, r4
 8004ac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ac8:	3302      	adds	r3, #2
 8004aca:	e7c7      	b.n	8004a5c <_printf_common+0x58>
 8004acc:	2301      	movs	r3, #1
 8004ace:	4622      	mov	r2, r4
 8004ad0:	4641      	mov	r1, r8
 8004ad2:	4638      	mov	r0, r7
 8004ad4:	47c8      	blx	r9
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d0e6      	beq.n	8004aa8 <_printf_common+0xa4>
 8004ada:	3601      	adds	r6, #1
 8004adc:	e7d9      	b.n	8004a92 <_printf_common+0x8e>
	...

08004ae0 <_printf_i>:
 8004ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ae4:	7e0f      	ldrb	r7, [r1, #24]
 8004ae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ae8:	2f78      	cmp	r7, #120	@ 0x78
 8004aea:	4691      	mov	r9, r2
 8004aec:	4680      	mov	r8, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	469a      	mov	sl, r3
 8004af2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004af6:	d807      	bhi.n	8004b08 <_printf_i+0x28>
 8004af8:	2f62      	cmp	r7, #98	@ 0x62
 8004afa:	d80a      	bhi.n	8004b12 <_printf_i+0x32>
 8004afc:	2f00      	cmp	r7, #0
 8004afe:	f000 80d2 	beq.w	8004ca6 <_printf_i+0x1c6>
 8004b02:	2f58      	cmp	r7, #88	@ 0x58
 8004b04:	f000 80b9 	beq.w	8004c7a <_printf_i+0x19a>
 8004b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b10:	e03a      	b.n	8004b88 <_printf_i+0xa8>
 8004b12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b16:	2b15      	cmp	r3, #21
 8004b18:	d8f6      	bhi.n	8004b08 <_printf_i+0x28>
 8004b1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004b20 <_printf_i+0x40>)
 8004b1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b20:	08004b79 	.word	0x08004b79
 8004b24:	08004b8d 	.word	0x08004b8d
 8004b28:	08004b09 	.word	0x08004b09
 8004b2c:	08004b09 	.word	0x08004b09
 8004b30:	08004b09 	.word	0x08004b09
 8004b34:	08004b09 	.word	0x08004b09
 8004b38:	08004b8d 	.word	0x08004b8d
 8004b3c:	08004b09 	.word	0x08004b09
 8004b40:	08004b09 	.word	0x08004b09
 8004b44:	08004b09 	.word	0x08004b09
 8004b48:	08004b09 	.word	0x08004b09
 8004b4c:	08004c8d 	.word	0x08004c8d
 8004b50:	08004bb7 	.word	0x08004bb7
 8004b54:	08004c47 	.word	0x08004c47
 8004b58:	08004b09 	.word	0x08004b09
 8004b5c:	08004b09 	.word	0x08004b09
 8004b60:	08004caf 	.word	0x08004caf
 8004b64:	08004b09 	.word	0x08004b09
 8004b68:	08004bb7 	.word	0x08004bb7
 8004b6c:	08004b09 	.word	0x08004b09
 8004b70:	08004b09 	.word	0x08004b09
 8004b74:	08004c4f 	.word	0x08004c4f
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6032      	str	r2, [r6, #0]
 8004b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e09d      	b.n	8004cc8 <_printf_i+0x1e8>
 8004b8c:	6833      	ldr	r3, [r6, #0]
 8004b8e:	6820      	ldr	r0, [r4, #0]
 8004b90:	1d19      	adds	r1, r3, #4
 8004b92:	6031      	str	r1, [r6, #0]
 8004b94:	0606      	lsls	r6, r0, #24
 8004b96:	d501      	bpl.n	8004b9c <_printf_i+0xbc>
 8004b98:	681d      	ldr	r5, [r3, #0]
 8004b9a:	e003      	b.n	8004ba4 <_printf_i+0xc4>
 8004b9c:	0645      	lsls	r5, r0, #25
 8004b9e:	d5fb      	bpl.n	8004b98 <_printf_i+0xb8>
 8004ba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	da03      	bge.n	8004bb0 <_printf_i+0xd0>
 8004ba8:	232d      	movs	r3, #45	@ 0x2d
 8004baa:	426d      	negs	r5, r5
 8004bac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bb0:	4859      	ldr	r0, [pc, #356]	@ (8004d18 <_printf_i+0x238>)
 8004bb2:	230a      	movs	r3, #10
 8004bb4:	e011      	b.n	8004bda <_printf_i+0xfa>
 8004bb6:	6821      	ldr	r1, [r4, #0]
 8004bb8:	6833      	ldr	r3, [r6, #0]
 8004bba:	0608      	lsls	r0, r1, #24
 8004bbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004bc0:	d402      	bmi.n	8004bc8 <_printf_i+0xe8>
 8004bc2:	0649      	lsls	r1, r1, #25
 8004bc4:	bf48      	it	mi
 8004bc6:	b2ad      	uxthmi	r5, r5
 8004bc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004bca:	4853      	ldr	r0, [pc, #332]	@ (8004d18 <_printf_i+0x238>)
 8004bcc:	6033      	str	r3, [r6, #0]
 8004bce:	bf14      	ite	ne
 8004bd0:	230a      	movne	r3, #10
 8004bd2:	2308      	moveq	r3, #8
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004bda:	6866      	ldr	r6, [r4, #4]
 8004bdc:	60a6      	str	r6, [r4, #8]
 8004bde:	2e00      	cmp	r6, #0
 8004be0:	bfa2      	ittt	ge
 8004be2:	6821      	ldrge	r1, [r4, #0]
 8004be4:	f021 0104 	bicge.w	r1, r1, #4
 8004be8:	6021      	strge	r1, [r4, #0]
 8004bea:	b90d      	cbnz	r5, 8004bf0 <_printf_i+0x110>
 8004bec:	2e00      	cmp	r6, #0
 8004bee:	d04b      	beq.n	8004c88 <_printf_i+0x1a8>
 8004bf0:	4616      	mov	r6, r2
 8004bf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bf6:	fb03 5711 	mls	r7, r3, r1, r5
 8004bfa:	5dc7      	ldrb	r7, [r0, r7]
 8004bfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c00:	462f      	mov	r7, r5
 8004c02:	42bb      	cmp	r3, r7
 8004c04:	460d      	mov	r5, r1
 8004c06:	d9f4      	bls.n	8004bf2 <_printf_i+0x112>
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d10b      	bne.n	8004c24 <_printf_i+0x144>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	07df      	lsls	r7, r3, #31
 8004c10:	d508      	bpl.n	8004c24 <_printf_i+0x144>
 8004c12:	6923      	ldr	r3, [r4, #16]
 8004c14:	6861      	ldr	r1, [r4, #4]
 8004c16:	4299      	cmp	r1, r3
 8004c18:	bfde      	ittt	le
 8004c1a:	2330      	movle	r3, #48	@ 0x30
 8004c1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c24:	1b92      	subs	r2, r2, r6
 8004c26:	6122      	str	r2, [r4, #16]
 8004c28:	f8cd a000 	str.w	sl, [sp]
 8004c2c:	464b      	mov	r3, r9
 8004c2e:	aa03      	add	r2, sp, #12
 8004c30:	4621      	mov	r1, r4
 8004c32:	4640      	mov	r0, r8
 8004c34:	f7ff fee6 	bl	8004a04 <_printf_common>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d14a      	bne.n	8004cd2 <_printf_i+0x1f2>
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	b004      	add	sp, #16
 8004c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c46:	6823      	ldr	r3, [r4, #0]
 8004c48:	f043 0320 	orr.w	r3, r3, #32
 8004c4c:	6023      	str	r3, [r4, #0]
 8004c4e:	4833      	ldr	r0, [pc, #204]	@ (8004d1c <_printf_i+0x23c>)
 8004c50:	2778      	movs	r7, #120	@ 0x78
 8004c52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	6831      	ldr	r1, [r6, #0]
 8004c5a:	061f      	lsls	r7, r3, #24
 8004c5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c60:	d402      	bmi.n	8004c68 <_printf_i+0x188>
 8004c62:	065f      	lsls	r7, r3, #25
 8004c64:	bf48      	it	mi
 8004c66:	b2ad      	uxthmi	r5, r5
 8004c68:	6031      	str	r1, [r6, #0]
 8004c6a:	07d9      	lsls	r1, r3, #31
 8004c6c:	bf44      	itt	mi
 8004c6e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c72:	6023      	strmi	r3, [r4, #0]
 8004c74:	b11d      	cbz	r5, 8004c7e <_printf_i+0x19e>
 8004c76:	2310      	movs	r3, #16
 8004c78:	e7ac      	b.n	8004bd4 <_printf_i+0xf4>
 8004c7a:	4827      	ldr	r0, [pc, #156]	@ (8004d18 <_printf_i+0x238>)
 8004c7c:	e7e9      	b.n	8004c52 <_printf_i+0x172>
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	f023 0320 	bic.w	r3, r3, #32
 8004c84:	6023      	str	r3, [r4, #0]
 8004c86:	e7f6      	b.n	8004c76 <_printf_i+0x196>
 8004c88:	4616      	mov	r6, r2
 8004c8a:	e7bd      	b.n	8004c08 <_printf_i+0x128>
 8004c8c:	6833      	ldr	r3, [r6, #0]
 8004c8e:	6825      	ldr	r5, [r4, #0]
 8004c90:	6961      	ldr	r1, [r4, #20]
 8004c92:	1d18      	adds	r0, r3, #4
 8004c94:	6030      	str	r0, [r6, #0]
 8004c96:	062e      	lsls	r6, r5, #24
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	d501      	bpl.n	8004ca0 <_printf_i+0x1c0>
 8004c9c:	6019      	str	r1, [r3, #0]
 8004c9e:	e002      	b.n	8004ca6 <_printf_i+0x1c6>
 8004ca0:	0668      	lsls	r0, r5, #25
 8004ca2:	d5fb      	bpl.n	8004c9c <_printf_i+0x1bc>
 8004ca4:	8019      	strh	r1, [r3, #0]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6123      	str	r3, [r4, #16]
 8004caa:	4616      	mov	r6, r2
 8004cac:	e7bc      	b.n	8004c28 <_printf_i+0x148>
 8004cae:	6833      	ldr	r3, [r6, #0]
 8004cb0:	1d1a      	adds	r2, r3, #4
 8004cb2:	6032      	str	r2, [r6, #0]
 8004cb4:	681e      	ldr	r6, [r3, #0]
 8004cb6:	6862      	ldr	r2, [r4, #4]
 8004cb8:	2100      	movs	r1, #0
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f7fb fa90 	bl	80001e0 <memchr>
 8004cc0:	b108      	cbz	r0, 8004cc6 <_printf_i+0x1e6>
 8004cc2:	1b80      	subs	r0, r0, r6
 8004cc4:	6060      	str	r0, [r4, #4]
 8004cc6:	6863      	ldr	r3, [r4, #4]
 8004cc8:	6123      	str	r3, [r4, #16]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cd0:	e7aa      	b.n	8004c28 <_printf_i+0x148>
 8004cd2:	6923      	ldr	r3, [r4, #16]
 8004cd4:	4632      	mov	r2, r6
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	4640      	mov	r0, r8
 8004cda:	47d0      	blx	sl
 8004cdc:	3001      	adds	r0, #1
 8004cde:	d0ad      	beq.n	8004c3c <_printf_i+0x15c>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	079b      	lsls	r3, r3, #30
 8004ce4:	d413      	bmi.n	8004d0e <_printf_i+0x22e>
 8004ce6:	68e0      	ldr	r0, [r4, #12]
 8004ce8:	9b03      	ldr	r3, [sp, #12]
 8004cea:	4298      	cmp	r0, r3
 8004cec:	bfb8      	it	lt
 8004cee:	4618      	movlt	r0, r3
 8004cf0:	e7a6      	b.n	8004c40 <_printf_i+0x160>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	4649      	mov	r1, r9
 8004cf8:	4640      	mov	r0, r8
 8004cfa:	47d0      	blx	sl
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	d09d      	beq.n	8004c3c <_printf_i+0x15c>
 8004d00:	3501      	adds	r5, #1
 8004d02:	68e3      	ldr	r3, [r4, #12]
 8004d04:	9903      	ldr	r1, [sp, #12]
 8004d06:	1a5b      	subs	r3, r3, r1
 8004d08:	42ab      	cmp	r3, r5
 8004d0a:	dcf2      	bgt.n	8004cf2 <_printf_i+0x212>
 8004d0c:	e7eb      	b.n	8004ce6 <_printf_i+0x206>
 8004d0e:	2500      	movs	r5, #0
 8004d10:	f104 0619 	add.w	r6, r4, #25
 8004d14:	e7f5      	b.n	8004d02 <_printf_i+0x222>
 8004d16:	bf00      	nop
 8004d18:	0800505d 	.word	0x0800505d
 8004d1c:	0800506e 	.word	0x0800506e

08004d20 <__sflush_r>:
 8004d20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d28:	0716      	lsls	r6, r2, #28
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	d454      	bmi.n	8004dda <__sflush_r+0xba>
 8004d30:	684b      	ldr	r3, [r1, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	dc02      	bgt.n	8004d3c <__sflush_r+0x1c>
 8004d36:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	dd48      	ble.n	8004dce <__sflush_r+0xae>
 8004d3c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d3e:	2e00      	cmp	r6, #0
 8004d40:	d045      	beq.n	8004dce <__sflush_r+0xae>
 8004d42:	2300      	movs	r3, #0
 8004d44:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004d48:	682f      	ldr	r7, [r5, #0]
 8004d4a:	6a21      	ldr	r1, [r4, #32]
 8004d4c:	602b      	str	r3, [r5, #0]
 8004d4e:	d030      	beq.n	8004db2 <__sflush_r+0x92>
 8004d50:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	0759      	lsls	r1, r3, #29
 8004d56:	d505      	bpl.n	8004d64 <__sflush_r+0x44>
 8004d58:	6863      	ldr	r3, [r4, #4]
 8004d5a:	1ad2      	subs	r2, r2, r3
 8004d5c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004d5e:	b10b      	cbz	r3, 8004d64 <__sflush_r+0x44>
 8004d60:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004d62:	1ad2      	subs	r2, r2, r3
 8004d64:	2300      	movs	r3, #0
 8004d66:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004d68:	6a21      	ldr	r1, [r4, #32]
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b0      	blx	r6
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	89a3      	ldrh	r3, [r4, #12]
 8004d72:	d106      	bne.n	8004d82 <__sflush_r+0x62>
 8004d74:	6829      	ldr	r1, [r5, #0]
 8004d76:	291d      	cmp	r1, #29
 8004d78:	d82b      	bhi.n	8004dd2 <__sflush_r+0xb2>
 8004d7a:	4a2a      	ldr	r2, [pc, #168]	@ (8004e24 <__sflush_r+0x104>)
 8004d7c:	410a      	asrs	r2, r1
 8004d7e:	07d6      	lsls	r6, r2, #31
 8004d80:	d427      	bmi.n	8004dd2 <__sflush_r+0xb2>
 8004d82:	2200      	movs	r2, #0
 8004d84:	6062      	str	r2, [r4, #4]
 8004d86:	04d9      	lsls	r1, r3, #19
 8004d88:	6922      	ldr	r2, [r4, #16]
 8004d8a:	6022      	str	r2, [r4, #0]
 8004d8c:	d504      	bpl.n	8004d98 <__sflush_r+0x78>
 8004d8e:	1c42      	adds	r2, r0, #1
 8004d90:	d101      	bne.n	8004d96 <__sflush_r+0x76>
 8004d92:	682b      	ldr	r3, [r5, #0]
 8004d94:	b903      	cbnz	r3, 8004d98 <__sflush_r+0x78>
 8004d96:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d9a:	602f      	str	r7, [r5, #0]
 8004d9c:	b1b9      	cbz	r1, 8004dce <__sflush_r+0xae>
 8004d9e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004da2:	4299      	cmp	r1, r3
 8004da4:	d002      	beq.n	8004dac <__sflush_r+0x8c>
 8004da6:	4628      	mov	r0, r5
 8004da8:	f7ff fbf2 	bl	8004590 <_free_r>
 8004dac:	2300      	movs	r3, #0
 8004dae:	6363      	str	r3, [r4, #52]	@ 0x34
 8004db0:	e00d      	b.n	8004dce <__sflush_r+0xae>
 8004db2:	2301      	movs	r3, #1
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b0      	blx	r6
 8004db8:	4602      	mov	r2, r0
 8004dba:	1c50      	adds	r0, r2, #1
 8004dbc:	d1c9      	bne.n	8004d52 <__sflush_r+0x32>
 8004dbe:	682b      	ldr	r3, [r5, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0c6      	beq.n	8004d52 <__sflush_r+0x32>
 8004dc4:	2b1d      	cmp	r3, #29
 8004dc6:	d001      	beq.n	8004dcc <__sflush_r+0xac>
 8004dc8:	2b16      	cmp	r3, #22
 8004dca:	d11e      	bne.n	8004e0a <__sflush_r+0xea>
 8004dcc:	602f      	str	r7, [r5, #0]
 8004dce:	2000      	movs	r0, #0
 8004dd0:	e022      	b.n	8004e18 <__sflush_r+0xf8>
 8004dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dd6:	b21b      	sxth	r3, r3
 8004dd8:	e01b      	b.n	8004e12 <__sflush_r+0xf2>
 8004dda:	690f      	ldr	r7, [r1, #16]
 8004ddc:	2f00      	cmp	r7, #0
 8004dde:	d0f6      	beq.n	8004dce <__sflush_r+0xae>
 8004de0:	0793      	lsls	r3, r2, #30
 8004de2:	680e      	ldr	r6, [r1, #0]
 8004de4:	bf08      	it	eq
 8004de6:	694b      	ldreq	r3, [r1, #20]
 8004de8:	600f      	str	r7, [r1, #0]
 8004dea:	bf18      	it	ne
 8004dec:	2300      	movne	r3, #0
 8004dee:	eba6 0807 	sub.w	r8, r6, r7
 8004df2:	608b      	str	r3, [r1, #8]
 8004df4:	f1b8 0f00 	cmp.w	r8, #0
 8004df8:	dde9      	ble.n	8004dce <__sflush_r+0xae>
 8004dfa:	6a21      	ldr	r1, [r4, #32]
 8004dfc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004dfe:	4643      	mov	r3, r8
 8004e00:	463a      	mov	r2, r7
 8004e02:	4628      	mov	r0, r5
 8004e04:	47b0      	blx	r6
 8004e06:	2800      	cmp	r0, #0
 8004e08:	dc08      	bgt.n	8004e1c <__sflush_r+0xfc>
 8004e0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e12:	81a3      	strh	r3, [r4, #12]
 8004e14:	f04f 30ff 	mov.w	r0, #4294967295
 8004e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e1c:	4407      	add	r7, r0
 8004e1e:	eba8 0800 	sub.w	r8, r8, r0
 8004e22:	e7e7      	b.n	8004df4 <__sflush_r+0xd4>
 8004e24:	dfbffffe 	.word	0xdfbffffe

08004e28 <_fflush_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	690b      	ldr	r3, [r1, #16]
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	b913      	cbnz	r3, 8004e38 <_fflush_r+0x10>
 8004e32:	2500      	movs	r5, #0
 8004e34:	4628      	mov	r0, r5
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	b118      	cbz	r0, 8004e42 <_fflush_r+0x1a>
 8004e3a:	6a03      	ldr	r3, [r0, #32]
 8004e3c:	b90b      	cbnz	r3, 8004e42 <_fflush_r+0x1a>
 8004e3e:	f7ff f9ad 	bl	800419c <__sinit>
 8004e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f3      	beq.n	8004e32 <_fflush_r+0xa>
 8004e4a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004e4c:	07d0      	lsls	r0, r2, #31
 8004e4e:	d404      	bmi.n	8004e5a <_fflush_r+0x32>
 8004e50:	0599      	lsls	r1, r3, #22
 8004e52:	d402      	bmi.n	8004e5a <_fflush_r+0x32>
 8004e54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e56:	f7ff fb98 	bl	800458a <__retarget_lock_acquire_recursive>
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	f7ff ff5f 	bl	8004d20 <__sflush_r>
 8004e62:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e64:	07da      	lsls	r2, r3, #31
 8004e66:	4605      	mov	r5, r0
 8004e68:	d4e4      	bmi.n	8004e34 <_fflush_r+0xc>
 8004e6a:	89a3      	ldrh	r3, [r4, #12]
 8004e6c:	059b      	lsls	r3, r3, #22
 8004e6e:	d4e1      	bmi.n	8004e34 <_fflush_r+0xc>
 8004e70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e72:	f7ff fb8b 	bl	800458c <__retarget_lock_release_recursive>
 8004e76:	e7dd      	b.n	8004e34 <_fflush_r+0xc>

08004e78 <__swhatbuf_r>:
 8004e78:	b570      	push	{r4, r5, r6, lr}
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e80:	2900      	cmp	r1, #0
 8004e82:	b096      	sub	sp, #88	@ 0x58
 8004e84:	4615      	mov	r5, r2
 8004e86:	461e      	mov	r6, r3
 8004e88:	da0d      	bge.n	8004ea6 <__swhatbuf_r+0x2e>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004e90:	f04f 0100 	mov.w	r1, #0
 8004e94:	bf14      	ite	ne
 8004e96:	2340      	movne	r3, #64	@ 0x40
 8004e98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004e9c:	2000      	movs	r0, #0
 8004e9e:	6031      	str	r1, [r6, #0]
 8004ea0:	602b      	str	r3, [r5, #0]
 8004ea2:	b016      	add	sp, #88	@ 0x58
 8004ea4:	bd70      	pop	{r4, r5, r6, pc}
 8004ea6:	466a      	mov	r2, sp
 8004ea8:	f000 f848 	bl	8004f3c <_fstat_r>
 8004eac:	2800      	cmp	r0, #0
 8004eae:	dbec      	blt.n	8004e8a <__swhatbuf_r+0x12>
 8004eb0:	9901      	ldr	r1, [sp, #4]
 8004eb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004eb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004eba:	4259      	negs	r1, r3
 8004ebc:	4159      	adcs	r1, r3
 8004ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ec2:	e7eb      	b.n	8004e9c <__swhatbuf_r+0x24>

08004ec4 <__smakebuf_r>:
 8004ec4:	898b      	ldrh	r3, [r1, #12]
 8004ec6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec8:	079d      	lsls	r5, r3, #30
 8004eca:	4606      	mov	r6, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	d507      	bpl.n	8004ee0 <__smakebuf_r+0x1c>
 8004ed0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	6123      	str	r3, [r4, #16]
 8004ed8:	2301      	movs	r3, #1
 8004eda:	6163      	str	r3, [r4, #20]
 8004edc:	b003      	add	sp, #12
 8004ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee0:	ab01      	add	r3, sp, #4
 8004ee2:	466a      	mov	r2, sp
 8004ee4:	f7ff ffc8 	bl	8004e78 <__swhatbuf_r>
 8004ee8:	9f00      	ldr	r7, [sp, #0]
 8004eea:	4605      	mov	r5, r0
 8004eec:	4639      	mov	r1, r7
 8004eee:	4630      	mov	r0, r6
 8004ef0:	f7ff fbba 	bl	8004668 <_malloc_r>
 8004ef4:	b948      	cbnz	r0, 8004f0a <__smakebuf_r+0x46>
 8004ef6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efa:	059a      	lsls	r2, r3, #22
 8004efc:	d4ee      	bmi.n	8004edc <__smakebuf_r+0x18>
 8004efe:	f023 0303 	bic.w	r3, r3, #3
 8004f02:	f043 0302 	orr.w	r3, r3, #2
 8004f06:	81a3      	strh	r3, [r4, #12]
 8004f08:	e7e2      	b.n	8004ed0 <__smakebuf_r+0xc>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	6020      	str	r0, [r4, #0]
 8004f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	9b01      	ldr	r3, [sp, #4]
 8004f16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f1a:	b15b      	cbz	r3, 8004f34 <__smakebuf_r+0x70>
 8004f1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 f81d 	bl	8004f60 <_isatty_r>
 8004f26:	b128      	cbz	r0, 8004f34 <__smakebuf_r+0x70>
 8004f28:	89a3      	ldrh	r3, [r4, #12]
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	81a3      	strh	r3, [r4, #12]
 8004f34:	89a3      	ldrh	r3, [r4, #12]
 8004f36:	431d      	orrs	r5, r3
 8004f38:	81a5      	strh	r5, [r4, #12]
 8004f3a:	e7cf      	b.n	8004edc <__smakebuf_r+0x18>

08004f3c <_fstat_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4d07      	ldr	r5, [pc, #28]	@ (8004f5c <_fstat_r+0x20>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4604      	mov	r4, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	602b      	str	r3, [r5, #0]
 8004f4a:	f7fc f823 	bl	8000f94 <_fstat>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	d102      	bne.n	8004f58 <_fstat_r+0x1c>
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	b103      	cbz	r3, 8004f58 <_fstat_r+0x1c>
 8004f56:	6023      	str	r3, [r4, #0]
 8004f58:	bd38      	pop	{r3, r4, r5, pc}
 8004f5a:	bf00      	nop
 8004f5c:	2000029c 	.word	0x2000029c

08004f60 <_isatty_r>:
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4d06      	ldr	r5, [pc, #24]	@ (8004f7c <_isatty_r+0x1c>)
 8004f64:	2300      	movs	r3, #0
 8004f66:	4604      	mov	r4, r0
 8004f68:	4608      	mov	r0, r1
 8004f6a:	602b      	str	r3, [r5, #0]
 8004f6c:	f7fc f822 	bl	8000fb4 <_isatty>
 8004f70:	1c43      	adds	r3, r0, #1
 8004f72:	d102      	bne.n	8004f7a <_isatty_r+0x1a>
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	b103      	cbz	r3, 8004f7a <_isatty_r+0x1a>
 8004f78:	6023      	str	r3, [r4, #0]
 8004f7a:	bd38      	pop	{r3, r4, r5, pc}
 8004f7c:	2000029c 	.word	0x2000029c

08004f80 <_sbrk_r>:
 8004f80:	b538      	push	{r3, r4, r5, lr}
 8004f82:	4d06      	ldr	r5, [pc, #24]	@ (8004f9c <_sbrk_r+0x1c>)
 8004f84:	2300      	movs	r3, #0
 8004f86:	4604      	mov	r4, r0
 8004f88:	4608      	mov	r0, r1
 8004f8a:	602b      	str	r3, [r5, #0]
 8004f8c:	f7fc f82a 	bl	8000fe4 <_sbrk>
 8004f90:	1c43      	adds	r3, r0, #1
 8004f92:	d102      	bne.n	8004f9a <_sbrk_r+0x1a>
 8004f94:	682b      	ldr	r3, [r5, #0]
 8004f96:	b103      	cbz	r3, 8004f9a <_sbrk_r+0x1a>
 8004f98:	6023      	str	r3, [r4, #0]
 8004f9a:	bd38      	pop	{r3, r4, r5, pc}
 8004f9c:	2000029c 	.word	0x2000029c

08004fa0 <_init>:
 8004fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fa2:	bf00      	nop
 8004fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa6:	bc08      	pop	{r3}
 8004fa8:	469e      	mov	lr, r3
 8004faa:	4770      	bx	lr

08004fac <_fini>:
 8004fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fae:	bf00      	nop
 8004fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb2:	bc08      	pop	{r3}
 8004fb4:	469e      	mov	lr, r3
 8004fb6:	4770      	bx	lr

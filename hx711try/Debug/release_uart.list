
release_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08000f74  08000f74  00001f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fd8  08000fd8  00002054  2**0
                  CONTENTS
  4 .ARM          00000008  08000fd8  08000fd8  00001fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000fe0  08000fe0  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fe0  08000fe0  00001fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fe4  08000fe4  00001fe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08000fe8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000036c  20000054  0800103c  00002054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  0800103c  000023c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000aa2  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002aa  00000000  00000000  00002b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  00002dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000087  00000000  00000000  00002e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001823a  00000000  00000000  00002f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a3d  00000000  00000000  0001b141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086881  00000000  00000000  0001bb7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a23ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000744  00000000  00000000  000a2444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000a2b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f5c 	.word	0x08000f5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08000f5c 	.word	0x08000f5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <USART2_print>:
static BOOL Command_Received;
static char *P_Loc_In_Rx_Buffer = A_Rx_Buffer;
static char * const P_End_Of_Rx_Buffer = A_Rx_Buffer + USART2_SIZE_OF_RX_BUFFER - 1;

void USART2_print(const char *p_data)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
    while(*p_data != '\0')
 80002c4:	e00d      	b.n	80002e2 <USART2_print+0x26>
    {
        USART2->TDR = *p_data;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	781a      	ldrb	r2, [r3, #0]
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <USART2_print+0x3c>)
 80002cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_data++;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	3301      	adds	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));  // Wait until TXE is set
 80002d4:	bf00      	nop
 80002d6:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <USART2_print+0x3c>)
 80002d8:	69db      	ldr	r3, [r3, #28]
 80002da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <USART2_print+0x1a>
    while(*p_data != '\0')
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d1ed      	bne.n	80002c6 <USART2_print+0xa>
    }
}
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	40004400 	.word	0x40004400

080002fc <print>:

void print(char *p_format, ...)
{
 80002fc:	b40f      	push	{r0, r1, r2, r3}
 80002fe:	b580      	push	{r7, lr}
 8000300:	b082      	sub	sp, #8
 8000302:	af00      	add	r7, sp, #0
    va_list p_variables;
    va_start(p_variables, p_format);
 8000304:	f107 0314 	add.w	r3, r7, #20
 8000308:	607b      	str	r3, [r7, #4]
    vsprintf(A_Tx_Buffer, p_format, p_variables);
 800030a:	687a      	ldr	r2, [r7, #4]
 800030c:	6939      	ldr	r1, [r7, #16]
 800030e:	4806      	ldr	r0, [pc, #24]	@ (8000328 <print+0x2c>)
 8000310:	f000 f99a 	bl	8000648 <vsiprintf>
    USART2_print(A_Tx_Buffer);
 8000314:	4804      	ldr	r0, [pc, #16]	@ (8000328 <print+0x2c>)
 8000316:	f7ff ffd1 	bl	80002bc <USART2_print>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000324:	b004      	add	sp, #16
 8000326:	4770      	bx	lr
 8000328:	20000170 	.word	0x20000170

0800032c <USART2_init>:
{
    strcpy(p_command, A_Rx_Buffer);
}

void USART2_init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (for PA2/PA3)
    RCC->AHBENR |= (1 << 17);
 8000330:	4b1b      	ldr	r3, [pc, #108]	@ (80003a0 <USART2_init+0x74>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a1a      	ldr	r2, [pc, #104]	@ (80003a0 <USART2_init+0x74>)
 8000336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800033a:	6153      	str	r3, [r2, #20]
    // Enable USART2 clock
    RCC->APB1ENR |= (1 << 17);
 800033c:	4b18      	ldr	r3, [pc, #96]	@ (80003a0 <USART2_init+0x74>)
 800033e:	69db      	ldr	r3, [r3, #28]
 8000340:	4a17      	ldr	r2, [pc, #92]	@ (80003a0 <USART2_init+0x74>)
 8000342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000346:	61d3      	str	r3, [r2, #28]
    // Configure PA2 (TX) and PA3 (RX) for Alternate Function mode
    GPIOA->MODER &= ~((3 << (2*2)) | (3 << (3*2)));
 8000348:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000352:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8000356:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |=  ((2 << (2*2)) | (2 << (3*2))); // AF mode
 8000358:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000362:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000366:	6013      	str	r3, [r2, #0]
    // Select AF7 for USART2 on PA2 and PA3
    GPIOA->AFR[0] &= ~((0xF << (2*4)) | (0xF << (3*4)));
 8000368:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800036c:	6a1b      	ldr	r3, [r3, #32]
 800036e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000372:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8000376:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |=  ((7 << (2*4)) | (7 << (3*4)));
 8000378:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800037c:	6a1b      	ldr	r3, [r3, #32]
 800037e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000382:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000386:	6213      	str	r3, [r2, #32]
    // Set baud rate to 9600 (8MHz / 9600 ≈ 833)
    USART2->BRR = 833;
 8000388:	4b06      	ldr	r3, [pc, #24]	@ (80003a4 <USART2_init+0x78>)
 800038a:	f240 3241 	movw	r2, #833	@ 0x341
 800038e:	60da      	str	r2, [r3, #12]
    // Enable USART2: UE, RE, TE, and RXNE interrupt
    USART2->CR1 = (1 << 0)   // UE: USART Enable
 8000390:	4b04      	ldr	r3, [pc, #16]	@ (80003a4 <USART2_init+0x78>)
 8000392:	222d      	movs	r2, #45	@ 0x2d
 8000394:	601a      	str	r2, [r3, #0]
                | (1 << 2)   // RE: Receiver Enable
                | (1 << 3)   // TE: Transmitter Enable
                | (1 << 5);  // RXNEIE: RX interrupt enable
    NVIC_EnableIRQ(USART2_IRQn);
 8000396:	2026      	movs	r0, #38	@ 0x26
 8000398:	f7ff ff72 	bl	8000280 <__NVIC_EnableIRQ>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40004400 	.word	0x40004400

080003a8 <USART2_EXTI26_IRQHandler>:

// Use the same name as in the startup file
void USART2_EXTI26_IRQHandler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
    if(USART2->ISR & (1 << 5))  // Check RXNE flag
 80003ae:	4b16      	ldr	r3, [pc, #88]	@ (8000408 <USART2_EXTI26_IRQHandler+0x60>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	f003 0320 	and.w	r3, r3, #32
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d01f      	beq.n	80003fa <USART2_EXTI26_IRQHandler+0x52>
    {
        char rx_byte = USART2->RDR; // Reading clears RXNE flag
 80003ba:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <USART2_EXTI26_IRQHandler+0x60>)
 80003bc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003be:	b29b      	uxth	r3, r3
 80003c0:	71fb      	strb	r3, [r7, #7]
        if(rx_byte == '\n')
 80003c2:	79fb      	ldrb	r3, [r7, #7]
 80003c4:	2b0a      	cmp	r3, #10
 80003c6:	d10a      	bne.n	80003de <USART2_EXTI26_IRQHandler+0x36>
        {
            Command_Received = TRUE;
 80003c8:	4b10      	ldr	r3, [pc, #64]	@ (800040c <USART2_EXTI26_IRQHandler+0x64>)
 80003ca:	2201      	movs	r2, #1
 80003cc:	701a      	strb	r2, [r3, #0]
            *P_Loc_In_Rx_Buffer = '\0';
 80003ce:	4b10      	ldr	r3, [pc, #64]	@ (8000410 <USART2_EXTI26_IRQHandler+0x68>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2200      	movs	r2, #0
 80003d4:	701a      	strb	r2, [r3, #0]
            P_Loc_In_Rx_Buffer = A_Rx_Buffer;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <USART2_EXTI26_IRQHandler+0x68>)
 80003d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000414 <USART2_EXTI26_IRQHandler+0x6c>)
 80003da:	601a      	str	r2, [r3, #0]
            {
                P_Loc_In_Rx_Buffer++;
            }
        }
    }
}
 80003dc:	e00d      	b.n	80003fa <USART2_EXTI26_IRQHandler+0x52>
            *P_Loc_In_Rx_Buffer = rx_byte;
 80003de:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <USART2_EXTI26_IRQHandler+0x68>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	79fa      	ldrb	r2, [r7, #7]
 80003e4:	701a      	strb	r2, [r3, #0]
            if(P_Loc_In_Rx_Buffer < P_End_Of_Rx_Buffer)
 80003e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000410 <USART2_EXTI26_IRQHandler+0x68>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000418 <USART2_EXTI26_IRQHandler+0x70>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d204      	bcs.n	80003fa <USART2_EXTI26_IRQHandler+0x52>
                P_Loc_In_Rx_Buffer++;
 80003f0:	4b07      	ldr	r3, [pc, #28]	@ (8000410 <USART2_EXTI26_IRQHandler+0x68>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	4a06      	ldr	r2, [pc, #24]	@ (8000410 <USART2_EXTI26_IRQHandler+0x68>)
 80003f8:	6013      	str	r3, [r2, #0]
}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40004400 	.word	0x40004400
 800040c:	20000270 	.word	0x20000270
 8000410:	20000000 	.word	0x20000000
 8000414:	20000070 	.word	0x20000070
 8000418:	2000016f 	.word	0x2000016f

0800041c <TIM2_IRQHandler>:

/* =================== Timer2 Code =================== */
static BOOL Expired = FALSE;

void TIM2_IRQHandler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
    // Clear update interrupt flag (bit 0)
    TIM2->SR &= ~(1 << 0);
 8000420:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000424:	691b      	ldr	r3, [r3, #16]
 8000426:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800042a:	f023 0301 	bic.w	r3, r3, #1
 800042e:	6113      	str	r3, [r2, #16]
    Expired = TRUE;
 8000430:	4b03      	ldr	r3, [pc, #12]	@ (8000440 <TIM2_IRQHandler+0x24>)
 8000432:	2201      	movs	r2, #1
 8000434:	701a      	strb	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	20000271 	.word	0x20000271

08000444 <TIMER2_expired>:

BOOL TIMER2_expired(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
    if(Expired)
 8000448:	4b07      	ldr	r3, [pc, #28]	@ (8000468 <TIMER2_expired+0x24>)
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2b00      	cmp	r3, #0
 800044e:	d004      	beq.n	800045a <TIMER2_expired+0x16>
    {
        Expired = FALSE;
 8000450:	4b05      	ldr	r3, [pc, #20]	@ (8000468 <TIMER2_expired+0x24>)
 8000452:	2200      	movs	r2, #0
 8000454:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8000456:	2301      	movs	r3, #1
 8000458:	e000      	b.n	800045c <TIMER2_expired+0x18>
    }
    else
    {
        return FALSE;
 800045a:	2300      	movs	r3, #0
    }
}
 800045c:	4618      	mov	r0, r3
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	20000271 	.word	0x20000271

0800046c <TIMER2_init>:

void TIMER2_init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
    // Enable Timer2 clock (bit 0 in APB1ENR)
    RCC->APB1ENR |= (1 << 0);
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <TIMER2_init+0x44>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <TIMER2_init+0x44>)
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	61d3      	str	r3, [r2, #28]
    // Set ARR for 1-second interval at 8MHz: ARR = 8000000
    TIM2->ARR = 8000000;
 800047c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000480:	4a0c      	ldr	r2, [pc, #48]	@ (80004b4 <TIMER2_init+0x48>)
 8000482:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Enable update interrupt
    TIM2->DIER |= (1 << 0);
 8000484:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000488:	68db      	ldr	r3, [r3, #12]
 800048a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	60d3      	str	r3, [r2, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8000494:	201c      	movs	r0, #28
 8000496:	f7ff fef3 	bl	8000280 <__NVIC_EnableIRQ>
    // Start Timer2 (enable counter)
    TIM2->CR1 |= (1 << 0);
 800049a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6013      	str	r3, [r2, #0]
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000
 80004b4:	007a1200 	.word	0x007a1200

080004b8 <hx711_gpio_init>:
{
    while(count--);
}

void hx711_gpio_init(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
    // Enable GPIOB clock (bit 18 in AHBENR)
    RCC->AHBENR |= (1 << 18);
 80004bc:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <hx711_gpio_init+0x40>)
 80004be:	695b      	ldr	r3, [r3, #20]
 80004c0:	4a0d      	ldr	r2, [pc, #52]	@ (80004f8 <hx711_gpio_init+0x40>)
 80004c2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80004c6:	6153      	str	r3, [r2, #20]
    // Configure PB0 as output (for PD_SCK)
    GPIOB->MODER &= ~(3 << (0*2));
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <hx711_gpio_init+0x44>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	@ (80004fc <hx711_gpio_init+0x44>)
 80004ce:	f023 0303 	bic.w	r3, r3, #3
 80004d2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (0*2));
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <hx711_gpio_init+0x44>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a08      	ldr	r2, [pc, #32]	@ (80004fc <hx711_gpio_init+0x44>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]
    // Configure PB1 as input (for DOUT)
    GPIOB->MODER &= ~(3 << (1*2));
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <hx711_gpio_init+0x44>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <hx711_gpio_init+0x44>)
 80004e6:	f023 030c 	bic.w	r3, r3, #12
 80004ea:	6013      	str	r3, [r2, #0]
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	48000400 	.word	0x48000400

08000500 <HX711_Read>:

unsigned long HX711_Read(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
    unsigned long count = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
    uint8_t i;

    // Wait until DOUT goes LOW (data ready)
    while((GPIOB->IDR & HX711_DOUT_PIN) != 0);
 800050a:	bf00      	nop
 800050c:	4b1e      	ldr	r3, [pc, #120]	@ (8000588 <HX711_Read+0x88>)
 800050e:	691b      	ldr	r3, [r3, #16]
 8000510:	f003 0302 	and.w	r3, r3, #2
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f9      	bne.n	800050c <HX711_Read+0xc>

    // Read 24 bits from HX711
    for(i = 0; i < 24; i++)
 8000518:	2300      	movs	r3, #0
 800051a:	70fb      	strb	r3, [r7, #3]
 800051c:	e01a      	b.n	8000554 <HX711_Read+0x54>
    {
        // PD_SCK high: start bit reading
        GPIOB->ODR |= HX711_PD_SCK_PIN;
 800051e:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <HX711_Read+0x88>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a19      	ldr	r2, [pc, #100]	@ (8000588 <HX711_Read+0x88>)
 8000524:	f043 0301 	orr.w	r3, r3, #1
 8000528:	6153      	str	r3, [r2, #20]
        //hx711_delay(10);

        count = count << 1;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	607b      	str	r3, [r7, #4]

        // PD_SCK low: complete the clock cycle
        GPIOB->ODR &= ~HX711_PD_SCK_PIN;
 8000530:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <HX711_Read+0x88>)
 8000532:	695b      	ldr	r3, [r3, #20]
 8000534:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <HX711_Read+0x88>)
 8000536:	f023 0301 	bic.w	r3, r3, #1
 800053a:	6153      	str	r3, [r2, #20]
        //hx711_delay(10);

        // If DOUT is high, set the least-significant bit
        if(GPIOB->IDR & HX711_DOUT_PIN)
 800053c:	4b12      	ldr	r3, [pc, #72]	@ (8000588 <HX711_Read+0x88>)
 800053e:	691b      	ldr	r3, [r3, #16]
 8000540:	f003 0302 	and.w	r3, r3, #2
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <HX711_Read+0x4e>
        {
            count++;
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	3301      	adds	r3, #1
 800054c:	607b      	str	r3, [r7, #4]
    for(i = 0; i < 24; i++)
 800054e:	78fb      	ldrb	r3, [r7, #3]
 8000550:	3301      	adds	r3, #1
 8000552:	70fb      	strb	r3, [r7, #3]
 8000554:	78fb      	ldrb	r3, [r7, #3]
 8000556:	2b17      	cmp	r3, #23
 8000558:	d9e1      	bls.n	800051e <HX711_Read+0x1e>
        }
    }

    // Send one extra pulse to set gain/channel (25 pulses = Channel A, gain = 128)
    GPIOB->ODR |= HX711_PD_SCK_PIN;
 800055a:	4b0b      	ldr	r3, [pc, #44]	@ (8000588 <HX711_Read+0x88>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	4a0a      	ldr	r2, [pc, #40]	@ (8000588 <HX711_Read+0x88>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6153      	str	r3, [r2, #20]
    //hx711_delay(10);
    GPIOB->ODR &= ~HX711_PD_SCK_PIN;
 8000566:	4b08      	ldr	r3, [pc, #32]	@ (8000588 <HX711_Read+0x88>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a07      	ldr	r2, [pc, #28]	@ (8000588 <HX711_Read+0x88>)
 800056c:	f023 0301 	bic.w	r3, r3, #1
 8000570:	6153      	str	r3, [r2, #20]
    //hx711_delay(10);

    // Convert 24-bit two's complement to proper value
    count ^= 0x800000;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8000578:	607b      	str	r3, [r7, #4]

    return count;
 800057a:	687b      	ldr	r3, [r7, #4]
}
 800057c:	4618      	mov	r0, r3
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	48000400 	.word	0x48000400

0800058c <main>:

/* =================== Main Code =================== */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
    USART2_init();
 8000592:	f7ff fecb 	bl	800032c <USART2_init>
    TIMER2_init();
 8000596:	f7ff ff69 	bl	800046c <TIMER2_init>
    hx711_gpio_init();
 800059a:	f7ff ff8d 	bl	80004b8 <hx711_gpio_init>

    print("HX711 interface starting...\r\n");
 800059e:	4808      	ldr	r0, [pc, #32]	@ (80005c0 <main+0x34>)
 80005a0:	f7ff feac 	bl	80002fc <print>

    while(1)
    {
        // Use Timer2 to trigger the HX711 read periodically (every 1 second)
        if(TIMER2_expired())
 80005a4:	f7ff ff4e 	bl	8000444 <TIMER2_expired>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d0fa      	beq.n	80005a4 <main+0x18>
        {
            unsigned long data = HX711_Read();
 80005ae:	f7ff ffa7 	bl	8000500 <HX711_Read>
 80005b2:	6078      	str	r0, [r7, #4]
            print("Weight: %lu\r\n", data);
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	4803      	ldr	r0, [pc, #12]	@ (80005c4 <main+0x38>)
 80005b8:	f7ff fea0 	bl	80002fc <print>
        if(TIMER2_expired())
 80005bc:	e7f2      	b.n	80005a4 <main+0x18>
 80005be:	bf00      	nop
 80005c0:	08000f74 	.word	0x08000f74
 80005c4:	08000f94 	.word	0x08000f94

080005c8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c8:	480d      	ldr	r0, [pc, #52]	@ (8000600 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ca:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005cc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d0:	480c      	ldr	r0, [pc, #48]	@ (8000604 <LoopForever+0x6>)
  ldr r1, =_edata
 80005d2:	490d      	ldr	r1, [pc, #52]	@ (8000608 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005d4:	4a0d      	ldr	r2, [pc, #52]	@ (800060c <LoopForever+0xe>)
  movs r3, #0
 80005d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d8:	e002      	b.n	80005e0 <LoopCopyDataInit>

080005da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005de:	3304      	adds	r3, #4

080005e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005e4:	d3f9      	bcc.n	80005da <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000610 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e8:	4c0a      	ldr	r4, [pc, #40]	@ (8000614 <LoopForever+0x16>)
  movs r3, #0
 80005ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ec:	e001      	b.n	80005f2 <LoopFillZerobss>

080005ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f0:	3204      	adds	r2, #4

080005f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005f4:	d3fb      	bcc.n	80005ee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005f6:	f000 f831 	bl	800065c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fa:	f7ff ffc7 	bl	800058c <main>

080005fe <LoopForever>:

LoopForever:
    b LoopForever
 80005fe:	e7fe      	b.n	80005fe <LoopForever>
  ldr   r0, =_estack
 8000600:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000608:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 800060c:	08000fe8 	.word	0x08000fe8
  ldr r2, =_sbss
 8000610:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8000614:	200003c0 	.word	0x200003c0

08000618 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000618:	e7fe      	b.n	8000618 <ADC1_2_IRQHandler>
	...

0800061c <_vsiprintf_r>:
 800061c:	b500      	push	{lr}
 800061e:	b09b      	sub	sp, #108	@ 0x6c
 8000620:	9100      	str	r1, [sp, #0]
 8000622:	9104      	str	r1, [sp, #16]
 8000624:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000628:	9105      	str	r1, [sp, #20]
 800062a:	9102      	str	r1, [sp, #8]
 800062c:	4905      	ldr	r1, [pc, #20]	@ (8000644 <_vsiprintf_r+0x28>)
 800062e:	9103      	str	r1, [sp, #12]
 8000630:	4669      	mov	r1, sp
 8000632:	f000 f98d 	bl	8000950 <_svfiprintf_r>
 8000636:	9b00      	ldr	r3, [sp, #0]
 8000638:	2200      	movs	r2, #0
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	b01b      	add	sp, #108	@ 0x6c
 800063e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000642:	bf00      	nop
 8000644:	ffff0208 	.word	0xffff0208

08000648 <vsiprintf>:
 8000648:	4613      	mov	r3, r2
 800064a:	460a      	mov	r2, r1
 800064c:	4601      	mov	r1, r0
 800064e:	4802      	ldr	r0, [pc, #8]	@ (8000658 <vsiprintf+0x10>)
 8000650:	6800      	ldr	r0, [r0, #0]
 8000652:	f7ff bfe3 	b.w	800061c <_vsiprintf_r>
 8000656:	bf00      	nop
 8000658:	20000004 	.word	0x20000004

0800065c <__libc_init_array>:
 800065c:	b570      	push	{r4, r5, r6, lr}
 800065e:	4d0d      	ldr	r5, [pc, #52]	@ (8000694 <__libc_init_array+0x38>)
 8000660:	4c0d      	ldr	r4, [pc, #52]	@ (8000698 <__libc_init_array+0x3c>)
 8000662:	1b64      	subs	r4, r4, r5
 8000664:	10a4      	asrs	r4, r4, #2
 8000666:	2600      	movs	r6, #0
 8000668:	42a6      	cmp	r6, r4
 800066a:	d109      	bne.n	8000680 <__libc_init_array+0x24>
 800066c:	4d0b      	ldr	r5, [pc, #44]	@ (800069c <__libc_init_array+0x40>)
 800066e:	4c0c      	ldr	r4, [pc, #48]	@ (80006a0 <__libc_init_array+0x44>)
 8000670:	f000 fc74 	bl	8000f5c <_init>
 8000674:	1b64      	subs	r4, r4, r5
 8000676:	10a4      	asrs	r4, r4, #2
 8000678:	2600      	movs	r6, #0
 800067a:	42a6      	cmp	r6, r4
 800067c:	d105      	bne.n	800068a <__libc_init_array+0x2e>
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f855 3b04 	ldr.w	r3, [r5], #4
 8000684:	4798      	blx	r3
 8000686:	3601      	adds	r6, #1
 8000688:	e7ee      	b.n	8000668 <__libc_init_array+0xc>
 800068a:	f855 3b04 	ldr.w	r3, [r5], #4
 800068e:	4798      	blx	r3
 8000690:	3601      	adds	r6, #1
 8000692:	e7f2      	b.n	800067a <__libc_init_array+0x1e>
 8000694:	08000fe0 	.word	0x08000fe0
 8000698:	08000fe0 	.word	0x08000fe0
 800069c:	08000fe0 	.word	0x08000fe0
 80006a0:	08000fe4 	.word	0x08000fe4

080006a4 <__retarget_lock_acquire_recursive>:
 80006a4:	4770      	bx	lr

080006a6 <__retarget_lock_release_recursive>:
 80006a6:	4770      	bx	lr

080006a8 <_free_r>:
 80006a8:	b538      	push	{r3, r4, r5, lr}
 80006aa:	4605      	mov	r5, r0
 80006ac:	2900      	cmp	r1, #0
 80006ae:	d041      	beq.n	8000734 <_free_r+0x8c>
 80006b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80006b4:	1f0c      	subs	r4, r1, #4
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	bfb8      	it	lt
 80006ba:	18e4      	addlt	r4, r4, r3
 80006bc:	f000 f8e0 	bl	8000880 <__malloc_lock>
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <_free_r+0x90>)
 80006c2:	6813      	ldr	r3, [r2, #0]
 80006c4:	b933      	cbnz	r3, 80006d4 <_free_r+0x2c>
 80006c6:	6063      	str	r3, [r4, #4]
 80006c8:	6014      	str	r4, [r2, #0]
 80006ca:	4628      	mov	r0, r5
 80006cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80006d0:	f000 b8dc 	b.w	800088c <__malloc_unlock>
 80006d4:	42a3      	cmp	r3, r4
 80006d6:	d908      	bls.n	80006ea <_free_r+0x42>
 80006d8:	6820      	ldr	r0, [r4, #0]
 80006da:	1821      	adds	r1, r4, r0
 80006dc:	428b      	cmp	r3, r1
 80006de:	bf01      	itttt	eq
 80006e0:	6819      	ldreq	r1, [r3, #0]
 80006e2:	685b      	ldreq	r3, [r3, #4]
 80006e4:	1809      	addeq	r1, r1, r0
 80006e6:	6021      	streq	r1, [r4, #0]
 80006e8:	e7ed      	b.n	80006c6 <_free_r+0x1e>
 80006ea:	461a      	mov	r2, r3
 80006ec:	685b      	ldr	r3, [r3, #4]
 80006ee:	b10b      	cbz	r3, 80006f4 <_free_r+0x4c>
 80006f0:	42a3      	cmp	r3, r4
 80006f2:	d9fa      	bls.n	80006ea <_free_r+0x42>
 80006f4:	6811      	ldr	r1, [r2, #0]
 80006f6:	1850      	adds	r0, r2, r1
 80006f8:	42a0      	cmp	r0, r4
 80006fa:	d10b      	bne.n	8000714 <_free_r+0x6c>
 80006fc:	6820      	ldr	r0, [r4, #0]
 80006fe:	4401      	add	r1, r0
 8000700:	1850      	adds	r0, r2, r1
 8000702:	4283      	cmp	r3, r0
 8000704:	6011      	str	r1, [r2, #0]
 8000706:	d1e0      	bne.n	80006ca <_free_r+0x22>
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	685b      	ldr	r3, [r3, #4]
 800070c:	6053      	str	r3, [r2, #4]
 800070e:	4408      	add	r0, r1
 8000710:	6010      	str	r0, [r2, #0]
 8000712:	e7da      	b.n	80006ca <_free_r+0x22>
 8000714:	d902      	bls.n	800071c <_free_r+0x74>
 8000716:	230c      	movs	r3, #12
 8000718:	602b      	str	r3, [r5, #0]
 800071a:	e7d6      	b.n	80006ca <_free_r+0x22>
 800071c:	6820      	ldr	r0, [r4, #0]
 800071e:	1821      	adds	r1, r4, r0
 8000720:	428b      	cmp	r3, r1
 8000722:	bf04      	itt	eq
 8000724:	6819      	ldreq	r1, [r3, #0]
 8000726:	685b      	ldreq	r3, [r3, #4]
 8000728:	6063      	str	r3, [r4, #4]
 800072a:	bf04      	itt	eq
 800072c:	1809      	addeq	r1, r1, r0
 800072e:	6021      	streq	r1, [r4, #0]
 8000730:	6054      	str	r4, [r2, #4]
 8000732:	e7ca      	b.n	80006ca <_free_r+0x22>
 8000734:	bd38      	pop	{r3, r4, r5, pc}
 8000736:	bf00      	nop
 8000738:	200003b8 	.word	0x200003b8

0800073c <sbrk_aligned>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4e0f      	ldr	r6, [pc, #60]	@ (800077c <sbrk_aligned+0x40>)
 8000740:	460c      	mov	r4, r1
 8000742:	6831      	ldr	r1, [r6, #0]
 8000744:	4605      	mov	r5, r0
 8000746:	b911      	cbnz	r1, 800074e <sbrk_aligned+0x12>
 8000748:	f000 fba6 	bl	8000e98 <_sbrk_r>
 800074c:	6030      	str	r0, [r6, #0]
 800074e:	4621      	mov	r1, r4
 8000750:	4628      	mov	r0, r5
 8000752:	f000 fba1 	bl	8000e98 <_sbrk_r>
 8000756:	1c43      	adds	r3, r0, #1
 8000758:	d103      	bne.n	8000762 <sbrk_aligned+0x26>
 800075a:	f04f 34ff 	mov.w	r4, #4294967295
 800075e:	4620      	mov	r0, r4
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	1cc4      	adds	r4, r0, #3
 8000764:	f024 0403 	bic.w	r4, r4, #3
 8000768:	42a0      	cmp	r0, r4
 800076a:	d0f8      	beq.n	800075e <sbrk_aligned+0x22>
 800076c:	1a21      	subs	r1, r4, r0
 800076e:	4628      	mov	r0, r5
 8000770:	f000 fb92 	bl	8000e98 <_sbrk_r>
 8000774:	3001      	adds	r0, #1
 8000776:	d1f2      	bne.n	800075e <sbrk_aligned+0x22>
 8000778:	e7ef      	b.n	800075a <sbrk_aligned+0x1e>
 800077a:	bf00      	nop
 800077c:	200003b4 	.word	0x200003b4

08000780 <_malloc_r>:
 8000780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000784:	1ccd      	adds	r5, r1, #3
 8000786:	f025 0503 	bic.w	r5, r5, #3
 800078a:	3508      	adds	r5, #8
 800078c:	2d0c      	cmp	r5, #12
 800078e:	bf38      	it	cc
 8000790:	250c      	movcc	r5, #12
 8000792:	2d00      	cmp	r5, #0
 8000794:	4606      	mov	r6, r0
 8000796:	db01      	blt.n	800079c <_malloc_r+0x1c>
 8000798:	42a9      	cmp	r1, r5
 800079a:	d904      	bls.n	80007a6 <_malloc_r+0x26>
 800079c:	230c      	movs	r3, #12
 800079e:	6033      	str	r3, [r6, #0]
 80007a0:	2000      	movs	r0, #0
 80007a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800087c <_malloc_r+0xfc>
 80007aa:	f000 f869 	bl	8000880 <__malloc_lock>
 80007ae:	f8d8 3000 	ldr.w	r3, [r8]
 80007b2:	461c      	mov	r4, r3
 80007b4:	bb44      	cbnz	r4, 8000808 <_malloc_r+0x88>
 80007b6:	4629      	mov	r1, r5
 80007b8:	4630      	mov	r0, r6
 80007ba:	f7ff ffbf 	bl	800073c <sbrk_aligned>
 80007be:	1c43      	adds	r3, r0, #1
 80007c0:	4604      	mov	r4, r0
 80007c2:	d158      	bne.n	8000876 <_malloc_r+0xf6>
 80007c4:	f8d8 4000 	ldr.w	r4, [r8]
 80007c8:	4627      	mov	r7, r4
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	d143      	bne.n	8000856 <_malloc_r+0xd6>
 80007ce:	2c00      	cmp	r4, #0
 80007d0:	d04b      	beq.n	800086a <_malloc_r+0xea>
 80007d2:	6823      	ldr	r3, [r4, #0]
 80007d4:	4639      	mov	r1, r7
 80007d6:	4630      	mov	r0, r6
 80007d8:	eb04 0903 	add.w	r9, r4, r3
 80007dc:	f000 fb5c 	bl	8000e98 <_sbrk_r>
 80007e0:	4581      	cmp	r9, r0
 80007e2:	d142      	bne.n	800086a <_malloc_r+0xea>
 80007e4:	6821      	ldr	r1, [r4, #0]
 80007e6:	1a6d      	subs	r5, r5, r1
 80007e8:	4629      	mov	r1, r5
 80007ea:	4630      	mov	r0, r6
 80007ec:	f7ff ffa6 	bl	800073c <sbrk_aligned>
 80007f0:	3001      	adds	r0, #1
 80007f2:	d03a      	beq.n	800086a <_malloc_r+0xea>
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	442b      	add	r3, r5
 80007f8:	6023      	str	r3, [r4, #0]
 80007fa:	f8d8 3000 	ldr.w	r3, [r8]
 80007fe:	685a      	ldr	r2, [r3, #4]
 8000800:	bb62      	cbnz	r2, 800085c <_malloc_r+0xdc>
 8000802:	f8c8 7000 	str.w	r7, [r8]
 8000806:	e00f      	b.n	8000828 <_malloc_r+0xa8>
 8000808:	6822      	ldr	r2, [r4, #0]
 800080a:	1b52      	subs	r2, r2, r5
 800080c:	d420      	bmi.n	8000850 <_malloc_r+0xd0>
 800080e:	2a0b      	cmp	r2, #11
 8000810:	d917      	bls.n	8000842 <_malloc_r+0xc2>
 8000812:	1961      	adds	r1, r4, r5
 8000814:	42a3      	cmp	r3, r4
 8000816:	6025      	str	r5, [r4, #0]
 8000818:	bf18      	it	ne
 800081a:	6059      	strne	r1, [r3, #4]
 800081c:	6863      	ldr	r3, [r4, #4]
 800081e:	bf08      	it	eq
 8000820:	f8c8 1000 	streq.w	r1, [r8]
 8000824:	5162      	str	r2, [r4, r5]
 8000826:	604b      	str	r3, [r1, #4]
 8000828:	4630      	mov	r0, r6
 800082a:	f000 f82f 	bl	800088c <__malloc_unlock>
 800082e:	f104 000b 	add.w	r0, r4, #11
 8000832:	1d23      	adds	r3, r4, #4
 8000834:	f020 0007 	bic.w	r0, r0, #7
 8000838:	1ac2      	subs	r2, r0, r3
 800083a:	bf1c      	itt	ne
 800083c:	1a1b      	subne	r3, r3, r0
 800083e:	50a3      	strne	r3, [r4, r2]
 8000840:	e7af      	b.n	80007a2 <_malloc_r+0x22>
 8000842:	6862      	ldr	r2, [r4, #4]
 8000844:	42a3      	cmp	r3, r4
 8000846:	bf0c      	ite	eq
 8000848:	f8c8 2000 	streq.w	r2, [r8]
 800084c:	605a      	strne	r2, [r3, #4]
 800084e:	e7eb      	b.n	8000828 <_malloc_r+0xa8>
 8000850:	4623      	mov	r3, r4
 8000852:	6864      	ldr	r4, [r4, #4]
 8000854:	e7ae      	b.n	80007b4 <_malloc_r+0x34>
 8000856:	463c      	mov	r4, r7
 8000858:	687f      	ldr	r7, [r7, #4]
 800085a:	e7b6      	b.n	80007ca <_malloc_r+0x4a>
 800085c:	461a      	mov	r2, r3
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	42a3      	cmp	r3, r4
 8000862:	d1fb      	bne.n	800085c <_malloc_r+0xdc>
 8000864:	2300      	movs	r3, #0
 8000866:	6053      	str	r3, [r2, #4]
 8000868:	e7de      	b.n	8000828 <_malloc_r+0xa8>
 800086a:	230c      	movs	r3, #12
 800086c:	6033      	str	r3, [r6, #0]
 800086e:	4630      	mov	r0, r6
 8000870:	f000 f80c 	bl	800088c <__malloc_unlock>
 8000874:	e794      	b.n	80007a0 <_malloc_r+0x20>
 8000876:	6005      	str	r5, [r0, #0]
 8000878:	e7d6      	b.n	8000828 <_malloc_r+0xa8>
 800087a:	bf00      	nop
 800087c:	200003b8 	.word	0x200003b8

08000880 <__malloc_lock>:
 8000880:	4801      	ldr	r0, [pc, #4]	@ (8000888 <__malloc_lock+0x8>)
 8000882:	f7ff bf0f 	b.w	80006a4 <__retarget_lock_acquire_recursive>
 8000886:	bf00      	nop
 8000888:	200003b0 	.word	0x200003b0

0800088c <__malloc_unlock>:
 800088c:	4801      	ldr	r0, [pc, #4]	@ (8000894 <__malloc_unlock+0x8>)
 800088e:	f7ff bf0a 	b.w	80006a6 <__retarget_lock_release_recursive>
 8000892:	bf00      	nop
 8000894:	200003b0 	.word	0x200003b0

08000898 <__ssputs_r>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	688e      	ldr	r6, [r1, #8]
 800089e:	461f      	mov	r7, r3
 80008a0:	42be      	cmp	r6, r7
 80008a2:	680b      	ldr	r3, [r1, #0]
 80008a4:	4682      	mov	sl, r0
 80008a6:	460c      	mov	r4, r1
 80008a8:	4690      	mov	r8, r2
 80008aa:	d82d      	bhi.n	8000908 <__ssputs_r+0x70>
 80008ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80008b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80008b4:	d026      	beq.n	8000904 <__ssputs_r+0x6c>
 80008b6:	6965      	ldr	r5, [r4, #20]
 80008b8:	6909      	ldr	r1, [r1, #16]
 80008ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008be:	eba3 0901 	sub.w	r9, r3, r1
 80008c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008c6:	1c7b      	adds	r3, r7, #1
 80008c8:	444b      	add	r3, r9
 80008ca:	106d      	asrs	r5, r5, #1
 80008cc:	429d      	cmp	r5, r3
 80008ce:	bf38      	it	cc
 80008d0:	461d      	movcc	r5, r3
 80008d2:	0553      	lsls	r3, r2, #21
 80008d4:	d527      	bpl.n	8000926 <__ssputs_r+0x8e>
 80008d6:	4629      	mov	r1, r5
 80008d8:	f7ff ff52 	bl	8000780 <_malloc_r>
 80008dc:	4606      	mov	r6, r0
 80008de:	b360      	cbz	r0, 800093a <__ssputs_r+0xa2>
 80008e0:	6921      	ldr	r1, [r4, #16]
 80008e2:	464a      	mov	r2, r9
 80008e4:	f000 fae8 	bl	8000eb8 <memcpy>
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80008ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f2:	81a3      	strh	r3, [r4, #12]
 80008f4:	6126      	str	r6, [r4, #16]
 80008f6:	6165      	str	r5, [r4, #20]
 80008f8:	444e      	add	r6, r9
 80008fa:	eba5 0509 	sub.w	r5, r5, r9
 80008fe:	6026      	str	r6, [r4, #0]
 8000900:	60a5      	str	r5, [r4, #8]
 8000902:	463e      	mov	r6, r7
 8000904:	42be      	cmp	r6, r7
 8000906:	d900      	bls.n	800090a <__ssputs_r+0x72>
 8000908:	463e      	mov	r6, r7
 800090a:	6820      	ldr	r0, [r4, #0]
 800090c:	4632      	mov	r2, r6
 800090e:	4641      	mov	r1, r8
 8000910:	f000 faa8 	bl	8000e64 <memmove>
 8000914:	68a3      	ldr	r3, [r4, #8]
 8000916:	1b9b      	subs	r3, r3, r6
 8000918:	60a3      	str	r3, [r4, #8]
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	4433      	add	r3, r6
 800091e:	6023      	str	r3, [r4, #0]
 8000920:	2000      	movs	r0, #0
 8000922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000926:	462a      	mov	r2, r5
 8000928:	f000 fad4 	bl	8000ed4 <_realloc_r>
 800092c:	4606      	mov	r6, r0
 800092e:	2800      	cmp	r0, #0
 8000930:	d1e0      	bne.n	80008f4 <__ssputs_r+0x5c>
 8000932:	6921      	ldr	r1, [r4, #16]
 8000934:	4650      	mov	r0, sl
 8000936:	f7ff feb7 	bl	80006a8 <_free_r>
 800093a:	230c      	movs	r3, #12
 800093c:	f8ca 3000 	str.w	r3, [sl]
 8000940:	89a3      	ldrh	r3, [r4, #12]
 8000942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000946:	81a3      	strh	r3, [r4, #12]
 8000948:	f04f 30ff 	mov.w	r0, #4294967295
 800094c:	e7e9      	b.n	8000922 <__ssputs_r+0x8a>
	...

08000950 <_svfiprintf_r>:
 8000950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000954:	4698      	mov	r8, r3
 8000956:	898b      	ldrh	r3, [r1, #12]
 8000958:	061b      	lsls	r3, r3, #24
 800095a:	b09d      	sub	sp, #116	@ 0x74
 800095c:	4607      	mov	r7, r0
 800095e:	460d      	mov	r5, r1
 8000960:	4614      	mov	r4, r2
 8000962:	d510      	bpl.n	8000986 <_svfiprintf_r+0x36>
 8000964:	690b      	ldr	r3, [r1, #16]
 8000966:	b973      	cbnz	r3, 8000986 <_svfiprintf_r+0x36>
 8000968:	2140      	movs	r1, #64	@ 0x40
 800096a:	f7ff ff09 	bl	8000780 <_malloc_r>
 800096e:	6028      	str	r0, [r5, #0]
 8000970:	6128      	str	r0, [r5, #16]
 8000972:	b930      	cbnz	r0, 8000982 <_svfiprintf_r+0x32>
 8000974:	230c      	movs	r3, #12
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	f04f 30ff 	mov.w	r0, #4294967295
 800097c:	b01d      	add	sp, #116	@ 0x74
 800097e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000982:	2340      	movs	r3, #64	@ 0x40
 8000984:	616b      	str	r3, [r5, #20]
 8000986:	2300      	movs	r3, #0
 8000988:	9309      	str	r3, [sp, #36]	@ 0x24
 800098a:	2320      	movs	r3, #32
 800098c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000990:	f8cd 800c 	str.w	r8, [sp, #12]
 8000994:	2330      	movs	r3, #48	@ 0x30
 8000996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000b34 <_svfiprintf_r+0x1e4>
 800099a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800099e:	f04f 0901 	mov.w	r9, #1
 80009a2:	4623      	mov	r3, r4
 80009a4:	469a      	mov	sl, r3
 80009a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009aa:	b10a      	cbz	r2, 80009b0 <_svfiprintf_r+0x60>
 80009ac:	2a25      	cmp	r2, #37	@ 0x25
 80009ae:	d1f9      	bne.n	80009a4 <_svfiprintf_r+0x54>
 80009b0:	ebba 0b04 	subs.w	fp, sl, r4
 80009b4:	d00b      	beq.n	80009ce <_svfiprintf_r+0x7e>
 80009b6:	465b      	mov	r3, fp
 80009b8:	4622      	mov	r2, r4
 80009ba:	4629      	mov	r1, r5
 80009bc:	4638      	mov	r0, r7
 80009be:	f7ff ff6b 	bl	8000898 <__ssputs_r>
 80009c2:	3001      	adds	r0, #1
 80009c4:	f000 80a7 	beq.w	8000b16 <_svfiprintf_r+0x1c6>
 80009c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009ca:	445a      	add	r2, fp
 80009cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80009ce:	f89a 3000 	ldrb.w	r3, [sl]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 809f 	beq.w	8000b16 <_svfiprintf_r+0x1c6>
 80009d8:	2300      	movs	r3, #0
 80009da:	f04f 32ff 	mov.w	r2, #4294967295
 80009de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80009e2:	f10a 0a01 	add.w	sl, sl, #1
 80009e6:	9304      	str	r3, [sp, #16]
 80009e8:	9307      	str	r3, [sp, #28]
 80009ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80009ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80009f0:	4654      	mov	r4, sl
 80009f2:	2205      	movs	r2, #5
 80009f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009f8:	484e      	ldr	r0, [pc, #312]	@ (8000b34 <_svfiprintf_r+0x1e4>)
 80009fa:	f7ff fbf1 	bl	80001e0 <memchr>
 80009fe:	9a04      	ldr	r2, [sp, #16]
 8000a00:	b9d8      	cbnz	r0, 8000a3a <_svfiprintf_r+0xea>
 8000a02:	06d0      	lsls	r0, r2, #27
 8000a04:	bf44      	itt	mi
 8000a06:	2320      	movmi	r3, #32
 8000a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a0c:	0711      	lsls	r1, r2, #28
 8000a0e:	bf44      	itt	mi
 8000a10:	232b      	movmi	r3, #43	@ 0x2b
 8000a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a16:	f89a 3000 	ldrb.w	r3, [sl]
 8000a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a1c:	d015      	beq.n	8000a4a <_svfiprintf_r+0xfa>
 8000a1e:	9a07      	ldr	r2, [sp, #28]
 8000a20:	4654      	mov	r4, sl
 8000a22:	2000      	movs	r0, #0
 8000a24:	f04f 0c0a 	mov.w	ip, #10
 8000a28:	4621      	mov	r1, r4
 8000a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a2e:	3b30      	subs	r3, #48	@ 0x30
 8000a30:	2b09      	cmp	r3, #9
 8000a32:	d94b      	bls.n	8000acc <_svfiprintf_r+0x17c>
 8000a34:	b1b0      	cbz	r0, 8000a64 <_svfiprintf_r+0x114>
 8000a36:	9207      	str	r2, [sp, #28]
 8000a38:	e014      	b.n	8000a64 <_svfiprintf_r+0x114>
 8000a3a:	eba0 0308 	sub.w	r3, r0, r8
 8000a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8000a42:	4313      	orrs	r3, r2
 8000a44:	9304      	str	r3, [sp, #16]
 8000a46:	46a2      	mov	sl, r4
 8000a48:	e7d2      	b.n	80009f0 <_svfiprintf_r+0xa0>
 8000a4a:	9b03      	ldr	r3, [sp, #12]
 8000a4c:	1d19      	adds	r1, r3, #4
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	9103      	str	r1, [sp, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bfbb      	ittet	lt
 8000a56:	425b      	neglt	r3, r3
 8000a58:	f042 0202 	orrlt.w	r2, r2, #2
 8000a5c:	9307      	strge	r3, [sp, #28]
 8000a5e:	9307      	strlt	r3, [sp, #28]
 8000a60:	bfb8      	it	lt
 8000a62:	9204      	strlt	r2, [sp, #16]
 8000a64:	7823      	ldrb	r3, [r4, #0]
 8000a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a68:	d10a      	bne.n	8000a80 <_svfiprintf_r+0x130>
 8000a6a:	7863      	ldrb	r3, [r4, #1]
 8000a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a6e:	d132      	bne.n	8000ad6 <_svfiprintf_r+0x186>
 8000a70:	9b03      	ldr	r3, [sp, #12]
 8000a72:	1d1a      	adds	r2, r3, #4
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	9203      	str	r2, [sp, #12]
 8000a78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a7c:	3402      	adds	r4, #2
 8000a7e:	9305      	str	r3, [sp, #20]
 8000a80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000b44 <_svfiprintf_r+0x1f4>
 8000a84:	7821      	ldrb	r1, [r4, #0]
 8000a86:	2203      	movs	r2, #3
 8000a88:	4650      	mov	r0, sl
 8000a8a:	f7ff fba9 	bl	80001e0 <memchr>
 8000a8e:	b138      	cbz	r0, 8000aa0 <_svfiprintf_r+0x150>
 8000a90:	9b04      	ldr	r3, [sp, #16]
 8000a92:	eba0 000a 	sub.w	r0, r0, sl
 8000a96:	2240      	movs	r2, #64	@ 0x40
 8000a98:	4082      	lsls	r2, r0
 8000a9a:	4313      	orrs	r3, r2
 8000a9c:	3401      	adds	r4, #1
 8000a9e:	9304      	str	r3, [sp, #16]
 8000aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000aa4:	4824      	ldr	r0, [pc, #144]	@ (8000b38 <_svfiprintf_r+0x1e8>)
 8000aa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000aaa:	2206      	movs	r2, #6
 8000aac:	f7ff fb98 	bl	80001e0 <memchr>
 8000ab0:	2800      	cmp	r0, #0
 8000ab2:	d036      	beq.n	8000b22 <_svfiprintf_r+0x1d2>
 8000ab4:	4b21      	ldr	r3, [pc, #132]	@ (8000b3c <_svfiprintf_r+0x1ec>)
 8000ab6:	bb1b      	cbnz	r3, 8000b00 <_svfiprintf_r+0x1b0>
 8000ab8:	9b03      	ldr	r3, [sp, #12]
 8000aba:	3307      	adds	r3, #7
 8000abc:	f023 0307 	bic.w	r3, r3, #7
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	9303      	str	r3, [sp, #12]
 8000ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000ac6:	4433      	add	r3, r6
 8000ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8000aca:	e76a      	b.n	80009a2 <_svfiprintf_r+0x52>
 8000acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8000ad0:	460c      	mov	r4, r1
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	e7a8      	b.n	8000a28 <_svfiprintf_r+0xd8>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	3401      	adds	r4, #1
 8000ada:	9305      	str	r3, [sp, #20]
 8000adc:	4619      	mov	r1, r3
 8000ade:	f04f 0c0a 	mov.w	ip, #10
 8000ae2:	4620      	mov	r0, r4
 8000ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ae8:	3a30      	subs	r2, #48	@ 0x30
 8000aea:	2a09      	cmp	r2, #9
 8000aec:	d903      	bls.n	8000af6 <_svfiprintf_r+0x1a6>
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d0c6      	beq.n	8000a80 <_svfiprintf_r+0x130>
 8000af2:	9105      	str	r1, [sp, #20]
 8000af4:	e7c4      	b.n	8000a80 <_svfiprintf_r+0x130>
 8000af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8000afa:	4604      	mov	r4, r0
 8000afc:	2301      	movs	r3, #1
 8000afe:	e7f0      	b.n	8000ae2 <_svfiprintf_r+0x192>
 8000b00:	ab03      	add	r3, sp, #12
 8000b02:	9300      	str	r3, [sp, #0]
 8000b04:	462a      	mov	r2, r5
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <_svfiprintf_r+0x1f0>)
 8000b08:	a904      	add	r1, sp, #16
 8000b0a:	4638      	mov	r0, r7
 8000b0c:	f3af 8000 	nop.w
 8000b10:	1c42      	adds	r2, r0, #1
 8000b12:	4606      	mov	r6, r0
 8000b14:	d1d6      	bne.n	8000ac4 <_svfiprintf_r+0x174>
 8000b16:	89ab      	ldrh	r3, [r5, #12]
 8000b18:	065b      	lsls	r3, r3, #25
 8000b1a:	f53f af2d 	bmi.w	8000978 <_svfiprintf_r+0x28>
 8000b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b20:	e72c      	b.n	800097c <_svfiprintf_r+0x2c>
 8000b22:	ab03      	add	r3, sp, #12
 8000b24:	9300      	str	r3, [sp, #0]
 8000b26:	462a      	mov	r2, r5
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <_svfiprintf_r+0x1f0>)
 8000b2a:	a904      	add	r1, sp, #16
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	f000 f879 	bl	8000c24 <_printf_i>
 8000b32:	e7ed      	b.n	8000b10 <_svfiprintf_r+0x1c0>
 8000b34:	08000fa2 	.word	0x08000fa2
 8000b38:	08000fac 	.word	0x08000fac
 8000b3c:	00000000 	.word	0x00000000
 8000b40:	08000899 	.word	0x08000899
 8000b44:	08000fa8 	.word	0x08000fa8

08000b48 <_printf_common>:
 8000b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b4c:	4616      	mov	r6, r2
 8000b4e:	4698      	mov	r8, r3
 8000b50:	688a      	ldr	r2, [r1, #8]
 8000b52:	690b      	ldr	r3, [r1, #16]
 8000b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	bfb8      	it	lt
 8000b5c:	4613      	movlt	r3, r2
 8000b5e:	6033      	str	r3, [r6, #0]
 8000b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b64:	4607      	mov	r7, r0
 8000b66:	460c      	mov	r4, r1
 8000b68:	b10a      	cbz	r2, 8000b6e <_printf_common+0x26>
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	6033      	str	r3, [r6, #0]
 8000b6e:	6823      	ldr	r3, [r4, #0]
 8000b70:	0699      	lsls	r1, r3, #26
 8000b72:	bf42      	ittt	mi
 8000b74:	6833      	ldrmi	r3, [r6, #0]
 8000b76:	3302      	addmi	r3, #2
 8000b78:	6033      	strmi	r3, [r6, #0]
 8000b7a:	6825      	ldr	r5, [r4, #0]
 8000b7c:	f015 0506 	ands.w	r5, r5, #6
 8000b80:	d106      	bne.n	8000b90 <_printf_common+0x48>
 8000b82:	f104 0a19 	add.w	sl, r4, #25
 8000b86:	68e3      	ldr	r3, [r4, #12]
 8000b88:	6832      	ldr	r2, [r6, #0]
 8000b8a:	1a9b      	subs	r3, r3, r2
 8000b8c:	42ab      	cmp	r3, r5
 8000b8e:	dc26      	bgt.n	8000bde <_printf_common+0x96>
 8000b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000b94:	6822      	ldr	r2, [r4, #0]
 8000b96:	3b00      	subs	r3, #0
 8000b98:	bf18      	it	ne
 8000b9a:	2301      	movne	r3, #1
 8000b9c:	0692      	lsls	r2, r2, #26
 8000b9e:	d42b      	bmi.n	8000bf8 <_printf_common+0xb0>
 8000ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ba4:	4641      	mov	r1, r8
 8000ba6:	4638      	mov	r0, r7
 8000ba8:	47c8      	blx	r9
 8000baa:	3001      	adds	r0, #1
 8000bac:	d01e      	beq.n	8000bec <_printf_common+0xa4>
 8000bae:	6823      	ldr	r3, [r4, #0]
 8000bb0:	6922      	ldr	r2, [r4, #16]
 8000bb2:	f003 0306 	and.w	r3, r3, #6
 8000bb6:	2b04      	cmp	r3, #4
 8000bb8:	bf02      	ittt	eq
 8000bba:	68e5      	ldreq	r5, [r4, #12]
 8000bbc:	6833      	ldreq	r3, [r6, #0]
 8000bbe:	1aed      	subeq	r5, r5, r3
 8000bc0:	68a3      	ldr	r3, [r4, #8]
 8000bc2:	bf0c      	ite	eq
 8000bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bc8:	2500      	movne	r5, #0
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	bfc4      	itt	gt
 8000bce:	1a9b      	subgt	r3, r3, r2
 8000bd0:	18ed      	addgt	r5, r5, r3
 8000bd2:	2600      	movs	r6, #0
 8000bd4:	341a      	adds	r4, #26
 8000bd6:	42b5      	cmp	r5, r6
 8000bd8:	d11a      	bne.n	8000c10 <_printf_common+0xc8>
 8000bda:	2000      	movs	r0, #0
 8000bdc:	e008      	b.n	8000bf0 <_printf_common+0xa8>
 8000bde:	2301      	movs	r3, #1
 8000be0:	4652      	mov	r2, sl
 8000be2:	4641      	mov	r1, r8
 8000be4:	4638      	mov	r0, r7
 8000be6:	47c8      	blx	r9
 8000be8:	3001      	adds	r0, #1
 8000bea:	d103      	bne.n	8000bf4 <_printf_common+0xac>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	3501      	adds	r5, #1
 8000bf6:	e7c6      	b.n	8000b86 <_printf_common+0x3e>
 8000bf8:	18e1      	adds	r1, r4, r3
 8000bfa:	1c5a      	adds	r2, r3, #1
 8000bfc:	2030      	movs	r0, #48	@ 0x30
 8000bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c02:	4422      	add	r2, r4
 8000c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	e7c7      	b.n	8000ba0 <_printf_common+0x58>
 8000c10:	2301      	movs	r3, #1
 8000c12:	4622      	mov	r2, r4
 8000c14:	4641      	mov	r1, r8
 8000c16:	4638      	mov	r0, r7
 8000c18:	47c8      	blx	r9
 8000c1a:	3001      	adds	r0, #1
 8000c1c:	d0e6      	beq.n	8000bec <_printf_common+0xa4>
 8000c1e:	3601      	adds	r6, #1
 8000c20:	e7d9      	b.n	8000bd6 <_printf_common+0x8e>
	...

08000c24 <_printf_i>:
 8000c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	7e0f      	ldrb	r7, [r1, #24]
 8000c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c2c:	2f78      	cmp	r7, #120	@ 0x78
 8000c2e:	4691      	mov	r9, r2
 8000c30:	4680      	mov	r8, r0
 8000c32:	460c      	mov	r4, r1
 8000c34:	469a      	mov	sl, r3
 8000c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c3a:	d807      	bhi.n	8000c4c <_printf_i+0x28>
 8000c3c:	2f62      	cmp	r7, #98	@ 0x62
 8000c3e:	d80a      	bhi.n	8000c56 <_printf_i+0x32>
 8000c40:	2f00      	cmp	r7, #0
 8000c42:	f000 80d2 	beq.w	8000dea <_printf_i+0x1c6>
 8000c46:	2f58      	cmp	r7, #88	@ 0x58
 8000c48:	f000 80b9 	beq.w	8000dbe <_printf_i+0x19a>
 8000c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c54:	e03a      	b.n	8000ccc <_printf_i+0xa8>
 8000c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c5a:	2b15      	cmp	r3, #21
 8000c5c:	d8f6      	bhi.n	8000c4c <_printf_i+0x28>
 8000c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8000c64 <_printf_i+0x40>)
 8000c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c64:	08000cbd 	.word	0x08000cbd
 8000c68:	08000cd1 	.word	0x08000cd1
 8000c6c:	08000c4d 	.word	0x08000c4d
 8000c70:	08000c4d 	.word	0x08000c4d
 8000c74:	08000c4d 	.word	0x08000c4d
 8000c78:	08000c4d 	.word	0x08000c4d
 8000c7c:	08000cd1 	.word	0x08000cd1
 8000c80:	08000c4d 	.word	0x08000c4d
 8000c84:	08000c4d 	.word	0x08000c4d
 8000c88:	08000c4d 	.word	0x08000c4d
 8000c8c:	08000c4d 	.word	0x08000c4d
 8000c90:	08000dd1 	.word	0x08000dd1
 8000c94:	08000cfb 	.word	0x08000cfb
 8000c98:	08000d8b 	.word	0x08000d8b
 8000c9c:	08000c4d 	.word	0x08000c4d
 8000ca0:	08000c4d 	.word	0x08000c4d
 8000ca4:	08000df3 	.word	0x08000df3
 8000ca8:	08000c4d 	.word	0x08000c4d
 8000cac:	08000cfb 	.word	0x08000cfb
 8000cb0:	08000c4d 	.word	0x08000c4d
 8000cb4:	08000c4d 	.word	0x08000c4d
 8000cb8:	08000d93 	.word	0x08000d93
 8000cbc:	6833      	ldr	r3, [r6, #0]
 8000cbe:	1d1a      	adds	r2, r3, #4
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	6032      	str	r2, [r6, #0]
 8000cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e09d      	b.n	8000e0c <_printf_i+0x1e8>
 8000cd0:	6833      	ldr	r3, [r6, #0]
 8000cd2:	6820      	ldr	r0, [r4, #0]
 8000cd4:	1d19      	adds	r1, r3, #4
 8000cd6:	6031      	str	r1, [r6, #0]
 8000cd8:	0606      	lsls	r6, r0, #24
 8000cda:	d501      	bpl.n	8000ce0 <_printf_i+0xbc>
 8000cdc:	681d      	ldr	r5, [r3, #0]
 8000cde:	e003      	b.n	8000ce8 <_printf_i+0xc4>
 8000ce0:	0645      	lsls	r5, r0, #25
 8000ce2:	d5fb      	bpl.n	8000cdc <_printf_i+0xb8>
 8000ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ce8:	2d00      	cmp	r5, #0
 8000cea:	da03      	bge.n	8000cf4 <_printf_i+0xd0>
 8000cec:	232d      	movs	r3, #45	@ 0x2d
 8000cee:	426d      	negs	r5, r5
 8000cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000cf4:	4859      	ldr	r0, [pc, #356]	@ (8000e5c <_printf_i+0x238>)
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	e011      	b.n	8000d1e <_printf_i+0xfa>
 8000cfa:	6821      	ldr	r1, [r4, #0]
 8000cfc:	6833      	ldr	r3, [r6, #0]
 8000cfe:	0608      	lsls	r0, r1, #24
 8000d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d04:	d402      	bmi.n	8000d0c <_printf_i+0xe8>
 8000d06:	0649      	lsls	r1, r1, #25
 8000d08:	bf48      	it	mi
 8000d0a:	b2ad      	uxthmi	r5, r5
 8000d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d0e:	4853      	ldr	r0, [pc, #332]	@ (8000e5c <_printf_i+0x238>)
 8000d10:	6033      	str	r3, [r6, #0]
 8000d12:	bf14      	ite	ne
 8000d14:	230a      	movne	r3, #10
 8000d16:	2308      	moveq	r3, #8
 8000d18:	2100      	movs	r1, #0
 8000d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d1e:	6866      	ldr	r6, [r4, #4]
 8000d20:	60a6      	str	r6, [r4, #8]
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	bfa2      	ittt	ge
 8000d26:	6821      	ldrge	r1, [r4, #0]
 8000d28:	f021 0104 	bicge.w	r1, r1, #4
 8000d2c:	6021      	strge	r1, [r4, #0]
 8000d2e:	b90d      	cbnz	r5, 8000d34 <_printf_i+0x110>
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d04b      	beq.n	8000dcc <_printf_i+0x1a8>
 8000d34:	4616      	mov	r6, r2
 8000d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8000d3e:	5dc7      	ldrb	r7, [r0, r7]
 8000d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d44:	462f      	mov	r7, r5
 8000d46:	42bb      	cmp	r3, r7
 8000d48:	460d      	mov	r5, r1
 8000d4a:	d9f4      	bls.n	8000d36 <_printf_i+0x112>
 8000d4c:	2b08      	cmp	r3, #8
 8000d4e:	d10b      	bne.n	8000d68 <_printf_i+0x144>
 8000d50:	6823      	ldr	r3, [r4, #0]
 8000d52:	07df      	lsls	r7, r3, #31
 8000d54:	d508      	bpl.n	8000d68 <_printf_i+0x144>
 8000d56:	6923      	ldr	r3, [r4, #16]
 8000d58:	6861      	ldr	r1, [r4, #4]
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	bfde      	ittt	le
 8000d5e:	2330      	movle	r3, #48	@ 0x30
 8000d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000d68:	1b92      	subs	r2, r2, r6
 8000d6a:	6122      	str	r2, [r4, #16]
 8000d6c:	f8cd a000 	str.w	sl, [sp]
 8000d70:	464b      	mov	r3, r9
 8000d72:	aa03      	add	r2, sp, #12
 8000d74:	4621      	mov	r1, r4
 8000d76:	4640      	mov	r0, r8
 8000d78:	f7ff fee6 	bl	8000b48 <_printf_common>
 8000d7c:	3001      	adds	r0, #1
 8000d7e:	d14a      	bne.n	8000e16 <_printf_i+0x1f2>
 8000d80:	f04f 30ff 	mov.w	r0, #4294967295
 8000d84:	b004      	add	sp, #16
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	6823      	ldr	r3, [r4, #0]
 8000d8c:	f043 0320 	orr.w	r3, r3, #32
 8000d90:	6023      	str	r3, [r4, #0]
 8000d92:	4833      	ldr	r0, [pc, #204]	@ (8000e60 <_printf_i+0x23c>)
 8000d94:	2778      	movs	r7, #120	@ 0x78
 8000d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000d9a:	6823      	ldr	r3, [r4, #0]
 8000d9c:	6831      	ldr	r1, [r6, #0]
 8000d9e:	061f      	lsls	r7, r3, #24
 8000da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8000da4:	d402      	bmi.n	8000dac <_printf_i+0x188>
 8000da6:	065f      	lsls	r7, r3, #25
 8000da8:	bf48      	it	mi
 8000daa:	b2ad      	uxthmi	r5, r5
 8000dac:	6031      	str	r1, [r6, #0]
 8000dae:	07d9      	lsls	r1, r3, #31
 8000db0:	bf44      	itt	mi
 8000db2:	f043 0320 	orrmi.w	r3, r3, #32
 8000db6:	6023      	strmi	r3, [r4, #0]
 8000db8:	b11d      	cbz	r5, 8000dc2 <_printf_i+0x19e>
 8000dba:	2310      	movs	r3, #16
 8000dbc:	e7ac      	b.n	8000d18 <_printf_i+0xf4>
 8000dbe:	4827      	ldr	r0, [pc, #156]	@ (8000e5c <_printf_i+0x238>)
 8000dc0:	e7e9      	b.n	8000d96 <_printf_i+0x172>
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	f023 0320 	bic.w	r3, r3, #32
 8000dc8:	6023      	str	r3, [r4, #0]
 8000dca:	e7f6      	b.n	8000dba <_printf_i+0x196>
 8000dcc:	4616      	mov	r6, r2
 8000dce:	e7bd      	b.n	8000d4c <_printf_i+0x128>
 8000dd0:	6833      	ldr	r3, [r6, #0]
 8000dd2:	6825      	ldr	r5, [r4, #0]
 8000dd4:	6961      	ldr	r1, [r4, #20]
 8000dd6:	1d18      	adds	r0, r3, #4
 8000dd8:	6030      	str	r0, [r6, #0]
 8000dda:	062e      	lsls	r6, r5, #24
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	d501      	bpl.n	8000de4 <_printf_i+0x1c0>
 8000de0:	6019      	str	r1, [r3, #0]
 8000de2:	e002      	b.n	8000dea <_printf_i+0x1c6>
 8000de4:	0668      	lsls	r0, r5, #25
 8000de6:	d5fb      	bpl.n	8000de0 <_printf_i+0x1bc>
 8000de8:	8019      	strh	r1, [r3, #0]
 8000dea:	2300      	movs	r3, #0
 8000dec:	6123      	str	r3, [r4, #16]
 8000dee:	4616      	mov	r6, r2
 8000df0:	e7bc      	b.n	8000d6c <_printf_i+0x148>
 8000df2:	6833      	ldr	r3, [r6, #0]
 8000df4:	1d1a      	adds	r2, r3, #4
 8000df6:	6032      	str	r2, [r6, #0]
 8000df8:	681e      	ldr	r6, [r3, #0]
 8000dfa:	6862      	ldr	r2, [r4, #4]
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4630      	mov	r0, r6
 8000e00:	f7ff f9ee 	bl	80001e0 <memchr>
 8000e04:	b108      	cbz	r0, 8000e0a <_printf_i+0x1e6>
 8000e06:	1b80      	subs	r0, r0, r6
 8000e08:	6060      	str	r0, [r4, #4]
 8000e0a:	6863      	ldr	r3, [r4, #4]
 8000e0c:	6123      	str	r3, [r4, #16]
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e14:	e7aa      	b.n	8000d6c <_printf_i+0x148>
 8000e16:	6923      	ldr	r3, [r4, #16]
 8000e18:	4632      	mov	r2, r6
 8000e1a:	4649      	mov	r1, r9
 8000e1c:	4640      	mov	r0, r8
 8000e1e:	47d0      	blx	sl
 8000e20:	3001      	adds	r0, #1
 8000e22:	d0ad      	beq.n	8000d80 <_printf_i+0x15c>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	079b      	lsls	r3, r3, #30
 8000e28:	d413      	bmi.n	8000e52 <_printf_i+0x22e>
 8000e2a:	68e0      	ldr	r0, [r4, #12]
 8000e2c:	9b03      	ldr	r3, [sp, #12]
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	bfb8      	it	lt
 8000e32:	4618      	movlt	r0, r3
 8000e34:	e7a6      	b.n	8000d84 <_printf_i+0x160>
 8000e36:	2301      	movs	r3, #1
 8000e38:	4632      	mov	r2, r6
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	47d0      	blx	sl
 8000e40:	3001      	adds	r0, #1
 8000e42:	d09d      	beq.n	8000d80 <_printf_i+0x15c>
 8000e44:	3501      	adds	r5, #1
 8000e46:	68e3      	ldr	r3, [r4, #12]
 8000e48:	9903      	ldr	r1, [sp, #12]
 8000e4a:	1a5b      	subs	r3, r3, r1
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	dcf2      	bgt.n	8000e36 <_printf_i+0x212>
 8000e50:	e7eb      	b.n	8000e2a <_printf_i+0x206>
 8000e52:	2500      	movs	r5, #0
 8000e54:	f104 0619 	add.w	r6, r4, #25
 8000e58:	e7f5      	b.n	8000e46 <_printf_i+0x222>
 8000e5a:	bf00      	nop
 8000e5c:	08000fb3 	.word	0x08000fb3
 8000e60:	08000fc4 	.word	0x08000fc4

08000e64 <memmove>:
 8000e64:	4288      	cmp	r0, r1
 8000e66:	b510      	push	{r4, lr}
 8000e68:	eb01 0402 	add.w	r4, r1, r2
 8000e6c:	d902      	bls.n	8000e74 <memmove+0x10>
 8000e6e:	4284      	cmp	r4, r0
 8000e70:	4623      	mov	r3, r4
 8000e72:	d807      	bhi.n	8000e84 <memmove+0x20>
 8000e74:	1e43      	subs	r3, r0, #1
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	d008      	beq.n	8000e8c <memmove+0x28>
 8000e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e82:	e7f8      	b.n	8000e76 <memmove+0x12>
 8000e84:	4402      	add	r2, r0
 8000e86:	4601      	mov	r1, r0
 8000e88:	428a      	cmp	r2, r1
 8000e8a:	d100      	bne.n	8000e8e <memmove+0x2a>
 8000e8c:	bd10      	pop	{r4, pc}
 8000e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000e96:	e7f7      	b.n	8000e88 <memmove+0x24>

08000e98 <_sbrk_r>:
 8000e98:	b538      	push	{r3, r4, r5, lr}
 8000e9a:	4d06      	ldr	r5, [pc, #24]	@ (8000eb4 <_sbrk_r+0x1c>)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	602b      	str	r3, [r5, #0]
 8000ea4:	f000 f84c 	bl	8000f40 <_sbrk>
 8000ea8:	1c43      	adds	r3, r0, #1
 8000eaa:	d102      	bne.n	8000eb2 <_sbrk_r+0x1a>
 8000eac:	682b      	ldr	r3, [r5, #0]
 8000eae:	b103      	cbz	r3, 8000eb2 <_sbrk_r+0x1a>
 8000eb0:	6023      	str	r3, [r4, #0]
 8000eb2:	bd38      	pop	{r3, r4, r5, pc}
 8000eb4:	200003ac 	.word	0x200003ac

08000eb8 <memcpy>:
 8000eb8:	440a      	add	r2, r1
 8000eba:	4291      	cmp	r1, r2
 8000ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec0:	d100      	bne.n	8000ec4 <memcpy+0xc>
 8000ec2:	4770      	bx	lr
 8000ec4:	b510      	push	{r4, lr}
 8000ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d1f9      	bne.n	8000ec6 <memcpy+0xe>
 8000ed2:	bd10      	pop	{r4, pc}

08000ed4 <_realloc_r>:
 8000ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ed8:	4680      	mov	r8, r0
 8000eda:	4615      	mov	r5, r2
 8000edc:	460c      	mov	r4, r1
 8000ede:	b921      	cbnz	r1, 8000eea <_realloc_r+0x16>
 8000ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee4:	4611      	mov	r1, r2
 8000ee6:	f7ff bc4b 	b.w	8000780 <_malloc_r>
 8000eea:	b92a      	cbnz	r2, 8000ef8 <_realloc_r+0x24>
 8000eec:	f7ff fbdc 	bl	80006a8 <_free_r>
 8000ef0:	2400      	movs	r4, #0
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ef8:	f000 f81a 	bl	8000f30 <_malloc_usable_size_r>
 8000efc:	4285      	cmp	r5, r0
 8000efe:	4606      	mov	r6, r0
 8000f00:	d802      	bhi.n	8000f08 <_realloc_r+0x34>
 8000f02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000f06:	d8f4      	bhi.n	8000ef2 <_realloc_r+0x1e>
 8000f08:	4629      	mov	r1, r5
 8000f0a:	4640      	mov	r0, r8
 8000f0c:	f7ff fc38 	bl	8000780 <_malloc_r>
 8000f10:	4607      	mov	r7, r0
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d0ec      	beq.n	8000ef0 <_realloc_r+0x1c>
 8000f16:	42b5      	cmp	r5, r6
 8000f18:	462a      	mov	r2, r5
 8000f1a:	4621      	mov	r1, r4
 8000f1c:	bf28      	it	cs
 8000f1e:	4632      	movcs	r2, r6
 8000f20:	f7ff ffca 	bl	8000eb8 <memcpy>
 8000f24:	4621      	mov	r1, r4
 8000f26:	4640      	mov	r0, r8
 8000f28:	f7ff fbbe 	bl	80006a8 <_free_r>
 8000f2c:	463c      	mov	r4, r7
 8000f2e:	e7e0      	b.n	8000ef2 <_realloc_r+0x1e>

08000f30 <_malloc_usable_size_r>:
 8000f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f34:	1f18      	subs	r0, r3, #4
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfbc      	itt	lt
 8000f3a:	580b      	ldrlt	r3, [r1, r0]
 8000f3c:	18c0      	addlt	r0, r0, r3
 8000f3e:	4770      	bx	lr

08000f40 <_sbrk>:
 8000f40:	4a04      	ldr	r2, [pc, #16]	@ (8000f54 <_sbrk+0x14>)
 8000f42:	6811      	ldr	r1, [r2, #0]
 8000f44:	4603      	mov	r3, r0
 8000f46:	b909      	cbnz	r1, 8000f4c <_sbrk+0xc>
 8000f48:	4903      	ldr	r1, [pc, #12]	@ (8000f58 <_sbrk+0x18>)
 8000f4a:	6011      	str	r1, [r2, #0]
 8000f4c:	6810      	ldr	r0, [r2, #0]
 8000f4e:	4403      	add	r3, r0
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	4770      	bx	lr
 8000f54:	200003bc 	.word	0x200003bc
 8000f58:	200003c0 	.word	0x200003c0

08000f5c <_init>:
 8000f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f5e:	bf00      	nop
 8000f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f62:	bc08      	pop	{r3}
 8000f64:	469e      	mov	lr, r3
 8000f66:	4770      	bx	lr

08000f68 <_fini>:
 8000f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f6a:	bf00      	nop
 8000f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f6e:	bc08      	pop	{r3}
 8000f70:	469e      	mov	lr, r3
 8000f72:	4770      	bx	lr

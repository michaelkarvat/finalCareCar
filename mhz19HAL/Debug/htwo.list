
htwo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000404c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080041ec  080041ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c0  080042c0  00006074  2**0
                  CONTENTS
  4 .ARM          00000008  080042c0  080042c0  000052c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042c8  080042c8  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c8  080042c8  000052c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042cc  080042cc  000052cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080042d0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006074  2**0
                  CONTENTS
 10 .bss          0000028c  20000074  20000074  00006074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000300  20000300  00006074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000093b5  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001769  00000000  00000000  0000f459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00010bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000586  00000000  00000000  00011310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002074e  00000000  00000000  00011896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000aa61  00000000  00000000  00031fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c1c21  00000000  00000000  0003ca45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fe666  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023f0  00000000  00000000  000fe6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00100a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080041d4 	.word	0x080041d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080041d4 	.word	0x080041d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 8000284:	f000 fafc 	bl	8000880 <HAL_Init>
  SystemClock_Config();
 8000288:	f000 f866 	bl	8000358 <SystemClock_Config>
  MX_GPIO_Init();
 800028c:	f000 f924 	bl	80004d8 <MX_GPIO_Init>
  MX_USART1_UART_Init(); // UART for sensor
 8000290:	f000 f8c2 	bl	8000418 <MX_USART1_UART_Init>
  MX_USART2_UART_Init(); // UART for debugging (printf redirection)
 8000294:	f000 f8f0 	bl	8000478 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  printf("MH-Z19C CO2 Sensor Interface Starting...\n");
 8000298:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <main+0x30>)
 800029a:	f003 f937 	bl	800350c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  while (1)
  {
    read_CO2(); // Read and process CO2 data
 800029e:	f000 f809 	bl	80002b4 <read_CO2>
    HAL_Delay(2000); // Wait 2 seconds between reads
 80002a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80002a6:	f000 fb51 	bl	800094c <HAL_Delay>
    read_CO2(); // Read and process CO2 data
 80002aa:	bf00      	nop
 80002ac:	e7f7      	b.n	800029e <main+0x1e>
 80002ae:	bf00      	nop
 80002b0:	080041ec 	.word	0x080041ec

080002b4 <read_CO2>:
/**
  * @brief  Read CO2 concentration from MH-Z19C sensor.
  * @retval None
  */
void read_CO2(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
  // Transmit the command to the sensor
  HAL_UART_Transmit(&huart1, txBuffer, 9, HAL_MAX_DELAY);
 80002ba:	f04f 33ff 	mov.w	r3, #4294967295
 80002be:	2209      	movs	r2, #9
 80002c0:	4915      	ldr	r1, [pc, #84]	@ (8000318 <read_CO2+0x64>)
 80002c2:	4816      	ldr	r0, [pc, #88]	@ (800031c <read_CO2+0x68>)
 80002c4:	f002 fab6 	bl	8002834 <HAL_UART_Transmit>

  // Receive the sensor's response
  HAL_UART_Receive(&huart1, rxBuffer, 9, HAL_MAX_DELAY);
 80002c8:	f04f 33ff 	mov.w	r3, #4294967295
 80002cc:	2209      	movs	r2, #9
 80002ce:	4914      	ldr	r1, [pc, #80]	@ (8000320 <read_CO2+0x6c>)
 80002d0:	4812      	ldr	r0, [pc, #72]	@ (800031c <read_CO2+0x68>)
 80002d2:	f002 fb38 	bl	8002946 <HAL_UART_Receive>

  // Validate the response header and calculate CO2 concentration
  if (rxBuffer[0] == 0xFF && rxBuffer[1] == 0x86)
 80002d6:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <read_CO2+0x6c>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2bff      	cmp	r3, #255	@ 0xff
 80002dc:	d113      	bne.n	8000306 <read_CO2+0x52>
 80002de:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <read_CO2+0x6c>)
 80002e0:	785b      	ldrb	r3, [r3, #1]
 80002e2:	2b86      	cmp	r3, #134	@ 0x86
 80002e4:	d10f      	bne.n	8000306 <read_CO2+0x52>
  {
    uint16_t co2 = (rxBuffer[2] << 8) | rxBuffer[3]; // Combine high and low bytes
 80002e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <read_CO2+0x6c>)
 80002e8:	789b      	ldrb	r3, [r3, #2]
 80002ea:	021b      	lsls	r3, r3, #8
 80002ec:	b21a      	sxth	r2, r3
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <read_CO2+0x6c>)
 80002f0:	78db      	ldrb	r3, [r3, #3]
 80002f2:	b21b      	sxth	r3, r3
 80002f4:	4313      	orrs	r3, r2
 80002f6:	b21b      	sxth	r3, r3
 80002f8:	80fb      	strh	r3, [r7, #6]
    printf("CO2 Concentration: %d ppm\n\r", co2);
 80002fa:	88fb      	ldrh	r3, [r7, #6]
 80002fc:	4619      	mov	r1, r3
 80002fe:	4809      	ldr	r0, [pc, #36]	@ (8000324 <read_CO2+0x70>)
 8000300:	f003 f89c 	bl	800343c <iprintf>
  {
 8000304:	e003      	b.n	800030e <read_CO2+0x5a>
  }
  else
  {
    printf("Invalid response from sensor\n");
 8000306:	4808      	ldr	r0, [pc, #32]	@ (8000328 <read_CO2+0x74>)
 8000308:	f003 f900 	bl	800350c <puts>
  }
}
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000000 	.word	0x20000000
 800031c:	20000090 	.word	0x20000090
 8000320:	200001a0 	.word	0x200001a0
 8000324:	08004218 	.word	0x08004218
 8000328:	08004234 	.word	0x08004234

0800032c <_write>:
  * @param  data: Data to send
  * @param  len: Length of the data
  * @retval int
  */
int _write(int file, char *data, int len)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
 8000332:	60f8      	str	r0, [r7, #12]
 8000334:	60b9      	str	r1, [r7, #8]
 8000336:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)data, len, HAL_MAX_DELAY);
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	b29a      	uxth	r2, r3
 800033c:	f04f 33ff 	mov.w	r3, #4294967295
 8000340:	68b9      	ldr	r1, [r7, #8]
 8000342:	4804      	ldr	r0, [pc, #16]	@ (8000354 <_write+0x28>)
 8000344:	f002 fa76 	bl	8002834 <HAL_UART_Transmit>
  return len;
 8000348:	687b      	ldr	r3, [r7, #4]
}
 800034a:	4618      	mov	r0, r3
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	20000118 	.word	0x20000118

08000358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b0a6      	sub	sp, #152	@ 0x98
 800035c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000362:	2228      	movs	r2, #40	@ 0x28
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f003 f9b0 	bl	80036cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800036c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000370:	2200      	movs	r2, #0
 8000372:	601a      	str	r2, [r3, #0]
 8000374:	605a      	str	r2, [r3, #4]
 8000376:	609a      	str	r2, [r3, #8]
 8000378:	60da      	str	r2, [r3, #12]
 800037a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2258      	movs	r2, #88	@ 0x58
 8000380:	2100      	movs	r1, #0
 8000382:	4618      	mov	r0, r3
 8000384:	f003 f9a2 	bl	80036cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000388:	2302      	movs	r3, #2
 800038a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038c:	2301      	movs	r3, #1
 800038e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000390:	2310      	movs	r3, #16
 8000392:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800039c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80003a8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003ac:	2300      	movs	r3, #0
 80003ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80003b6:	4618      	mov	r0, r3
 80003b8:	f000 fd5c 	bl	8000e74 <HAL_RCC_OscConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003c2:	f000 f8cd 	bl	8000560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c6:	230f      	movs	r3, #15
 80003c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ca:	2302      	movs	r3, #2
 80003cc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	2300      	movs	r3, #0
 80003d0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d8:	2300      	movs	r3, #0
 80003da:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003dc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80003e0:	2102      	movs	r1, #2
 80003e2:	4618      	mov	r0, r3
 80003e4:	f001 fd9a 	bl	8001f1c <HAL_RCC_ClockConfig>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ee:	f000 f8b7 	bl	8000560 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80003f2:	2303      	movs	r3, #3
 80003f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	4618      	mov	r0, r3
 8000402:	f001 ffab 	bl	800235c <HAL_RCCEx_PeriphCLKConfig>
 8000406:	4603      	mov	r3, r0
 8000408:	2b00      	cmp	r3, #0
 800040a:	d001      	beq.n	8000410 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800040c:	f000 f8a8 	bl	8000560 <Error_Handler>
  }
}
 8000410:	bf00      	nop
 8000412:	3798      	adds	r7, #152	@ 0x98
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 800041c:	4b14      	ldr	r3, [pc, #80]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 800041e:	4a15      	ldr	r2, [pc, #84]	@ (8000474 <MX_USART1_UART_Init+0x5c>)
 8000420:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000422:	4b13      	ldr	r3, [pc, #76]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 8000424:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000428:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b11      	ldr	r3, [pc, #68]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0f      	ldr	r3, [pc, #60]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0e      	ldr	r3, [pc, #56]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b0c      	ldr	r3, [pc, #48]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b09      	ldr	r3, [pc, #36]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044e:	4b08      	ldr	r3, [pc, #32]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000454:	4b06      	ldr	r3, [pc, #24]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_USART1_UART_Init+0x58>)
 800045c:	f002 f99c 	bl	8002798 <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000466:	f000 f87b 	bl	8000560 <Error_Handler>
  }
}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000090 	.word	0x20000090
 8000474:	40013800 	.word	0x40013800

08000478 <MX_USART2_UART_Init>:
/**
  * @brief USART2 Initialization Function
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  huart2.Instance = USART2;
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 800047e:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <MX_USART2_UART_Init+0x5c>)
 8000480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 8000484:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004b4:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_USART2_UART_Init+0x58>)
 80004bc:	f002 f96c 	bl	8002798 <HAL_UART_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004c6:	f000 f84b 	bl	8000560 <Error_Handler>
  }
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	20000118 	.word	0x20000118
 80004d4:	40004400 	.word	0x40004400

080004d8 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b08b      	sub	sp, #44	@ 0x2c
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ee:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_GPIO_Init+0x84>)
 80004f0:	695b      	ldr	r3, [r3, #20]
 80004f2:	4a1a      	ldr	r2, [pc, #104]	@ (800055c <MX_GPIO_Init+0x84>)
 80004f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004f8:	6153      	str	r3, [r2, #20]
 80004fa:	4b18      	ldr	r3, [pc, #96]	@ (800055c <MX_GPIO_Init+0x84>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000502:	613b      	str	r3, [r7, #16]
 8000504:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <MX_GPIO_Init+0x84>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a14      	ldr	r2, [pc, #80]	@ (800055c <MX_GPIO_Init+0x84>)
 800050c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b12      	ldr	r3, [pc, #72]	@ (800055c <MX_GPIO_Init+0x84>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_GPIO_Init+0x84>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <MX_GPIO_Init+0x84>)
 8000524:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <MX_GPIO_Init+0x84>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000536:	4b09      	ldr	r3, [pc, #36]	@ (800055c <MX_GPIO_Init+0x84>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a08      	ldr	r2, [pc, #32]	@ (800055c <MX_GPIO_Init+0x84>)
 800053c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b06      	ldr	r3, [pc, #24]	@ (800055c <MX_GPIO_Init+0x84>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
}
 800054e:	bf00      	nop
 8000550:	372c      	adds	r7, #44	@ 0x2c
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
 800055a:	bf00      	nop
 800055c:	40021000 	.word	0x40021000

08000560 <Error_Handler>:
/**
  * @brief Error Handler
  * @retval None
  */
void Error_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000564:	b672      	cpsid	i
}
 8000566:	bf00      	nop
  __disable_irq();
  while (1)
 8000568:	bf00      	nop
 800056a:	e7fd      	b.n	8000568 <Error_Handler+0x8>

0800056c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000572:	4b0f      	ldr	r3, [pc, #60]	@ (80005b0 <HAL_MspInit+0x44>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	4a0e      	ldr	r2, [pc, #56]	@ (80005b0 <HAL_MspInit+0x44>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6193      	str	r3, [r2, #24]
 800057e:	4b0c      	ldr	r3, [pc, #48]	@ (80005b0 <HAL_MspInit+0x44>)
 8000580:	699b      	ldr	r3, [r3, #24]
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800058a:	4b09      	ldr	r3, [pc, #36]	@ (80005b0 <HAL_MspInit+0x44>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	4a08      	ldr	r2, [pc, #32]	@ (80005b0 <HAL_MspInit+0x44>)
 8000590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000594:	61d3      	str	r3, [r2, #28]
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <HAL_MspInit+0x44>)
 8000598:	69db      	ldr	r3, [r3, #28]
 800059a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80005a2:	2007      	movs	r0, #7
 80005a4:	f000 faa8 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a8:	bf00      	nop
 80005aa:	3708      	adds	r7, #8
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08c      	sub	sp, #48	@ 0x30
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a2f      	ldr	r2, [pc, #188]	@ (8000690 <HAL_UART_MspInit+0xdc>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d12a      	bne.n	800062c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 80005d8:	699b      	ldr	r3, [r3, #24]
 80005da:	4a2e      	ldr	r2, [pc, #184]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 80005dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e0:	6193      	str	r3, [r2, #24]
 80005e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 80005e4:	699b      	ldr	r3, [r3, #24]
 80005e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005ea:	61bb      	str	r3, [r7, #24]
 80005ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	4b29      	ldr	r3, [pc, #164]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a28      	ldr	r2, [pc, #160]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 80005f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b26      	ldr	r3, [pc, #152]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000602:	617b      	str	r3, [r7, #20]
 8000604:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000606:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800060a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000618:	2307      	movs	r3, #7
 800061a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000626:	f000 fa9b 	bl	8000b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800062a:	e02d      	b.n	8000688 <HAL_UART_MspInit+0xd4>
  else if(huart->Instance==USART2)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a19      	ldr	r2, [pc, #100]	@ (8000698 <HAL_UART_MspInit+0xe4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d128      	bne.n	8000688 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000636:	4b17      	ldr	r3, [pc, #92]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 8000638:	69db      	ldr	r3, [r3, #28]
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 800063c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000640:	61d3      	str	r3, [r2, #28]
 8000642:	4b14      	ldr	r3, [pc, #80]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b11      	ldr	r3, [pc, #68]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a10      	ldr	r2, [pc, #64]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b0e      	ldr	r3, [pc, #56]	@ (8000694 <HAL_UART_MspInit+0xe0>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000666:	230c      	movs	r3, #12
 8000668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	2302      	movs	r3, #2
 800066c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000676:	2307      	movs	r3, #7
 8000678:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	4619      	mov	r1, r3
 8000680:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000684:	f000 fa6c 	bl	8000b60 <HAL_GPIO_Init>
}
 8000688:	bf00      	nop
 800068a:	3730      	adds	r7, #48	@ 0x30
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40013800 	.word	0x40013800
 8000694:	40021000 	.word	0x40021000
 8000698:	40004400 	.word	0x40004400

0800069c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006a0:	bf00      	nop
 80006a2:	e7fd      	b.n	80006a0 <NMI_Handler+0x4>

080006a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <MemManage_Handler+0x4>

080006b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr

080006e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr

080006ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ee:	b580      	push	{r7, lr}
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f2:	f000 f90b 	bl	800090c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}

080006fa <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b086      	sub	sp, #24
 80006fe:	af00      	add	r7, sp, #0
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	e00a      	b.n	8000722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800070c:	f3af 8000 	nop.w
 8000710:	4601      	mov	r1, r0
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	1c5a      	adds	r2, r3, #1
 8000716:	60ba      	str	r2, [r7, #8]
 8000718:	b2ca      	uxtb	r2, r1
 800071a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	3301      	adds	r3, #1
 8000720:	617b      	str	r3, [r7, #20]
 8000722:	697a      	ldr	r2, [r7, #20]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	dbf0      	blt.n	800070c <_read+0x12>
  }

  return len;
 800072a:	687b      	ldr	r3, [r7, #4]
}
 800072c:	4618      	mov	r0, r3
 800072e:	3718      	adds	r7, #24
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800073c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000740:	4618      	mov	r0, r3
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800075c:	605a      	str	r2, [r3, #4]
  return 0;
 800075e:	2300      	movs	r3, #0
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <_isatty>:

int _isatty(int file)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000774:	2301      	movs	r3, #1
}
 8000776:	4618      	mov	r0, r3
 8000778:	370c      	adds	r7, #12
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr

08000782 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000782:	b480      	push	{r7}
 8000784:	b085      	sub	sp, #20
 8000786:	af00      	add	r7, sp, #0
 8000788:	60f8      	str	r0, [r7, #12]
 800078a:	60b9      	str	r1, [r7, #8]
 800078c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800078e:	2300      	movs	r3, #0
}
 8000790:	4618      	mov	r0, r3
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007a4:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <_sbrk+0x5c>)
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <_sbrk+0x60>)
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007b0:	4b13      	ldr	r3, [pc, #76]	@ (8000800 <_sbrk+0x64>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d102      	bne.n	80007be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <_sbrk+0x64>)
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <_sbrk+0x68>)
 80007bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007be:	4b10      	ldr	r3, [pc, #64]	@ (8000800 <_sbrk+0x64>)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4413      	add	r3, r2
 80007c6:	693a      	ldr	r2, [r7, #16]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d207      	bcs.n	80007dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007cc:	f002 ffcc 	bl	8003768 <__errno>
 80007d0:	4603      	mov	r3, r0
 80007d2:	220c      	movs	r2, #12
 80007d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295
 80007da:	e009      	b.n	80007f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <_sbrk+0x64>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80007e2:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <_sbrk+0x64>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4413      	add	r3, r2
 80007ea:	4a05      	ldr	r2, [pc, #20]	@ (8000800 <_sbrk+0x64>)
 80007ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80007ee:	68fb      	ldr	r3, [r7, #12]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3718      	adds	r7, #24
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20010000 	.word	0x20010000
 80007fc:	00000400 	.word	0x00000400
 8000800:	200001ac 	.word	0x200001ac
 8000804:	20000300 	.word	0x20000300

08000808 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800080c:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <SystemInit+0x20>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <SystemInit+0x20>)
 8000814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800082c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000864 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff ffea 	bl	8000808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480c      	ldr	r0, [pc, #48]	@ (8000868 <LoopForever+0x6>)
  ldr r1, =_edata
 8000836:	490d      	ldr	r1, [pc, #52]	@ (800086c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000838:	4a0d      	ldr	r2, [pc, #52]	@ (8000870 <LoopForever+0xe>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <LoopForever+0x12>)
  ldr r4, =_ebss
 800084c:	4c0a      	ldr	r4, [pc, #40]	@ (8000878 <LoopForever+0x16>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f002 ff8b 	bl	8003774 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800085e:	f7ff fd0f 	bl	8000280 <main>

08000862 <LoopForever>:

LoopForever:
    b LoopForever
 8000862:	e7fe      	b.n	8000862 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000864:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800086c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000870:	080042d0 	.word	0x080042d0
  ldr r2, =_sbss
 8000874:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000878:	20000300 	.word	0x20000300

0800087c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800087c:	e7fe      	b.n	800087c <ADC1_2_IRQHandler>
	...

08000880 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000884:	4b08      	ldr	r3, [pc, #32]	@ (80008a8 <HAL_Init+0x28>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a07      	ldr	r2, [pc, #28]	@ (80008a8 <HAL_Init+0x28>)
 800088a:	f043 0310 	orr.w	r3, r3, #16
 800088e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000890:	2003      	movs	r0, #3
 8000892:	f000 f931 	bl	8000af8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000896:	2000      	movs	r0, #0
 8000898:	f000 f808 	bl	80008ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800089c:	f7ff fe66 	bl	800056c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40022000 	.word	0x40022000

080008ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_InitTick+0x54>)
 80008b6:	681a      	ldr	r2, [r3, #0]
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <HAL_InitTick+0x58>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 f93b 	bl	8000b46 <HAL_SYSTICK_Config>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	e00e      	b.n	80008f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b0f      	cmp	r3, #15
 80008de:	d80a      	bhi.n	80008f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008e0:	2200      	movs	r2, #0
 80008e2:	6879      	ldr	r1, [r7, #4]
 80008e4:	f04f 30ff 	mov.w	r0, #4294967295
 80008e8:	f000 f911 	bl	8000b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ec:	4a06      	ldr	r2, [pc, #24]	@ (8000908 <HAL_InitTick+0x5c>)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e000      	b.n	80008f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	2000000c 	.word	0x2000000c
 8000904:	20000014 	.word	0x20000014
 8000908:	20000010 	.word	0x20000010

0800090c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <HAL_IncTick+0x20>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	461a      	mov	r2, r3
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <HAL_IncTick+0x24>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4413      	add	r3, r2
 800091c:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <HAL_IncTick+0x24>)
 800091e:	6013      	str	r3, [r2, #0]
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	20000014 	.word	0x20000014
 8000930:	200001b0 	.word	0x200001b0

08000934 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return uwTick;  
 8000938:	4b03      	ldr	r3, [pc, #12]	@ (8000948 <HAL_GetTick+0x14>)
 800093a:	681b      	ldr	r3, [r3, #0]
}
 800093c:	4618      	mov	r0, r3
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	200001b0 	.word	0x200001b0

0800094c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000954:	f7ff ffee 	bl	8000934 <HAL_GetTick>
 8000958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000964:	d005      	beq.n	8000972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000966:	4b0a      	ldr	r3, [pc, #40]	@ (8000990 <HAL_Delay+0x44>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	4413      	add	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000972:	bf00      	nop
 8000974:	f7ff ffde 	bl	8000934 <HAL_GetTick>
 8000978:	4602      	mov	r2, r0
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	68fa      	ldr	r2, [r7, #12]
 8000980:	429a      	cmp	r2, r3
 8000982:	d8f7      	bhi.n	8000974 <HAL_Delay+0x28>
  {
  }
}
 8000984:	bf00      	nop
 8000986:	bf00      	nop
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000014 	.word	0x20000014

08000994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000994:	b480      	push	{r7}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009b0:	4013      	ands	r3, r2
 80009b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009c6:	4a04      	ldr	r2, [pc, #16]	@ (80009d8 <__NVIC_SetPriorityGrouping+0x44>)
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	60d3      	str	r3, [r2, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000ed00 	.word	0xe000ed00

080009dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__NVIC_GetPriorityGrouping+0x18>)
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	0a1b      	lsrs	r3, r3, #8
 80009e6:	f003 0307 	and.w	r3, r3, #7
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	6039      	str	r1, [r7, #0]
 8000a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	db0a      	blt.n	8000a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	490c      	ldr	r1, [pc, #48]	@ (8000a44 <__NVIC_SetPriority+0x4c>)
 8000a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a16:	0112      	lsls	r2, r2, #4
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	440b      	add	r3, r1
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a20:	e00a      	b.n	8000a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	b2da      	uxtb	r2, r3
 8000a26:	4908      	ldr	r1, [pc, #32]	@ (8000a48 <__NVIC_SetPriority+0x50>)
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	f003 030f 	and.w	r3, r3, #15
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	0112      	lsls	r2, r2, #4
 8000a32:	b2d2      	uxtb	r2, r2
 8000a34:	440b      	add	r3, r1
 8000a36:	761a      	strb	r2, [r3, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000e100 	.word	0xe000e100
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b089      	sub	sp, #36	@ 0x24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	f1c3 0307 	rsb	r3, r3, #7
 8000a66:	2b04      	cmp	r3, #4
 8000a68:	bf28      	it	cs
 8000a6a:	2304      	movcs	r3, #4
 8000a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	3304      	adds	r3, #4
 8000a72:	2b06      	cmp	r3, #6
 8000a74:	d902      	bls.n	8000a7c <NVIC_EncodePriority+0x30>
 8000a76:	69fb      	ldr	r3, [r7, #28]
 8000a78:	3b03      	subs	r3, #3
 8000a7a:	e000      	b.n	8000a7e <NVIC_EncodePriority+0x32>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a80:	f04f 32ff 	mov.w	r2, #4294967295
 8000a84:	69bb      	ldr	r3, [r7, #24]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	43da      	mvns	r2, r3
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	401a      	ands	r2, r3
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a94:	f04f 31ff 	mov.w	r1, #4294967295
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43d9      	mvns	r1, r3
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	4313      	orrs	r3, r2
         );
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3724      	adds	r7, #36	@ 0x24
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
	...

08000ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ac4:	d301      	bcc.n	8000aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00f      	b.n	8000aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aca:	4a0a      	ldr	r2, [pc, #40]	@ (8000af4 <SysTick_Config+0x40>)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad2:	210f      	movs	r1, #15
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f7ff ff8e 	bl	80009f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <SysTick_Config+0x40>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae2:	4b04      	ldr	r3, [pc, #16]	@ (8000af4 <SysTick_Config+0x40>)
 8000ae4:	2207      	movs	r2, #7
 8000ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ae8:	2300      	movs	r3, #0
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	e000e010 	.word	0xe000e010

08000af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff ff47 	bl	8000994 <__NVIC_SetPriorityGrouping>
}
 8000b06:	bf00      	nop
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b086      	sub	sp, #24
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	4603      	mov	r3, r0
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
 8000b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b20:	f7ff ff5c 	bl	80009dc <__NVIC_GetPriorityGrouping>
 8000b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b26:	687a      	ldr	r2, [r7, #4]
 8000b28:	68b9      	ldr	r1, [r7, #8]
 8000b2a:	6978      	ldr	r0, [r7, #20]
 8000b2c:	f7ff ff8e 	bl	8000a4c <NVIC_EncodePriority>
 8000b30:	4602      	mov	r2, r0
 8000b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b36:	4611      	mov	r1, r2
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ff5d 	bl	80009f8 <__NVIC_SetPriority>
}
 8000b3e:	bf00      	nop
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f7ff ffb0 	bl	8000ab4 <SysTick_Config>
 8000b54:	4603      	mov	r3, r0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
	...

08000b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6e:	e160      	b.n	8000e32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8152 	beq.w	8000e2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	2b01      	cmp	r3, #1
 8000b92:	d005      	beq.n	8000ba0 <HAL_GPIO_Init+0x40>
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	f003 0303 	and.w	r3, r3, #3
 8000b9c:	2b02      	cmp	r3, #2
 8000b9e:	d130      	bne.n	8000c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	689b      	ldr	r3, [r3, #8]
 8000ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	2203      	movs	r2, #3
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	43db      	mvns	r3, r3
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa02 f303 	lsl.w	r3, r2, r3
 8000bde:	43db      	mvns	r3, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4013      	ands	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	091b      	lsrs	r3, r3, #4
 8000bec:	f003 0201 	and.w	r2, r3, #1
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	d017      	beq.n	8000c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	68db      	ldr	r3, [r3, #12]
 8000c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	2203      	movs	r2, #3
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	4013      	ands	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	689a      	ldr	r2, [r3, #8]
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f003 0303 	and.w	r3, r3, #3
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d123      	bne.n	8000c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	08da      	lsrs	r2, r3, #3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	3208      	adds	r2, #8
 8000c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	009b      	lsls	r3, r3, #2
 8000c60:	220f      	movs	r2, #15
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	691a      	ldr	r2, [r3, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	f003 0307 	and.w	r3, r3, #7
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	08da      	lsrs	r2, r3, #3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3208      	adds	r2, #8
 8000c8c:	6939      	ldr	r1, [r7, #16]
 8000c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	693a      	ldr	r2, [r7, #16]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f003 0203 	and.w	r2, r3, #3
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e50 <HAL_GPIO_Init+0x2f0>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cec:	4a59      	ldr	r2, [pc, #356]	@ (8000e54 <HAL_GPIO_Init+0x2f4>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000d16:	d025      	beq.n	8000d64 <HAL_GPIO_Init+0x204>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a4f      	ldr	r2, [pc, #316]	@ (8000e58 <HAL_GPIO_Init+0x2f8>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d01f      	beq.n	8000d60 <HAL_GPIO_Init+0x200>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a4e      	ldr	r2, [pc, #312]	@ (8000e5c <HAL_GPIO_Init+0x2fc>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d019      	beq.n	8000d5c <HAL_GPIO_Init+0x1fc>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	@ (8000e60 <HAL_GPIO_Init+0x300>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d013      	beq.n	8000d58 <HAL_GPIO_Init+0x1f8>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4a4c      	ldr	r2, [pc, #304]	@ (8000e64 <HAL_GPIO_Init+0x304>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d00d      	beq.n	8000d54 <HAL_GPIO_Init+0x1f4>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e68 <HAL_GPIO_Init+0x308>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d007      	beq.n	8000d50 <HAL_GPIO_Init+0x1f0>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4a4a      	ldr	r2, [pc, #296]	@ (8000e6c <HAL_GPIO_Init+0x30c>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d101      	bne.n	8000d4c <HAL_GPIO_Init+0x1ec>
 8000d48:	2306      	movs	r3, #6
 8000d4a:	e00c      	b.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d4c:	2307      	movs	r3, #7
 8000d4e:	e00a      	b.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d50:	2305      	movs	r3, #5
 8000d52:	e008      	b.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d54:	2304      	movs	r3, #4
 8000d56:	e006      	b.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e004      	b.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	e002      	b.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <HAL_GPIO_Init+0x206>
 8000d64:	2300      	movs	r3, #0
 8000d66:	697a      	ldr	r2, [r7, #20]
 8000d68:	f002 0203 	and.w	r2, r2, #3
 8000d6c:	0092      	lsls	r2, r2, #2
 8000d6e:	4093      	lsls	r3, r2
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d76:	4937      	ldr	r1, [pc, #220]	@ (8000e54 <HAL_GPIO_Init+0x2f4>)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d84:	4b3a      	ldr	r3, [pc, #232]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d003      	beq.n	8000da8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000da8:	4a31      	ldr	r2, [pc, #196]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dae:	4b30      	ldr	r3, [pc, #192]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000db0:	68db      	ldr	r3, [r3, #12]
 8000db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d003      	beq.n	8000dd2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dd2:	4a27      	ldr	r2, [pc, #156]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000dfe:	693b      	ldr	r3, [r7, #16]
 8000e00:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d003      	beq.n	8000e26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e26:	4a12      	ldr	r2, [pc, #72]	@ (8000e70 <HAL_GPIO_Init+0x310>)
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	fa22 f303 	lsr.w	r3, r2, r3
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f47f ae97 	bne.w	8000b70 <HAL_GPIO_Init+0x10>
  }
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	371c      	adds	r7, #28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010000 	.word	0x40010000
 8000e58:	48000400 	.word	0x48000400
 8000e5c:	48000800 	.word	0x48000800
 8000e60:	48000c00 	.word	0x48000c00
 8000e64:	48001000 	.word	0x48001000
 8000e68:	48001400 	.word	0x48001400
 8000e6c:	48001800 	.word	0x48001800
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e84:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f001 b83a 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000e9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f000 816f 	beq.w	800118e <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000eb0:	4bb5      	ldr	r3, [pc, #724]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 030c 	and.w	r3, r3, #12
 8000eb8:	2b04      	cmp	r3, #4
 8000eba:	d00c      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ebc:	4bb2      	ldr	r3, [pc, #712]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f003 030c 	and.w	r3, r3, #12
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d15c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x10e>
 8000ec8:	4baf      	ldr	r3, [pc, #700]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000ed0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ed4:	d155      	bne.n	8000f82 <HAL_RCC_OscConfig+0x10e>
 8000ed6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000eda:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ede:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8000ee2:	fa93 f3a3 	rbit	r3, r3
 8000ee6:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000eea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eee:	fab3 f383 	clz	r3, r3
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	095b      	lsrs	r3, r3, #5
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d102      	bne.n	8000f08 <HAL_RCC_OscConfig+0x94>
 8000f02:	4ba1      	ldr	r3, [pc, #644]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	e015      	b.n	8000f34 <HAL_RCC_OscConfig+0xc0>
 8000f08:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f0c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8000f14:	fa93 f3a3 	rbit	r3, r3
 8000f18:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8000f1c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000f20:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8000f24:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8000f28:	fa93 f3a3 	rbit	r3, r3
 8000f2c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8000f30:	4b95      	ldr	r3, [pc, #596]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000f38:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8000f3c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8000f40:	fa92 f2a2 	rbit	r2, r2
 8000f44:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8000f48:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8000f4c:	fab2 f282 	clz	r2, r2
 8000f50:	b2d2      	uxtb	r2, r2
 8000f52:	f042 0220 	orr.w	r2, r2, #32
 8000f56:	b2d2      	uxtb	r2, r2
 8000f58:	f002 021f 	and.w	r2, r2, #31
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	f000 8111 	beq.w	800118c <HAL_RCC_OscConfig+0x318>
 8000f6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f6e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f040 8108 	bne.w	800118c <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	f000 bfc6 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000f86:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f92:	d106      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12e>
 8000f94:	4b7c      	ldr	r3, [pc, #496]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a7b      	ldr	r2, [pc, #492]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	e036      	b.n	8001010 <HAL_RCC_OscConfig+0x19c>
 8000fa2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fa6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d10c      	bne.n	8000fcc <HAL_RCC_OscConfig+0x158>
 8000fb2:	4b75      	ldr	r3, [pc, #468]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a74      	ldr	r2, [pc, #464]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000fb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	4b72      	ldr	r3, [pc, #456]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a71      	ldr	r2, [pc, #452]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000fc4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e021      	b.n	8001010 <HAL_RCC_OscConfig+0x19c>
 8000fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000fd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x184>
 8000fde:	4b6a      	ldr	r3, [pc, #424]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a69      	ldr	r2, [pc, #420]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b67      	ldr	r3, [pc, #412]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a66      	ldr	r2, [pc, #408]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0x19c>
 8000ff8:	4b63      	ldr	r3, [pc, #396]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a62      	ldr	r2, [pc, #392]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b60      	ldr	r3, [pc, #384]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a5f      	ldr	r2, [pc, #380]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001014:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d059      	beq.n	80010d4 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001020:	f7ff fc88 	bl	8000934 <HAL_GetTick>
 8001024:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001028:	e00a      	b.n	8001040 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800102a:	f7ff fc83 	bl	8000934 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	2b64      	cmp	r3, #100	@ 0x64
 8001038:	d902      	bls.n	8001040 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800103a:	2303      	movs	r3, #3
 800103c:	f000 bf67 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001040:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001044:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001048:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800104c:	fa93 f3a3 	rbit	r3, r3
 8001050:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001054:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001058:	fab3 f383 	clz	r3, r3
 800105c:	b2db      	uxtb	r3, r3
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b01      	cmp	r3, #1
 800106a:	d102      	bne.n	8001072 <HAL_RCC_OscConfig+0x1fe>
 800106c:	4b46      	ldr	r3, [pc, #280]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	e015      	b.n	800109e <HAL_RCC_OscConfig+0x22a>
 8001072:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001076:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001086:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800108a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800108e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001092:	fa93 f3a3 	rbit	r3, r3
 8001096:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800109a:	4b3b      	ldr	r3, [pc, #236]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 800109c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80010a2:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80010a6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80010aa:	fa92 f2a2 	rbit	r2, r2
 80010ae:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80010b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80010b6:	fab2 f282 	clz	r2, r2
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	f042 0220 	orr.w	r2, r2, #32
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	f002 021f 	and.w	r2, r2, #31
 80010c6:	2101      	movs	r1, #1
 80010c8:	fa01 f202 	lsl.w	r2, r1, r2
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d0ab      	beq.n	800102a <HAL_RCC_OscConfig+0x1b6>
 80010d2:	e05c      	b.n	800118e <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc2e 	bl	8000934 <HAL_GetTick>
 80010d8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010dc:	e00a      	b.n	80010f4 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fc29 	bl	8000934 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b64      	cmp	r3, #100	@ 0x64
 80010ec:	d902      	bls.n	80010f4 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	f000 bf0d 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
 80010f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010f8:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8001100:	fa93 f3a3 	rbit	r3, r3
 8001104:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8001108:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800110c:	fab3 f383 	clz	r3, r3
 8001110:	b2db      	uxtb	r3, r3
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	b2db      	uxtb	r3, r3
 800111c:	2b01      	cmp	r3, #1
 800111e:	d102      	bne.n	8001126 <HAL_RCC_OscConfig+0x2b2>
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	e015      	b.n	8001152 <HAL_RCC_OscConfig+0x2de>
 8001126:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800112a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001132:	fa93 f3a3 	rbit	r3, r3
 8001136:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800113a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800113e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001142:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001146:	fa93 f3a3 	rbit	r3, r3
 800114a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <HAL_RCC_OscConfig+0x314>)
 8001150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001152:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001156:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800115a:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800115e:	fa92 f2a2 	rbit	r2, r2
 8001162:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8001166:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800116a:	fab2 f282 	clz	r2, r2
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	f042 0220 	orr.w	r2, r2, #32
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	f002 021f 	and.w	r2, r2, #31
 800117a:	2101      	movs	r1, #1
 800117c:	fa01 f202 	lsl.w	r2, r1, r2
 8001180:	4013      	ands	r3, r2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1ab      	bne.n	80010de <HAL_RCC_OscConfig+0x26a>
 8001186:	e002      	b.n	800118e <HAL_RCC_OscConfig+0x31a>
 8001188:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001192:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 817f 	beq.w	80014a2 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011a4:	4ba7      	ldr	r3, [pc, #668]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 030c 	and.w	r3, r3, #12
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d00c      	beq.n	80011ca <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011b0:	4ba4      	ldr	r3, [pc, #656]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 030c 	and.w	r3, r3, #12
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	d173      	bne.n	80012a4 <HAL_RCC_OscConfig+0x430>
 80011bc:	4ba1      	ldr	r3, [pc, #644]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80011c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80011c8:	d16c      	bne.n	80012a4 <HAL_RCC_OscConfig+0x430>
 80011ca:	2302      	movs	r3, #2
 80011cc:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80011dc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	095b      	lsrs	r3, r3, #5
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d102      	bne.n	80011fa <HAL_RCC_OscConfig+0x386>
 80011f4:	4b93      	ldr	r3, [pc, #588]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	e013      	b.n	8001222 <HAL_RCC_OscConfig+0x3ae>
 80011fa:	2302      	movs	r3, #2
 80011fc:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 800120c:	2302      	movs	r3, #2
 800120e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001212:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800121e:	4b89      	ldr	r3, [pc, #548]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 8001220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001222:	2202      	movs	r2, #2
 8001224:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8001228:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 800122c:	fa92 f2a2 	rbit	r2, r2
 8001230:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001234:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	f002 021f 	and.w	r2, r2, #31
 8001248:	2101      	movs	r1, #1
 800124a:	fa01 f202 	lsl.w	r2, r1, r2
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00a      	beq.n	800126a <HAL_RCC_OscConfig+0x3f6>
 8001254:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001258:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d002      	beq.n	800126a <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	f000 be52 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b76      	ldr	r3, [pc, #472]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001272:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001276:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	21f8      	movs	r1, #248	@ 0xf8
 8001280:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8001288:	fa91 f1a1 	rbit	r1, r1
 800128c:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001290:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001294:	fab1 f181 	clz	r1, r1
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	408b      	lsls	r3, r1
 800129c:	4969      	ldr	r1, [pc, #420]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012a2:	e0fe      	b.n	80014a2 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80012a8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8088 	beq.w	80013c6 <HAL_RCC_OscConfig+0x552>
 80012b6:	2301      	movs	r3, #1
 80012b8:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80012c0:	fa93 f3a3 	rbit	r3, r3
 80012c4:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80012c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80012d6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	461a      	mov	r2, r3
 80012de:	2301      	movs	r3, #1
 80012e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e2:	f7ff fb27 	bl	8000934 <HAL_GetTick>
 80012e6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ec:	f7ff fb22 	bl	8000934 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80012f6:	1ad3      	subs	r3, r2, r3
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d902      	bls.n	8001302 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80012fc:	2303      	movs	r3, #3
 80012fe:	f000 be06 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8001314:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	b2db      	uxtb	r3, r3
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b01      	cmp	r3, #1
 800132a:	d102      	bne.n	8001332 <HAL_RCC_OscConfig+0x4be>
 800132c:	4b45      	ldr	r3, [pc, #276]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	e013      	b.n	800135a <HAL_RCC_OscConfig+0x4e6>
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001338:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800133c:	fa93 f3a3 	rbit	r3, r3
 8001340:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001344:	2302      	movs	r3, #2
 8001346:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800134a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001356:	4b3b      	ldr	r3, [pc, #236]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	2202      	movs	r2, #2
 800135c:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001360:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001364:	fa92 f2a2 	rbit	r2, r2
 8001368:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 800136c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001370:	fab2 f282 	clz	r2, r2
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	f042 0220 	orr.w	r2, r2, #32
 800137a:	b2d2      	uxtb	r2, r2
 800137c:	f002 021f 	and.w	r2, r2, #31
 8001380:	2101      	movs	r1, #1
 8001382:	fa01 f202 	lsl.w	r2, r1, r2
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0af      	beq.n	80012ec <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138c:	4b2d      	ldr	r3, [pc, #180]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001394:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001398:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	21f8      	movs	r1, #248	@ 0xf8
 80013a2:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a6:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80013aa:	fa91 f1a1 	rbit	r1, r1
 80013ae:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80013b2:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80013b6:	fab1 f181 	clz	r1, r1
 80013ba:	b2c9      	uxtb	r1, r1
 80013bc:	408b      	lsls	r3, r1
 80013be:	4921      	ldr	r1, [pc, #132]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e06d      	b.n	80014a2 <HAL_RCC_OscConfig+0x62e>
 80013c6:	2301      	movs	r3, #1
 80013c8:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013cc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80013d0:	fa93 f3a3 	rbit	r3, r3
 80013d4:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80013d8:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013dc:	fab3 f383 	clz	r3, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80013e6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	461a      	mov	r2, r3
 80013ee:	2300      	movs	r3, #0
 80013f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f2:	f7ff fa9f 	bl	8000934 <HAL_GetTick>
 80013f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fa:	e00a      	b.n	8001412 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013fc:	f7ff fa9a 	bl	8000934 <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d902      	bls.n	8001412 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	f000 bd7e 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001412:	2302      	movs	r3, #2
 8001414:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800141c:	fa93 f3a3 	rbit	r3, r3
 8001420:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001424:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001428:	fab3 f383 	clz	r3, r3
 800142c:	b2db      	uxtb	r3, r3
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d105      	bne.n	8001448 <HAL_RCC_OscConfig+0x5d4>
 800143c:	4b01      	ldr	r3, [pc, #4]	@ (8001444 <HAL_RCC_OscConfig+0x5d0>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	e016      	b.n	8001470 <HAL_RCC_OscConfig+0x5fc>
 8001442:	bf00      	nop
 8001444:	40021000 	.word	0x40021000
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800145a:	2302      	movs	r3, #2
 800145c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001460:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001464:	fa93 f3a3 	rbit	r3, r3
 8001468:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 800146c:	4bbf      	ldr	r3, [pc, #764]	@ (800176c <HAL_RCC_OscConfig+0x8f8>)
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001470:	2202      	movs	r2, #2
 8001472:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8001476:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800147a:	fa92 f2a2 	rbit	r2, r2
 800147e:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001482:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001486:	fab2 f282 	clz	r2, r2
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	f042 0220 	orr.w	r2, r2, #32
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	f002 021f 	and.w	r2, r2, #31
 8001496:	2101      	movs	r1, #1
 8001498:	fa01 f202 	lsl.w	r2, r1, r2
 800149c:	4013      	ands	r3, r2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1ac      	bne.n	80013fc <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0308 	and.w	r3, r3, #8
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8113 	beq.w	80016de <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80014bc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	695b      	ldr	r3, [r3, #20]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d07c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x74e>
 80014c8:	2301      	movs	r3, #1
 80014ca:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80014da:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014de:	fab3 f383 	clz	r3, r3
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	461a      	mov	r2, r3
 80014e6:	4ba2      	ldr	r3, [pc, #648]	@ (8001770 <HAL_RCC_OscConfig+0x8fc>)
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	461a      	mov	r2, r3
 80014ee:	2301      	movs	r3, #1
 80014f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fa1f 	bl	8000934 <HAL_GetTick>
 80014f6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	e00a      	b.n	8001512 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014fc:	f7ff fa1a 	bl	8000934 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d902      	bls.n	8001512 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	f000 bcfe 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001512:	2302      	movs	r3, #2
 8001514:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001518:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800151c:	fa93 f2a3 	rbit	r2, r3
 8001520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001524:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800152e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001532:	2202      	movs	r2, #2
 8001534:	601a      	str	r2, [r3, #0]
 8001536:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800153a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	fa93 f2a3 	rbit	r2, r3
 8001544:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001548:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001552:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001556:	2202      	movs	r2, #2
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800155e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	fa93 f2a3 	rbit	r2, r3
 8001568:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800156c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001570:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001572:	4b7e      	ldr	r3, [pc, #504]	@ (800176c <HAL_RCC_OscConfig+0x8f8>)
 8001574:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001576:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800157a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800157e:	2102      	movs	r1, #2
 8001580:	6019      	str	r1, [r3, #0]
 8001582:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001586:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	fa93 f1a3 	rbit	r1, r3
 8001590:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001594:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001598:	6019      	str	r1, [r3, #0]
  return result;
 800159a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800159e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	4013      	ands	r3, r2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d09d      	beq.n	80014fc <HAL_RCC_OscConfig+0x688>
 80015c0:	e08d      	b.n	80016de <HAL_RCC_OscConfig+0x86a>
 80015c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015c6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015d2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	fa93 f2a3 	rbit	r2, r3
 80015dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015e0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015e4:	601a      	str	r2, [r3, #0]
  return result;
 80015e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80015ea:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80015ee:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	fab3 f383 	clz	r3, r3
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b5d      	ldr	r3, [pc, #372]	@ (8001770 <HAL_RCC_OscConfig+0x8fc>)
 80015fa:	4413      	add	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	461a      	mov	r2, r3
 8001600:	2300      	movs	r3, #0
 8001602:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001604:	f7ff f996 	bl	8000934 <HAL_GetTick>
 8001608:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800160c:	e00a      	b.n	8001624 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff f991 	bl	8000934 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d902      	bls.n	8001624 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	f000 bc75 	b.w	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001624:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001628:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800162c:	2202      	movs	r2, #2
 800162e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001630:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001634:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001642:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800164c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001650:	2202      	movs	r2, #2
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001658:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	fa93 f2a3 	rbit	r2, r3
 8001662:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001666:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001670:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001674:	2202      	movs	r2, #2
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800167c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	fa93 f2a3 	rbit	r2, r3
 8001686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800168e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001690:	4b36      	ldr	r3, [pc, #216]	@ (800176c <HAL_RCC_OscConfig+0x8f8>)
 8001692:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001698:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800169c:	2102      	movs	r1, #2
 800169e:	6019      	str	r1, [r3, #0]
 80016a0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016a4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	fa93 f1a3 	rbit	r1, r3
 80016ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016b2:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016b6:	6019      	str	r1, [r3, #0]
  return result;
 80016b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016bc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	fab3 f383 	clz	r3, r3
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d197      	bne.n	800160e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80016e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0304 	and.w	r3, r3, #4
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 81a5 	beq.w	8001a3e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fa:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <HAL_RCC_OscConfig+0x8f8>)
 80016fc:	69db      	ldr	r3, [r3, #28]
 80016fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d116      	bne.n	8001734 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b19      	ldr	r3, [pc, #100]	@ (800176c <HAL_RCC_OscConfig+0x8f8>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a18      	ldr	r2, [pc, #96]	@ (800176c <HAL_RCC_OscConfig+0x8f8>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b16      	ldr	r3, [pc, #88]	@ (800176c <HAL_RCC_OscConfig+0x8f8>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800171a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800171e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001728:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800172c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800172e:	2301      	movs	r3, #1
 8001730:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <HAL_RCC_OscConfig+0x900>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800173c:	2b00      	cmp	r3, #0
 800173e:	d121      	bne.n	8001784 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001740:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <HAL_RCC_OscConfig+0x900>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0b      	ldr	r2, [pc, #44]	@ (8001774 <HAL_RCC_OscConfig+0x900>)
 8001746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800174a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800174c:	f7ff f8f2 	bl	8000934 <HAL_GetTick>
 8001750:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	e010      	b.n	8001778 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001756:	f7ff f8ed 	bl	8000934 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	@ 0x64
 8001764:	d908      	bls.n	8001778 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e3d1      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
 800176a:	bf00      	nop
 800176c:	40021000 	.word	0x40021000
 8001770:	10908120 	.word	0x10908120
 8001774:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001778:	4b8d      	ldr	r3, [pc, #564]	@ (80019b0 <HAL_RCC_OscConfig+0xb3c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0e8      	beq.n	8001756 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001788:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d106      	bne.n	80017a2 <HAL_RCC_OscConfig+0x92e>
 8001794:	4b87      	ldr	r3, [pc, #540]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	4a86      	ldr	r2, [pc, #536]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	6213      	str	r3, [r2, #32]
 80017a0:	e035      	b.n	800180e <HAL_RCC_OscConfig+0x99a>
 80017a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017a6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d10c      	bne.n	80017cc <HAL_RCC_OscConfig+0x958>
 80017b2:	4b80      	ldr	r3, [pc, #512]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	4a7f      	ldr	r2, [pc, #508]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6213      	str	r3, [r2, #32]
 80017be:	4b7d      	ldr	r3, [pc, #500]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	4a7c      	ldr	r2, [pc, #496]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017c4:	f023 0304 	bic.w	r3, r3, #4
 80017c8:	6213      	str	r3, [r2, #32]
 80017ca:	e020      	b.n	800180e <HAL_RCC_OscConfig+0x99a>
 80017cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80017d0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b05      	cmp	r3, #5
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x982>
 80017dc:	4b75      	ldr	r3, [pc, #468]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017de:	6a1b      	ldr	r3, [r3, #32]
 80017e0:	4a74      	ldr	r2, [pc, #464]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6213      	str	r3, [r2, #32]
 80017e8:	4b72      	ldr	r3, [pc, #456]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4a71      	ldr	r2, [pc, #452]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6213      	str	r3, [r2, #32]
 80017f4:	e00b      	b.n	800180e <HAL_RCC_OscConfig+0x99a>
 80017f6:	4b6f      	ldr	r3, [pc, #444]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	4a6e      	ldr	r2, [pc, #440]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80017fc:	f023 0301 	bic.w	r3, r3, #1
 8001800:	6213      	str	r3, [r2, #32]
 8001802:	4b6c      	ldr	r3, [pc, #432]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	4a6b      	ldr	r2, [pc, #428]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 8001808:	f023 0304 	bic.w	r3, r3, #4
 800180c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800180e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001812:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	f000 8081 	beq.w	8001922 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001820:	f7ff f888 	bl	8000934 <HAL_GetTick>
 8001824:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001828:	e00b      	b.n	8001842 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff f883 	bl	8000934 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e365      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001846:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800184a:	2202      	movs	r2, #2
 800184c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001852:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	fa93 f2a3 	rbit	r2, r3
 800185c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001860:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800186a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800186e:	2202      	movs	r2, #2
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001876:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	fa93 f2a3 	rbit	r2, r3
 8001880:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001884:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001888:	601a      	str	r2, [r3, #0]
  return result;
 800188a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188e:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001892:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	b2db      	uxtb	r3, r3
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	b2db      	uxtb	r3, r3
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d102      	bne.n	80018ae <HAL_RCC_OscConfig+0xa3a>
 80018a8:	4b42      	ldr	r3, [pc, #264]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	e013      	b.n	80018d6 <HAL_RCC_OscConfig+0xa62>
 80018ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018b2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018be:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	fa93 f2a3 	rbit	r2, r3
 80018c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018cc:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	4b38      	ldr	r3, [pc, #224]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018da:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80018de:	2102      	movs	r1, #2
 80018e0:	6011      	str	r1, [r2, #0]
 80018e2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018e6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fa92 f1a2 	rbit	r1, r2
 80018f0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018f4:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80018f8:	6011      	str	r1, [r2, #0]
  return result;
 80018fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80018fe:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	fab2 f282 	clz	r2, r2
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	f002 021f 	and.w	r2, r2, #31
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	4013      	ands	r3, r2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d084      	beq.n	800182a <HAL_RCC_OscConfig+0x9b6>
 8001920:	e083      	b.n	8001a2a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001922:	f7ff f807 	bl	8000934 <HAL_GetTick>
 8001926:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800192a:	e00b      	b.n	8001944 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192c:	f7ff f802 	bl	8000934 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	@ 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e2e4      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001944:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001948:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800194c:	2202      	movs	r2, #2
 800194e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001954:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	fa93 f2a3 	rbit	r2, r3
 800195e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001962:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001970:	2202      	movs	r2, #2
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001978:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	fa93 f2a3 	rbit	r2, r3
 8001982:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001986:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800198a:	601a      	str	r2, [r3, #0]
  return result;
 800198c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001990:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001994:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f043 0302 	orr.w	r3, r3, #2
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d106      	bne.n	80019b8 <HAL_RCC_OscConfig+0xb44>
 80019aa:	4b02      	ldr	r3, [pc, #8]	@ (80019b4 <HAL_RCC_OscConfig+0xb40>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	e017      	b.n	80019e0 <HAL_RCC_OscConfig+0xb6c>
 80019b0:	40007000 	.word	0x40007000
 80019b4:	40021000 	.word	0x40021000
 80019b8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019bc:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019c0:	2202      	movs	r2, #2
 80019c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	fa93 f2a3 	rbit	r2, r3
 80019d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019d6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	4bb3      	ldr	r3, [pc, #716]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019e4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80019e8:	2102      	movs	r1, #2
 80019ea:	6011      	str	r1, [r2, #0]
 80019ec:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019f0:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	fa92 f1a2 	rbit	r1, r2
 80019fa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80019fe:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001a02:	6011      	str	r1, [r2, #0]
  return result;
 8001a04:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001a08:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	fab2 f282 	clz	r2, r2
 8001a12:	b2d2      	uxtb	r2, r2
 8001a14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	f002 021f 	and.w	r2, r2, #31
 8001a1e:	2101      	movs	r1, #1
 8001a20:	fa01 f202 	lsl.w	r2, r1, r2
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d180      	bne.n	800192c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a2a:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d105      	bne.n	8001a3e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a32:	4b9e      	ldr	r3, [pc, #632]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	4a9d      	ldr	r2, [pc, #628]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 825e 	beq.w	8001f0c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b96      	ldr	r3, [pc, #600]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 030c 	and.w	r3, r3, #12
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	f000 821f 	beq.w	8001e9c <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	699b      	ldr	r3, [r3, #24]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	f040 8170 	bne.w	8001d50 <HAL_RCC_OscConfig+0xedc>
 8001a70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a74:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a78:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001a7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a82:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	fa93 f2a3 	rbit	r2, r3
 8001a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a90:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a94:	601a      	str	r2, [r3, #0]
  return result;
 8001a96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a9a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001a9e:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aa0:	fab3 f383 	clz	r3, r3
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001aaa:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab6:	f7fe ff3d 	bl	8000934 <HAL_GetTick>
 8001aba:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	e009      	b.n	8001ad4 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7fe ff38 	bl	8000934 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e21c      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ad8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001adc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ae0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ae6:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	fa93 f2a3 	rbit	r2, r3
 8001af0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001af4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001af8:	601a      	str	r2, [r3, #0]
  return result;
 8001afa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001afe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001b02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d102      	bne.n	8001b1e <HAL_RCC_OscConfig+0xcaa>
 8001b18:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	e027      	b.n	8001b6e <HAL_RCC_OscConfig+0xcfa>
 8001b1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b22:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b30:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	fa93 f2a3 	rbit	r2, r3
 8001b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b3e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b48:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b56:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b64:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	4b50      	ldr	r3, [pc, #320]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b72:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b76:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001b7a:	6011      	str	r1, [r2, #0]
 8001b7c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b80:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001b84:	6812      	ldr	r2, [r2, #0]
 8001b86:	fa92 f1a2 	rbit	r1, r2
 8001b8a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b8e:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b92:	6011      	str	r1, [r2, #0]
  return result;
 8001b94:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001b98:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001b9c:	6812      	ldr	r2, [r2, #0]
 8001b9e:	fab2 f282 	clz	r2, r2
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f042 0220 	orr.w	r2, r2, #32
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f002 021f 	and.w	r2, r2, #31
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d182      	bne.n	8001ac0 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bba:	4b3c      	ldr	r3, [pc, #240]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	f023 020f 	bic.w	r2, r3, #15
 8001bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	4937      	ldr	r1, [pc, #220]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001bd4:	4b35      	ldr	r3, [pc, #212]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001bdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001be0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a19      	ldr	r1, [r3, #32]
 8001be8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	492d      	ldr	r1, [pc, #180]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]
 8001bfc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c00:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001c08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c0e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c1c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c20:	601a      	str	r2, [r3, #0]
  return result;
 8001c22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c26:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8001c2a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c2c:	fab3 f383 	clz	r3, r3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001c36:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	2301      	movs	r3, #1
 8001c40:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7fe fe77 	bl	8000934 <HAL_GetTick>
 8001c46:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c4a:	e009      	b.n	8001c60 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c4c:	f7fe fe72 	bl	8000934 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e156      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c64:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	fa93 f2a3 	rbit	r2, r3
 8001c7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c80:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c84:	601a      	str	r2, [r3, #0]
  return result;
 8001c86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c8a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8001c8e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c90:	fab3 f383 	clz	r3, r3
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d105      	bne.n	8001cb0 <HAL_RCC_OscConfig+0xe3c>
 8001ca4:	4b01      	ldr	r3, [pc, #4]	@ (8001cac <HAL_RCC_OscConfig+0xe38>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	e02a      	b.n	8001d00 <HAL_RCC_OscConfig+0xe8c>
 8001caa:	bf00      	nop
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001cbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cc2:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	fa93 f2a3 	rbit	r2, r3
 8001ccc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cd0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cda:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cde:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ce8:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cf6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	4b86      	ldr	r3, [pc, #536]	@ (8001f18 <HAL_RCC_OscConfig+0x10a4>)
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d04:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d08:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001d0c:	6011      	str	r1, [r2, #0]
 8001d0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d12:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	fa92 f1a2 	rbit	r1, r2
 8001d1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d20:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001d24:	6011      	str	r1, [r2, #0]
  return result;
 8001d26:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001d2a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	f002 021f 	and.w	r2, r2, #31
 8001d40:	2101      	movs	r1, #1
 8001d42:	fa01 f202 	lsl.w	r2, r1, r2
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f43f af7f 	beq.w	8001c4c <HAL_RCC_OscConfig+0xdd8>
 8001d4e:	e0dd      	b.n	8001f0c <HAL_RCC_OscConfig+0x1098>
 8001d50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d54:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d62:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	fa93 f2a3 	rbit	r2, r3
 8001d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d70:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d74:	601a      	str	r2, [r3, #0]
  return result;
 8001d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d7a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001d7e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	fab3 f383 	clz	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001d8a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	461a      	mov	r2, r3
 8001d92:	2300      	movs	r3, #0
 8001d94:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d96:	f7fe fdcd 	bl	8000934 <HAL_GetTick>
 8001d9a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9e:	e009      	b.n	8001db4 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da0:	f7fe fdc8 	bl	8000934 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e0ac      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
 8001db4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001db8:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001dbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dc6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	fa93 f2a3 	rbit	r2, r3
 8001dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001dd8:	601a      	str	r2, [r3, #0]
  return result;
 8001dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dde:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8001de2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de4:	fab3 f383 	clz	r3, r3
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d102      	bne.n	8001dfe <HAL_RCC_OscConfig+0xf8a>
 8001df8:	4b47      	ldr	r3, [pc, #284]	@ (8001f18 <HAL_RCC_OscConfig+0x10a4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	e027      	b.n	8001e4e <HAL_RCC_OscConfig+0xfda>
 8001dfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e02:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001e06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e10:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e1e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e28:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e36:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	fa93 f2a3 	rbit	r2, r3
 8001e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e44:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8001e48:	601a      	str	r2, [r3, #0]
 8001e4a:	4b33      	ldr	r3, [pc, #204]	@ (8001f18 <HAL_RCC_OscConfig+0x10a4>)
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e52:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e56:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001e5a:	6011      	str	r1, [r2, #0]
 8001e5c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e60:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	fa92 f1a2 	rbit	r1, r2
 8001e6a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e6e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e72:	6011      	str	r1, [r2, #0]
  return result;
 8001e74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001e78:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8001e7c:	6812      	ldr	r2, [r2, #0]
 8001e7e:	fab2 f282 	clz	r2, r2
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	f042 0220 	orr.w	r2, r2, #32
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	f002 021f 	and.w	r2, r2, #31
 8001e8e:	2101      	movs	r1, #1
 8001e90:	fa01 f202 	lsl.w	r2, r1, r2
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d182      	bne.n	8001da0 <HAL_RCC_OscConfig+0xf2c>
 8001e9a:	e037      	b.n	8001f0c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ea0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e02e      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb0:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_RCC_OscConfig+0x10a4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <HAL_RCC_OscConfig+0x10a4>)
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001ec4:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8001ec8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ecc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d117      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001ed8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8001edc:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d10b      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001ef0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001ef4:	f003 020f 	and.w	r2, r3, #15
 8001ef8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e000      	b.n	8001f0e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40021000 	.word	0x40021000

08001f1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b09e      	sub	sp, #120	@ 0x78
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e162      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f34:	4b90      	ldr	r3, [pc, #576]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0307 	and.w	r3, r3, #7
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d910      	bls.n	8001f64 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b8d      	ldr	r3, [pc, #564]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 0207 	bic.w	r2, r3, #7
 8001f4a:	498b      	ldr	r1, [pc, #556]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b89      	ldr	r3, [pc, #548]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e14a      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b82      	ldr	r3, [pc, #520]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	497f      	ldr	r1, [pc, #508]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 80dc 	beq.w	8002148 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d13c      	bne.n	8002012 <HAL_RCC_ClockConfig+0xf6>
 8001f98:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f9c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8001fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xa6>
 8001fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	e00f      	b.n	8001fe2 <HAL_RCC_ClockConfig+0xc6>
 8001fc2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fc6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	667b      	str	r3, [r7, #100]	@ 0x64
 8001fd0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8001fd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001fde:	4b67      	ldr	r3, [pc, #412]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001fe6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fea:	fa92 f2a2 	rbit	r2, r2
 8001fee:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8001ff0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ff2:	fab2 f282 	clz	r2, r2
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	f042 0220 	orr.w	r2, r2, #32
 8001ffc:	b2d2      	uxtb	r2, r2
 8001ffe:	f002 021f 	and.w	r2, r2, #31
 8002002:	2101      	movs	r1, #1
 8002004:	fa01 f202 	lsl.w	r2, r1, r2
 8002008:	4013      	ands	r3, r2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d17b      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0f3      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d13c      	bne.n	8002094 <HAL_RCC_ClockConfig+0x178>
 800201a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800201e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002022:	fa93 f3a3 	rbit	r3, r3
 8002026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002028:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	b2db      	uxtb	r3, r3
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b01      	cmp	r3, #1
 800203c:	d102      	bne.n	8002044 <HAL_RCC_ClockConfig+0x128>
 800203e:	4b4f      	ldr	r3, [pc, #316]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	e00f      	b.n	8002064 <HAL_RCC_ClockConfig+0x148>
 8002044:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002048:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800204c:	fa93 f3a3 	rbit	r3, r3
 8002050:	647b      	str	r3, [r7, #68]	@ 0x44
 8002052:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002056:	643b      	str	r3, [r7, #64]	@ 0x40
 8002058:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800205a:	fa93 f3a3 	rbit	r3, r3
 800205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002060:	4b46      	ldr	r3, [pc, #280]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002068:	63ba      	str	r2, [r7, #56]	@ 0x38
 800206a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800206c:	fa92 f2a2 	rbit	r2, r2
 8002070:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002074:	fab2 f282 	clz	r2, r2
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	f042 0220 	orr.w	r2, r2, #32
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	f002 021f 	and.w	r2, r2, #31
 8002084:	2101      	movs	r1, #1
 8002086:	fa01 f202 	lsl.w	r2, r1, r2
 800208a:	4013      	ands	r3, r2
 800208c:	2b00      	cmp	r3, #0
 800208e:	d13a      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b2      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
 8002094:	2302      	movs	r3, #2
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80020a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	095b      	lsrs	r3, r3, #5
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d102      	bne.n	80020bc <HAL_RCC_ClockConfig+0x1a0>
 80020b6:	4b31      	ldr	r3, [pc, #196]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e00d      	b.n	80020d8 <HAL_RCC_ClockConfig+0x1bc>
 80020bc:	2302      	movs	r3, #2
 80020be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c2:	fa93 f3a3 	rbit	r3, r3
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	fa93 f3a3 	rbit	r3, r3
 80020d2:	61fb      	str	r3, [r7, #28]
 80020d4:	4b29      	ldr	r3, [pc, #164]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d8:	2202      	movs	r2, #2
 80020da:	61ba      	str	r2, [r7, #24]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	fa92 f2a2 	rbit	r2, r2
 80020e2:	617a      	str	r2, [r7, #20]
  return result;
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	fab2 f282 	clz	r2, r2
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	f042 0220 	orr.w	r2, r2, #32
 80020f0:	b2d2      	uxtb	r2, r2
 80020f2:	f002 021f 	and.w	r2, r2, #31
 80020f6:	2101      	movs	r1, #1
 80020f8:	fa01 f202 	lsl.w	r2, r1, r2
 80020fc:	4013      	ands	r3, r2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e079      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002106:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f023 0203 	bic.w	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	491a      	ldr	r1, [pc, #104]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002118:	f7fe fc0c 	bl	8000934 <HAL_GetTick>
 800211c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211e:	e00a      	b.n	8002136 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002120:	f7fe fc08 	bl	8000934 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800212e:	4293      	cmp	r3, r2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e061      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002136:	4b11      	ldr	r3, [pc, #68]	@ (800217c <HAL_RCC_ClockConfig+0x260>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f003 020c 	and.w	r2, r3, #12
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	429a      	cmp	r2, r3
 8002146:	d1eb      	bne.n	8002120 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d214      	bcs.n	8002180 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b08      	ldr	r3, [pc, #32]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f023 0207 	bic.w	r2, r3, #7
 800215e:	4906      	ldr	r1, [pc, #24]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4313      	orrs	r3, r2
 8002164:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b04      	ldr	r3, [pc, #16]	@ (8002178 <HAL_RCC_ClockConfig+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e040      	b.n	80021fa <HAL_RCC_ClockConfig+0x2de>
 8002178:	40022000 	.word	0x40022000
 800217c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d008      	beq.n	800219e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800218c:	4b1d      	ldr	r3, [pc, #116]	@ (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	491a      	ldr	r1, [pc, #104]	@ (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 800219a:	4313      	orrs	r3, r2
 800219c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0308 	and.w	r3, r3, #8
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d009      	beq.n	80021be <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021aa:	4b16      	ldr	r3, [pc, #88]	@ (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4912      	ldr	r1, [pc, #72]	@ (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021be:	f000 f829 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 80021c2:	4601      	mov	r1, r0
 80021c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <HAL_RCC_ClockConfig+0x2e8>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021cc:	22f0      	movs	r2, #240	@ 0xf0
 80021ce:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	fa92 f2a2 	rbit	r2, r2
 80021d6:	60fa      	str	r2, [r7, #12]
  return result;
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	fab2 f282 	clz	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	40d3      	lsrs	r3, r2
 80021e2:	4a09      	ldr	r2, [pc, #36]	@ (8002208 <HAL_RCC_ClockConfig+0x2ec>)
 80021e4:	5cd3      	ldrb	r3, [r2, r3]
 80021e6:	fa21 f303 	lsr.w	r3, r1, r3
 80021ea:	4a08      	ldr	r2, [pc, #32]	@ (800220c <HAL_RCC_ClockConfig+0x2f0>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <HAL_RCC_ClockConfig+0x2f4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fb5a 	bl	80008ac <HAL_InitTick>
  
  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3778      	adds	r7, #120	@ 0x78
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000
 8002208:	08004254 	.word	0x08004254
 800220c:	2000000c 	.word	0x2000000c
 8002210:	20000010 	.word	0x20000010

08002214 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
 8002222:	2300      	movs	r3, #0
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	2300      	movs	r3, #0
 8002228:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800222e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b04      	cmp	r3, #4
 800223c:	d002      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x30>
 800223e:	2b08      	cmp	r3, #8
 8002240:	d003      	beq.n	800224a <HAL_RCC_GetSysClockFreq+0x36>
 8002242:	e029      	b.n	8002298 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002244:	4b1a      	ldr	r3, [pc, #104]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002246:	613b      	str	r3, [r7, #16]
      break;
 8002248:	e029      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	0c9b      	lsrs	r3, r3, #18
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	4a18      	ldr	r2, [pc, #96]	@ (80022b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002254:	5cd3      	ldrb	r3, [r2, r3]
 8002256:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	4a15      	ldr	r2, [pc, #84]	@ (80022b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002262:	5cd3      	ldrb	r3, [r2, r3]
 8002264:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d008      	beq.n	8002282 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002270:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	fbb2 f2f3 	udiv	r2, r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	fb02 f303 	mul.w	r3, r2, r3
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e007      	b.n	8002292 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002282:	4a0b      	ldr	r2, [pc, #44]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	fbb2 f2f3 	udiv	r2, r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	fb02 f303 	mul.w	r3, r2, r3
 8002290:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	613b      	str	r3, [r7, #16]
      break;
 8002296:	e002      	b.n	800229e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800229a:	613b      	str	r3, [r7, #16]
      break;
 800229c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229e:	693b      	ldr	r3, [r7, #16]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	007a1200 	.word	0x007a1200
 80022b4:	0800426c 	.word	0x0800426c
 80022b8:	0800427c 	.word	0x0800427c

080022bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	2000000c 	.word	0x2000000c

080022d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80022da:	f7ff ffef 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 80022de:	4601      	mov	r1, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022e8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80022ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	fa92 f2a2 	rbit	r2, r2
 80022f4:	603a      	str	r2, [r7, #0]
  return result;
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	fab2 f282 	clz	r2, r2
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	40d3      	lsrs	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002302:	5cd3      	ldrb	r3, [r2, r3]
 8002304:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002308:	4618      	mov	r0, r3
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40021000 	.word	0x40021000
 8002314:	08004264 	.word	0x08004264

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800231e:	f7ff ffcd 	bl	80022bc <HAL_RCC_GetHCLKFreq>
 8002322:	4601      	mov	r1, r0
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800232c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002330:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	fa92 f2a2 	rbit	r2, r2
 8002338:	603a      	str	r2, [r7, #0]
  return result;
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	fab2 f282 	clz	r2, r2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	40d3      	lsrs	r3, r2
 8002344:	4a04      	ldr	r2, [pc, #16]	@ (8002358 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	08004264 	.word	0x08004264

0800235c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b092      	sub	sp, #72	@ 0x48
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002364:	2300      	movs	r3, #0
 8002366:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80d4 	beq.w	8002528 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002380:	4b4e      	ldr	r3, [pc, #312]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d10e      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	4b4b      	ldr	r3, [pc, #300]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	4a4a      	ldr	r2, [pc, #296]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002392:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002396:	61d3      	str	r3, [r2, #28]
 8002398:	4b48      	ldr	r3, [pc, #288]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b45      	ldr	r3, [pc, #276]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b42      	ldr	r3, [pc, #264]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a41      	ldr	r2, [pc, #260]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fab7 	bl	8000934 <HAL_GetTick>
 80023c6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fab3 	bl	8000934 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	@ 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e1d6      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b38      	ldr	r3, [pc, #224]	@ (80024c0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e8:	4b34      	ldr	r3, [pc, #208]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8084 	beq.w	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002402:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002404:	429a      	cmp	r2, r3
 8002406:	d07c      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002408:	4b2c      	ldr	r3, [pc, #176]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002412:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002416:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800241a:	fa93 f3a3 	rbit	r3, r3
 800241e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	4b26      	ldr	r3, [pc, #152]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	461a      	mov	r2, r3
 8002432:	2301      	movs	r3, #1
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800243a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002446:	fab3 f383 	clz	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	461a      	mov	r2, r3
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	461a      	mov	r2, r3
 8002456:	2300      	movs	r3, #0
 8002458:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800245a:	4a18      	ldr	r2, [pc, #96]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800245c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800245e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	2b00      	cmp	r3, #0
 8002468:	d04b      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246a:	f7fe fa63 	bl	8000934 <HAL_GetTick>
 800246e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002470:	e00a      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7fe fa5f 	bl	8000934 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e180      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002488:	2302      	movs	r3, #2
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248e:	fa93 f3a3 	rbit	r3, r3
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	61fb      	str	r3, [r7, #28]
  return result;
 80024a0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a2:	fab3 f383 	clz	r3, r3
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	095b      	lsrs	r3, r3, #5
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	f043 0302 	orr.w	r3, r3, #2
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d108      	bne.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80024b6:	4b01      	ldr	r3, [pc, #4]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	e00d      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
 80024c4:	10908100 	.word	0x10908100
 80024c8:	2302      	movs	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	fa93 f3a3 	rbit	r3, r3
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	4b9a      	ldr	r3, [pc, #616]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d8:	2202      	movs	r2, #2
 80024da:	613a      	str	r2, [r7, #16]
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	fa92 f2a2 	rbit	r2, r2
 80024e2:	60fa      	str	r2, [r7, #12]
  return result;
 80024e4:	68fa      	ldr	r2, [r7, #12]
 80024e6:	fab2 f282 	clz	r2, r2
 80024ea:	b2d2      	uxtb	r2, r2
 80024ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	f002 021f 	and.w	r2, r2, #31
 80024f6:	2101      	movs	r1, #1
 80024f8:	fa01 f202 	lsl.w	r2, r1, r2
 80024fc:	4013      	ands	r3, r2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0b7      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002502:	4b8f      	ldr	r3, [pc, #572]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	498c      	ldr	r1, [pc, #560]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002510:	4313      	orrs	r3, r2
 8002512:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002514:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002518:	2b01      	cmp	r3, #1
 800251a:	d105      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251c:	4b88      	ldr	r3, [pc, #544]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	4a87      	ldr	r2, [pc, #540]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002522:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002526:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002534:	4b82      	ldr	r3, [pc, #520]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	f023 0203 	bic.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	497f      	ldr	r1, [pc, #508]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002542:	4313      	orrs	r3, r2
 8002544:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d008      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002552:	4b7b      	ldr	r3, [pc, #492]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	4978      	ldr	r1, [pc, #480]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002560:	4313      	orrs	r3, r2
 8002562:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002570:	4b73      	ldr	r3, [pc, #460]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	4970      	ldr	r1, [pc, #448]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800257e:	4313      	orrs	r3, r2
 8002580:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0320 	and.w	r3, r3, #32
 800258a:	2b00      	cmp	r3, #0
 800258c:	d008      	beq.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258e:	4b6c      	ldr	r3, [pc, #432]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f023 0210 	bic.w	r2, r3, #16
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	4969      	ldr	r1, [pc, #420]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800259c:	4313      	orrs	r3, r2
 800259e:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d008      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80025ac:	4b64      	ldr	r3, [pc, #400]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025b8:	4961      	ldr	r1, [pc, #388]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d008      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f023 0220 	bic.w	r2, r3, #32
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	495a      	ldr	r1, [pc, #360]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d008      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025e8:	4b55      	ldr	r3, [pc, #340]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	4952      	ldr	r1, [pc, #328]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002606:	4b4e      	ldr	r3, [pc, #312]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	494b      	ldr	r1, [pc, #300]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d008      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002624:	4b46      	ldr	r3, [pc, #280]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002628:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	4943      	ldr	r1, [pc, #268]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002632:	4313      	orrs	r3, r2
 8002634:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002642:	4b3f      	ldr	r3, [pc, #252]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	493c      	ldr	r1, [pc, #240]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002660:	4b37      	ldr	r3, [pc, #220]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800266c:	4934      	ldr	r1, [pc, #208]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800266e:	4313      	orrs	r3, r2
 8002670:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800267a:	2b00      	cmp	r3, #0
 800267c:	d008      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800267e:	4b30      	ldr	r3, [pc, #192]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002682:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	492d      	ldr	r1, [pc, #180]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800268c:	4313      	orrs	r3, r2
 800268e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d008      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800269c:	4b28      	ldr	r3, [pc, #160]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026a8:	4925      	ldr	r1, [pc, #148]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80026ba:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c6:	491e      	ldr	r1, [pc, #120]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d008      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80026d8:	4b19      	ldr	r3, [pc, #100]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e4:	4916      	ldr	r1, [pc, #88]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d008      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80026f6:	4b12      	ldr	r3, [pc, #72]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002702:	490f      	ldr	r1, [pc, #60]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d008      	beq.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002714:	4b0a      	ldr	r3, [pc, #40]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002720:	4907      	ldr	r1, [pc, #28]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00c      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002732:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002736:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	e002      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800273e:	bf00      	nop
 8002740:	40021000 	.word	0x40021000
 8002744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002746:	4913      	ldr	r1, [pc, #76]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002748:	4313      	orrs	r3, r2
 800274a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002758:	4b0e      	ldr	r3, [pc, #56]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002764:	490b      	ldr	r1, [pc, #44]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002766:	4313      	orrs	r3, r2
 8002768:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002776:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002782:	4904      	ldr	r1, [pc, #16]	@ (8002794 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002784:	4313      	orrs	r3, r2
 8002786:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3748      	adds	r7, #72	@ 0x48
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000

08002798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e040      	b.n	800282c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fd fefa 	bl	80005b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2224      	movs	r2, #36	@ 0x24
 80027c4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fb4e 	bl	8002e80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f000 f977 	bl	8002ad8 <UART_SetConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e01b      	b.n	800282c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fbcd 	bl	8002fc4 <UART_CheckIdleState>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af02      	add	r7, sp, #8
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	603b      	str	r3, [r7, #0]
 8002840:	4613      	mov	r3, r2
 8002842:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002848:	2b20      	cmp	r3, #32
 800284a:	d177      	bne.n	800293c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <HAL_UART_Transmit+0x24>
 8002852:	88fb      	ldrh	r3, [r7, #6]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e070      	b.n	800293e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2221      	movs	r2, #33	@ 0x21
 8002868:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800286a:	f7fe f863 	bl	8000934 <HAL_GetTick>
 800286e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	88fa      	ldrh	r2, [r7, #6]
 8002874:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002888:	d108      	bne.n	800289c <HAL_UART_Transmit+0x68>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d104      	bne.n	800289c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002892:	2300      	movs	r3, #0
 8002894:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	61bb      	str	r3, [r7, #24]
 800289a:	e003      	b.n	80028a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80028a4:	e02f      	b.n	8002906 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	2200      	movs	r2, #0
 80028ae:	2180      	movs	r1, #128	@ 0x80
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fc2f 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e03b      	b.n	800293e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028d8:	b292      	uxth	r2, r2
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	3302      	adds	r3, #2
 80028e0:	61bb      	str	r3, [r7, #24]
 80028e2:	e007      	b.n	80028f4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	781a      	ldrb	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800290c:	b29b      	uxth	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1c9      	bne.n	80028a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	2200      	movs	r2, #0
 800291a:	2140      	movs	r1, #64	@ 0x40
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fbf9 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2220      	movs	r2, #32
 800292c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e005      	b.n	800293e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002938:	2300      	movs	r3, #0
 800293a:	e000      	b.n	800293e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800293c:	2302      	movs	r3, #2
  }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3720      	adds	r7, #32
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08a      	sub	sp, #40	@ 0x28
 800294a:	af02      	add	r7, sp, #8
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800295c:	2b20      	cmp	r3, #32
 800295e:	f040 80b6 	bne.w	8002ace <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_UART_Receive+0x28>
 8002968:	88fb      	ldrh	r3, [r7, #6]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0ae      	b.n	8002ad0 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2222      	movs	r2, #34	@ 0x22
 800297e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002988:	f7fd ffd4 	bl	8000934 <HAL_GetTick>
 800298c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	88fa      	ldrh	r2, [r7, #6]
 8002992:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029a6:	d10e      	bne.n	80029c6 <HAL_UART_Receive+0x80>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d105      	bne.n	80029bc <HAL_UART_Receive+0x76>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80029b6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029ba:	e02d      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	22ff      	movs	r2, #255	@ 0xff
 80029c0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029c4:	e028      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10d      	bne.n	80029ea <HAL_UART_Receive+0xa4>
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d104      	bne.n	80029e0 <HAL_UART_Receive+0x9a>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	22ff      	movs	r2, #255	@ 0xff
 80029da:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029de:	e01b      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	227f      	movs	r2, #127	@ 0x7f
 80029e4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80029e8:	e016      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80029f2:	d10d      	bne.n	8002a10 <HAL_UART_Receive+0xca>
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_UART_Receive+0xc0>
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	227f      	movs	r2, #127	@ 0x7f
 8002a00:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a04:	e008      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	223f      	movs	r2, #63	@ 0x3f
 8002a0a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8002a0e:	e003      	b.n	8002a18 <HAL_UART_Receive+0xd2>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002a1e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a28:	d108      	bne.n	8002a3c <HAL_UART_Receive+0xf6>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d104      	bne.n	8002a3c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	e003      	b.n	8002a44 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002a44:	e037      	b.n	8002ab6 <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	9300      	str	r3, [sp, #0]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	2120      	movs	r1, #32
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fb5f 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e033      	b.n	8002ad0 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10c      	bne.n	8002a88 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	8a7b      	ldrh	r3, [r7, #18]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	3302      	adds	r3, #2
 8002a84:	61bb      	str	r3, [r7, #24]
 8002a86:	e00d      	b.n	8002aa4 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	8a7b      	ldrh	r3, [r7, #18]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4013      	ands	r3, r2
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	3b01      	subs	r3, #1
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1c1      	bne.n	8002a46 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2220      	movs	r2, #32
 8002ac6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e000      	b.n	8002ad0 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
  }
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	4b92      	ldr	r3, [pc, #584]	@ (8002d4c <UART_SetConfig+0x274>)
 8002b04:	4013      	ands	r3, r2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	6979      	ldr	r1, [r7, #20]
 8002b0c:	430b      	orrs	r3, r1
 8002b0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a80      	ldr	r2, [pc, #512]	@ (8002d50 <UART_SetConfig+0x278>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d120      	bne.n	8002b96 <UART_SetConfig+0xbe>
 8002b54:	4b7f      	ldr	r3, [pc, #508]	@ (8002d54 <UART_SetConfig+0x27c>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d817      	bhi.n	8002b90 <UART_SetConfig+0xb8>
 8002b60:	a201      	add	r2, pc, #4	@ (adr r2, 8002b68 <UART_SetConfig+0x90>)
 8002b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b66:	bf00      	nop
 8002b68:	08002b79 	.word	0x08002b79
 8002b6c:	08002b85 	.word	0x08002b85
 8002b70:	08002b8b 	.word	0x08002b8b
 8002b74:	08002b7f 	.word	0x08002b7f
 8002b78:	2301      	movs	r3, #1
 8002b7a:	77fb      	strb	r3, [r7, #31]
 8002b7c:	e0b5      	b.n	8002cea <UART_SetConfig+0x212>
 8002b7e:	2302      	movs	r3, #2
 8002b80:	77fb      	strb	r3, [r7, #31]
 8002b82:	e0b2      	b.n	8002cea <UART_SetConfig+0x212>
 8002b84:	2304      	movs	r3, #4
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e0af      	b.n	8002cea <UART_SetConfig+0x212>
 8002b8a:	2308      	movs	r3, #8
 8002b8c:	77fb      	strb	r3, [r7, #31]
 8002b8e:	e0ac      	b.n	8002cea <UART_SetConfig+0x212>
 8002b90:	2310      	movs	r3, #16
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e0a9      	b.n	8002cea <UART_SetConfig+0x212>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d58 <UART_SetConfig+0x280>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d124      	bne.n	8002bea <UART_SetConfig+0x112>
 8002ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8002d54 <UART_SetConfig+0x27c>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ba8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bac:	d011      	beq.n	8002bd2 <UART_SetConfig+0xfa>
 8002bae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002bb2:	d817      	bhi.n	8002be4 <UART_SetConfig+0x10c>
 8002bb4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bb8:	d011      	beq.n	8002bde <UART_SetConfig+0x106>
 8002bba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002bbe:	d811      	bhi.n	8002be4 <UART_SetConfig+0x10c>
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d003      	beq.n	8002bcc <UART_SetConfig+0xf4>
 8002bc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bc8:	d006      	beq.n	8002bd8 <UART_SetConfig+0x100>
 8002bca:	e00b      	b.n	8002be4 <UART_SetConfig+0x10c>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	77fb      	strb	r3, [r7, #31]
 8002bd0:	e08b      	b.n	8002cea <UART_SetConfig+0x212>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	77fb      	strb	r3, [r7, #31]
 8002bd6:	e088      	b.n	8002cea <UART_SetConfig+0x212>
 8002bd8:	2304      	movs	r3, #4
 8002bda:	77fb      	strb	r3, [r7, #31]
 8002bdc:	e085      	b.n	8002cea <UART_SetConfig+0x212>
 8002bde:	2308      	movs	r3, #8
 8002be0:	77fb      	strb	r3, [r7, #31]
 8002be2:	e082      	b.n	8002cea <UART_SetConfig+0x212>
 8002be4:	2310      	movs	r3, #16
 8002be6:	77fb      	strb	r3, [r7, #31]
 8002be8:	e07f      	b.n	8002cea <UART_SetConfig+0x212>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a5b      	ldr	r2, [pc, #364]	@ (8002d5c <UART_SetConfig+0x284>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d124      	bne.n	8002c3e <UART_SetConfig+0x166>
 8002bf4:	4b57      	ldr	r3, [pc, #348]	@ (8002d54 <UART_SetConfig+0x27c>)
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002bfc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c00:	d011      	beq.n	8002c26 <UART_SetConfig+0x14e>
 8002c02:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002c06:	d817      	bhi.n	8002c38 <UART_SetConfig+0x160>
 8002c08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c0c:	d011      	beq.n	8002c32 <UART_SetConfig+0x15a>
 8002c0e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c12:	d811      	bhi.n	8002c38 <UART_SetConfig+0x160>
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <UART_SetConfig+0x148>
 8002c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c1c:	d006      	beq.n	8002c2c <UART_SetConfig+0x154>
 8002c1e:	e00b      	b.n	8002c38 <UART_SetConfig+0x160>
 8002c20:	2300      	movs	r3, #0
 8002c22:	77fb      	strb	r3, [r7, #31]
 8002c24:	e061      	b.n	8002cea <UART_SetConfig+0x212>
 8002c26:	2302      	movs	r3, #2
 8002c28:	77fb      	strb	r3, [r7, #31]
 8002c2a:	e05e      	b.n	8002cea <UART_SetConfig+0x212>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	77fb      	strb	r3, [r7, #31]
 8002c30:	e05b      	b.n	8002cea <UART_SetConfig+0x212>
 8002c32:	2308      	movs	r3, #8
 8002c34:	77fb      	strb	r3, [r7, #31]
 8002c36:	e058      	b.n	8002cea <UART_SetConfig+0x212>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	77fb      	strb	r3, [r7, #31]
 8002c3c:	e055      	b.n	8002cea <UART_SetConfig+0x212>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a47      	ldr	r2, [pc, #284]	@ (8002d60 <UART_SetConfig+0x288>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d124      	bne.n	8002c92 <UART_SetConfig+0x1ba>
 8002c48:	4b42      	ldr	r3, [pc, #264]	@ (8002d54 <UART_SetConfig+0x27c>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002c50:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c54:	d011      	beq.n	8002c7a <UART_SetConfig+0x1a2>
 8002c56:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002c5a:	d817      	bhi.n	8002c8c <UART_SetConfig+0x1b4>
 8002c5c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c60:	d011      	beq.n	8002c86 <UART_SetConfig+0x1ae>
 8002c62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c66:	d811      	bhi.n	8002c8c <UART_SetConfig+0x1b4>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <UART_SetConfig+0x19c>
 8002c6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002c70:	d006      	beq.n	8002c80 <UART_SetConfig+0x1a8>
 8002c72:	e00b      	b.n	8002c8c <UART_SetConfig+0x1b4>
 8002c74:	2300      	movs	r3, #0
 8002c76:	77fb      	strb	r3, [r7, #31]
 8002c78:	e037      	b.n	8002cea <UART_SetConfig+0x212>
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	77fb      	strb	r3, [r7, #31]
 8002c7e:	e034      	b.n	8002cea <UART_SetConfig+0x212>
 8002c80:	2304      	movs	r3, #4
 8002c82:	77fb      	strb	r3, [r7, #31]
 8002c84:	e031      	b.n	8002cea <UART_SetConfig+0x212>
 8002c86:	2308      	movs	r3, #8
 8002c88:	77fb      	strb	r3, [r7, #31]
 8002c8a:	e02e      	b.n	8002cea <UART_SetConfig+0x212>
 8002c8c:	2310      	movs	r3, #16
 8002c8e:	77fb      	strb	r3, [r7, #31]
 8002c90:	e02b      	b.n	8002cea <UART_SetConfig+0x212>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a33      	ldr	r2, [pc, #204]	@ (8002d64 <UART_SetConfig+0x28c>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d124      	bne.n	8002ce6 <UART_SetConfig+0x20e>
 8002c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002d54 <UART_SetConfig+0x27c>)
 8002c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca0:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002ca4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002ca8:	d011      	beq.n	8002cce <UART_SetConfig+0x1f6>
 8002caa:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002cae:	d817      	bhi.n	8002ce0 <UART_SetConfig+0x208>
 8002cb0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cb4:	d011      	beq.n	8002cda <UART_SetConfig+0x202>
 8002cb6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002cba:	d811      	bhi.n	8002ce0 <UART_SetConfig+0x208>
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d003      	beq.n	8002cc8 <UART_SetConfig+0x1f0>
 8002cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cc4:	d006      	beq.n	8002cd4 <UART_SetConfig+0x1fc>
 8002cc6:	e00b      	b.n	8002ce0 <UART_SetConfig+0x208>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	77fb      	strb	r3, [r7, #31]
 8002ccc:	e00d      	b.n	8002cea <UART_SetConfig+0x212>
 8002cce:	2302      	movs	r3, #2
 8002cd0:	77fb      	strb	r3, [r7, #31]
 8002cd2:	e00a      	b.n	8002cea <UART_SetConfig+0x212>
 8002cd4:	2304      	movs	r3, #4
 8002cd6:	77fb      	strb	r3, [r7, #31]
 8002cd8:	e007      	b.n	8002cea <UART_SetConfig+0x212>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	77fb      	strb	r3, [r7, #31]
 8002cde:	e004      	b.n	8002cea <UART_SetConfig+0x212>
 8002ce0:	2310      	movs	r3, #16
 8002ce2:	77fb      	strb	r3, [r7, #31]
 8002ce4:	e001      	b.n	8002cea <UART_SetConfig+0x212>
 8002ce6:	2310      	movs	r3, #16
 8002ce8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cf2:	d16b      	bne.n	8002dcc <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8002cf4:	7ffb      	ldrb	r3, [r7, #31]
 8002cf6:	2b08      	cmp	r3, #8
 8002cf8:	d838      	bhi.n	8002d6c <UART_SetConfig+0x294>
 8002cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8002d00 <UART_SetConfig+0x228>)
 8002cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d00:	08002d25 	.word	0x08002d25
 8002d04:	08002d2d 	.word	0x08002d2d
 8002d08:	08002d35 	.word	0x08002d35
 8002d0c:	08002d6d 	.word	0x08002d6d
 8002d10:	08002d3b 	.word	0x08002d3b
 8002d14:	08002d6d 	.word	0x08002d6d
 8002d18:	08002d6d 	.word	0x08002d6d
 8002d1c:	08002d6d 	.word	0x08002d6d
 8002d20:	08002d43 	.word	0x08002d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d24:	f7ff fad6 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002d28:	61b8      	str	r0, [r7, #24]
        break;
 8002d2a:	e024      	b.n	8002d76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d2c:	f7ff faf4 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8002d30:	61b8      	str	r0, [r7, #24]
        break;
 8002d32:	e020      	b.n	8002d76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d34:	4b0c      	ldr	r3, [pc, #48]	@ (8002d68 <UART_SetConfig+0x290>)
 8002d36:	61bb      	str	r3, [r7, #24]
        break;
 8002d38:	e01d      	b.n	8002d76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d3a:	f7ff fa6b 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002d3e:	61b8      	str	r0, [r7, #24]
        break;
 8002d40:	e019      	b.n	8002d76 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d46:	61bb      	str	r3, [r7, #24]
        break;
 8002d48:	e015      	b.n	8002d76 <UART_SetConfig+0x29e>
 8002d4a:	bf00      	nop
 8002d4c:	efff69f3 	.word	0xefff69f3
 8002d50:	40013800 	.word	0x40013800
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40004400 	.word	0x40004400
 8002d5c:	40004800 	.word	0x40004800
 8002d60:	40004c00 	.word	0x40004c00
 8002d64:	40005000 	.word	0x40005000
 8002d68:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	77bb      	strb	r3, [r7, #30]
        break;
 8002d74:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d073      	beq.n	8002e64 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	005a      	lsls	r2, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	085b      	lsrs	r3, r3, #1
 8002d86:	441a      	add	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d90:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b0f      	cmp	r3, #15
 8002d96:	d916      	bls.n	8002dc6 <UART_SetConfig+0x2ee>
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d9e:	d212      	bcs.n	8002dc6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f023 030f 	bic.w	r3, r3, #15
 8002da8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	085b      	lsrs	r3, r3, #1
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	89fb      	ldrh	r3, [r7, #14]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	89fa      	ldrh	r2, [r7, #14]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e04e      	b.n	8002e64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	77bb      	strb	r3, [r7, #30]
 8002dca:	e04b      	b.n	8002e64 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dcc:	7ffb      	ldrb	r3, [r7, #31]
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d827      	bhi.n	8002e22 <UART_SetConfig+0x34a>
 8002dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <UART_SetConfig+0x300>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002dfd 	.word	0x08002dfd
 8002ddc:	08002e05 	.word	0x08002e05
 8002de0:	08002e0d 	.word	0x08002e0d
 8002de4:	08002e23 	.word	0x08002e23
 8002de8:	08002e13 	.word	0x08002e13
 8002dec:	08002e23 	.word	0x08002e23
 8002df0:	08002e23 	.word	0x08002e23
 8002df4:	08002e23 	.word	0x08002e23
 8002df8:	08002e1b 	.word	0x08002e1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dfc:	f7ff fa6a 	bl	80022d4 <HAL_RCC_GetPCLK1Freq>
 8002e00:	61b8      	str	r0, [r7, #24]
        break;
 8002e02:	e013      	b.n	8002e2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e04:	f7ff fa88 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8002e08:	61b8      	str	r0, [r7, #24]
        break;
 8002e0a:	e00f      	b.n	8002e2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e7c <UART_SetConfig+0x3a4>)
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e00c      	b.n	8002e2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e12:	f7ff f9ff 	bl	8002214 <HAL_RCC_GetSysClockFreq>
 8002e16:	61b8      	str	r0, [r7, #24]
        break;
 8002e18:	e008      	b.n	8002e2c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1e:	61bb      	str	r3, [r7, #24]
        break;
 8002e20:	e004      	b.n	8002e2c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	77bb      	strb	r3, [r7, #30]
        break;
 8002e2a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d018      	beq.n	8002e64 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	085a      	lsrs	r2, r3, #1
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	441a      	add	r2, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	2b0f      	cmp	r3, #15
 8002e4a:	d909      	bls.n	8002e60 <UART_SetConfig+0x388>
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e52:	d205      	bcs.n	8002e60 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	e001      	b.n	8002e64 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002e70:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3720      	adds	r7, #32
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	007a1200 	.word	0x007a1200

08002e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f14:	f003 0310 	and.w	r3, r3, #16
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01a      	beq.n	8002f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f7e:	d10a      	bne.n	8002f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	605a      	str	r2, [r3, #4]
  }
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b098      	sub	sp, #96	@ 0x60
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fd4:	f7fd fcae 	bl	8000934 <HAL_GetTick>
 8002fd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d12e      	bne.n	8003046 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f88c 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d021      	beq.n	8003046 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800300a:	e853 3f00 	ldrex	r3, [r3]
 800300e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003016:	653b      	str	r3, [r7, #80]	@ 0x50
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003020:	647b      	str	r3, [r7, #68]	@ 0x44
 8003022:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003024:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003026:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003028:	e841 2300 	strex	r3, r2, [r1]
 800302c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800302e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1e6      	bne.n	8003002 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e062      	b.n	800310c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b04      	cmp	r3, #4
 8003052:	d149      	bne.n	80030e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003054:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800305c:	2200      	movs	r2, #0
 800305e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f856 	bl	8003114 <UART_WaitOnFlagUntilTimeout>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d03c      	beq.n	80030e8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	623b      	str	r3, [r7, #32]
   return(result);
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800308c:	633b      	str	r3, [r7, #48]	@ 0x30
 800308e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800309a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e6      	bne.n	800306e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3308      	adds	r3, #8
 80030a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3308      	adds	r3, #8
 80030be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030c0:	61fa      	str	r2, [r7, #28]
 80030c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	69b9      	ldr	r1, [r7, #24]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	617b      	str	r3, [r7, #20]
   return(result);
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e5      	bne.n	80030a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e011      	b.n	800310c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2220      	movs	r2, #32
 80030ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2220      	movs	r2, #32
 80030f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3758      	adds	r7, #88	@ 0x58
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	4613      	mov	r3, r2
 8003122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003124:	e04f      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d04b      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312e:	f7fd fc01 	bl	8000934 <HAL_GetTick>
 8003132:	4602      	mov	r2, r0
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <UART_WaitOnFlagUntilTimeout+0x30>
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e04e      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	2b00      	cmp	r3, #0
 8003154:	d037      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b80      	cmp	r3, #128	@ 0x80
 800315a:	d034      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b40      	cmp	r3, #64	@ 0x40
 8003160:	d031      	beq.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b08      	cmp	r3, #8
 800316e:	d110      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2208      	movs	r2, #8
 8003176:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003178:	68f8      	ldr	r0, [r7, #12]
 800317a:	f000 f838 	bl	80031ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2208      	movs	r2, #8
 8003182:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e029      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	69db      	ldr	r3, [r3, #28]
 8003198:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800319c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031a0:	d111      	bne.n	80031c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f81e 	bl	80031ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e00f      	b.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4013      	ands	r3, r2
 80031d0:	68ba      	ldr	r2, [r7, #8]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	bf0c      	ite	eq
 80031d6:	2301      	moveq	r3, #1
 80031d8:	2300      	movne	r3, #0
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	461a      	mov	r2, r3
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d0a0      	beq.n	8003126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b095      	sub	sp, #84	@ 0x54
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003206:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800320a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003214:	643b      	str	r3, [r7, #64]	@ 0x40
 8003216:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800321a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003222:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e6      	bne.n	80031f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	6a3b      	ldr	r3, [r7, #32]
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	61fb      	str	r3, [r7, #28]
   return(result);
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3308      	adds	r3, #8
 8003246:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003248:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800324a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800324e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003260:	2b01      	cmp	r3, #1
 8003262:	d118      	bne.n	8003296 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	e853 3f00 	ldrex	r3, [r3]
 8003270:	60bb      	str	r3, [r7, #8]
   return(result);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f023 0310 	bic.w	r3, r3, #16
 8003278:	647b      	str	r3, [r7, #68]	@ 0x44
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	461a      	mov	r2, r3
 8003280:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003286:	6979      	ldr	r1, [r7, #20]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	e841 2300 	strex	r3, r2, [r1]
 800328e:	613b      	str	r3, [r7, #16]
   return(result);
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1e6      	bne.n	8003264 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80032aa:	bf00      	nop
 80032ac:	3754      	adds	r7, #84	@ 0x54
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
	...

080032b8 <std>:
 80032b8:	2300      	movs	r3, #0
 80032ba:	b510      	push	{r4, lr}
 80032bc:	4604      	mov	r4, r0
 80032be:	e9c0 3300 	strd	r3, r3, [r0]
 80032c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032c6:	6083      	str	r3, [r0, #8]
 80032c8:	8181      	strh	r1, [r0, #12]
 80032ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80032cc:	81c2      	strh	r2, [r0, #14]
 80032ce:	6183      	str	r3, [r0, #24]
 80032d0:	4619      	mov	r1, r3
 80032d2:	2208      	movs	r2, #8
 80032d4:	305c      	adds	r0, #92	@ 0x5c
 80032d6:	f000 f9f9 	bl	80036cc <memset>
 80032da:	4b0d      	ldr	r3, [pc, #52]	@ (8003310 <std+0x58>)
 80032dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80032de:	4b0d      	ldr	r3, [pc, #52]	@ (8003314 <std+0x5c>)
 80032e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <std+0x60>)
 80032e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80032e6:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <std+0x64>)
 80032e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80032ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003320 <std+0x68>)
 80032ec:	6224      	str	r4, [r4, #32]
 80032ee:	429c      	cmp	r4, r3
 80032f0:	d006      	beq.n	8003300 <std+0x48>
 80032f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032f6:	4294      	cmp	r4, r2
 80032f8:	d002      	beq.n	8003300 <std+0x48>
 80032fa:	33d0      	adds	r3, #208	@ 0xd0
 80032fc:	429c      	cmp	r4, r3
 80032fe:	d105      	bne.n	800330c <std+0x54>
 8003300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003308:	f000 ba58 	b.w	80037bc <__retarget_lock_init_recursive>
 800330c:	bd10      	pop	{r4, pc}
 800330e:	bf00      	nop
 8003310:	0800351d 	.word	0x0800351d
 8003314:	0800353f 	.word	0x0800353f
 8003318:	08003577 	.word	0x08003577
 800331c:	0800359b 	.word	0x0800359b
 8003320:	200001b4 	.word	0x200001b4

08003324 <stdio_exit_handler>:
 8003324:	4a02      	ldr	r2, [pc, #8]	@ (8003330 <stdio_exit_handler+0xc>)
 8003326:	4903      	ldr	r1, [pc, #12]	@ (8003334 <stdio_exit_handler+0x10>)
 8003328:	4803      	ldr	r0, [pc, #12]	@ (8003338 <stdio_exit_handler+0x14>)
 800332a:	f000 b869 	b.w	8003400 <_fwalk_sglue>
 800332e:	bf00      	nop
 8003330:	20000018 	.word	0x20000018
 8003334:	0800405d 	.word	0x0800405d
 8003338:	20000028 	.word	0x20000028

0800333c <cleanup_stdio>:
 800333c:	6841      	ldr	r1, [r0, #4]
 800333e:	4b0c      	ldr	r3, [pc, #48]	@ (8003370 <cleanup_stdio+0x34>)
 8003340:	4299      	cmp	r1, r3
 8003342:	b510      	push	{r4, lr}
 8003344:	4604      	mov	r4, r0
 8003346:	d001      	beq.n	800334c <cleanup_stdio+0x10>
 8003348:	f000 fe88 	bl	800405c <_fflush_r>
 800334c:	68a1      	ldr	r1, [r4, #8]
 800334e:	4b09      	ldr	r3, [pc, #36]	@ (8003374 <cleanup_stdio+0x38>)
 8003350:	4299      	cmp	r1, r3
 8003352:	d002      	beq.n	800335a <cleanup_stdio+0x1e>
 8003354:	4620      	mov	r0, r4
 8003356:	f000 fe81 	bl	800405c <_fflush_r>
 800335a:	68e1      	ldr	r1, [r4, #12]
 800335c:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <cleanup_stdio+0x3c>)
 800335e:	4299      	cmp	r1, r3
 8003360:	d004      	beq.n	800336c <cleanup_stdio+0x30>
 8003362:	4620      	mov	r0, r4
 8003364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003368:	f000 be78 	b.w	800405c <_fflush_r>
 800336c:	bd10      	pop	{r4, pc}
 800336e:	bf00      	nop
 8003370:	200001b4 	.word	0x200001b4
 8003374:	2000021c 	.word	0x2000021c
 8003378:	20000284 	.word	0x20000284

0800337c <global_stdio_init.part.0>:
 800337c:	b510      	push	{r4, lr}
 800337e:	4b0b      	ldr	r3, [pc, #44]	@ (80033ac <global_stdio_init.part.0+0x30>)
 8003380:	4c0b      	ldr	r4, [pc, #44]	@ (80033b0 <global_stdio_init.part.0+0x34>)
 8003382:	4a0c      	ldr	r2, [pc, #48]	@ (80033b4 <global_stdio_init.part.0+0x38>)
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	4620      	mov	r0, r4
 8003388:	2200      	movs	r2, #0
 800338a:	2104      	movs	r1, #4
 800338c:	f7ff ff94 	bl	80032b8 <std>
 8003390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003394:	2201      	movs	r2, #1
 8003396:	2109      	movs	r1, #9
 8003398:	f7ff ff8e 	bl	80032b8 <std>
 800339c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80033a0:	2202      	movs	r2, #2
 80033a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033a6:	2112      	movs	r1, #18
 80033a8:	f7ff bf86 	b.w	80032b8 <std>
 80033ac:	200002ec 	.word	0x200002ec
 80033b0:	200001b4 	.word	0x200001b4
 80033b4:	08003325 	.word	0x08003325

080033b8 <__sfp_lock_acquire>:
 80033b8:	4801      	ldr	r0, [pc, #4]	@ (80033c0 <__sfp_lock_acquire+0x8>)
 80033ba:	f000 ba00 	b.w	80037be <__retarget_lock_acquire_recursive>
 80033be:	bf00      	nop
 80033c0:	200002f5 	.word	0x200002f5

080033c4 <__sfp_lock_release>:
 80033c4:	4801      	ldr	r0, [pc, #4]	@ (80033cc <__sfp_lock_release+0x8>)
 80033c6:	f000 b9fb 	b.w	80037c0 <__retarget_lock_release_recursive>
 80033ca:	bf00      	nop
 80033cc:	200002f5 	.word	0x200002f5

080033d0 <__sinit>:
 80033d0:	b510      	push	{r4, lr}
 80033d2:	4604      	mov	r4, r0
 80033d4:	f7ff fff0 	bl	80033b8 <__sfp_lock_acquire>
 80033d8:	6a23      	ldr	r3, [r4, #32]
 80033da:	b11b      	cbz	r3, 80033e4 <__sinit+0x14>
 80033dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80033e0:	f7ff bff0 	b.w	80033c4 <__sfp_lock_release>
 80033e4:	4b04      	ldr	r3, [pc, #16]	@ (80033f8 <__sinit+0x28>)
 80033e6:	6223      	str	r3, [r4, #32]
 80033e8:	4b04      	ldr	r3, [pc, #16]	@ (80033fc <__sinit+0x2c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1f5      	bne.n	80033dc <__sinit+0xc>
 80033f0:	f7ff ffc4 	bl	800337c <global_stdio_init.part.0>
 80033f4:	e7f2      	b.n	80033dc <__sinit+0xc>
 80033f6:	bf00      	nop
 80033f8:	0800333d 	.word	0x0800333d
 80033fc:	200002ec 	.word	0x200002ec

08003400 <_fwalk_sglue>:
 8003400:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003404:	4607      	mov	r7, r0
 8003406:	4688      	mov	r8, r1
 8003408:	4614      	mov	r4, r2
 800340a:	2600      	movs	r6, #0
 800340c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003410:	f1b9 0901 	subs.w	r9, r9, #1
 8003414:	d505      	bpl.n	8003422 <_fwalk_sglue+0x22>
 8003416:	6824      	ldr	r4, [r4, #0]
 8003418:	2c00      	cmp	r4, #0
 800341a:	d1f7      	bne.n	800340c <_fwalk_sglue+0xc>
 800341c:	4630      	mov	r0, r6
 800341e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003422:	89ab      	ldrh	r3, [r5, #12]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d907      	bls.n	8003438 <_fwalk_sglue+0x38>
 8003428:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800342c:	3301      	adds	r3, #1
 800342e:	d003      	beq.n	8003438 <_fwalk_sglue+0x38>
 8003430:	4629      	mov	r1, r5
 8003432:	4638      	mov	r0, r7
 8003434:	47c0      	blx	r8
 8003436:	4306      	orrs	r6, r0
 8003438:	3568      	adds	r5, #104	@ 0x68
 800343a:	e7e9      	b.n	8003410 <_fwalk_sglue+0x10>

0800343c <iprintf>:
 800343c:	b40f      	push	{r0, r1, r2, r3}
 800343e:	b507      	push	{r0, r1, r2, lr}
 8003440:	4906      	ldr	r1, [pc, #24]	@ (800345c <iprintf+0x20>)
 8003442:	ab04      	add	r3, sp, #16
 8003444:	6808      	ldr	r0, [r1, #0]
 8003446:	f853 2b04 	ldr.w	r2, [r3], #4
 800344a:	6881      	ldr	r1, [r0, #8]
 800344c:	9301      	str	r3, [sp, #4]
 800344e:	f000 fadb 	bl	8003a08 <_vfiprintf_r>
 8003452:	b003      	add	sp, #12
 8003454:	f85d eb04 	ldr.w	lr, [sp], #4
 8003458:	b004      	add	sp, #16
 800345a:	4770      	bx	lr
 800345c:	20000024 	.word	0x20000024

08003460 <_puts_r>:
 8003460:	6a03      	ldr	r3, [r0, #32]
 8003462:	b570      	push	{r4, r5, r6, lr}
 8003464:	6884      	ldr	r4, [r0, #8]
 8003466:	4605      	mov	r5, r0
 8003468:	460e      	mov	r6, r1
 800346a:	b90b      	cbnz	r3, 8003470 <_puts_r+0x10>
 800346c:	f7ff ffb0 	bl	80033d0 <__sinit>
 8003470:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003472:	07db      	lsls	r3, r3, #31
 8003474:	d405      	bmi.n	8003482 <_puts_r+0x22>
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	0598      	lsls	r0, r3, #22
 800347a:	d402      	bmi.n	8003482 <_puts_r+0x22>
 800347c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800347e:	f000 f99e 	bl	80037be <__retarget_lock_acquire_recursive>
 8003482:	89a3      	ldrh	r3, [r4, #12]
 8003484:	0719      	lsls	r1, r3, #28
 8003486:	d502      	bpl.n	800348e <_puts_r+0x2e>
 8003488:	6923      	ldr	r3, [r4, #16]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d135      	bne.n	80034fa <_puts_r+0x9a>
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	f000 f8c5 	bl	8003620 <__swsetup_r>
 8003496:	b380      	cbz	r0, 80034fa <_puts_r+0x9a>
 8003498:	f04f 35ff 	mov.w	r5, #4294967295
 800349c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800349e:	07da      	lsls	r2, r3, #31
 80034a0:	d405      	bmi.n	80034ae <_puts_r+0x4e>
 80034a2:	89a3      	ldrh	r3, [r4, #12]
 80034a4:	059b      	lsls	r3, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_puts_r+0x4e>
 80034a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80034aa:	f000 f989 	bl	80037c0 <__retarget_lock_release_recursive>
 80034ae:	4628      	mov	r0, r5
 80034b0:	bd70      	pop	{r4, r5, r6, pc}
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	da04      	bge.n	80034c0 <_puts_r+0x60>
 80034b6:	69a2      	ldr	r2, [r4, #24]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	dc17      	bgt.n	80034ec <_puts_r+0x8c>
 80034bc:	290a      	cmp	r1, #10
 80034be:	d015      	beq.n	80034ec <_puts_r+0x8c>
 80034c0:	6823      	ldr	r3, [r4, #0]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	6022      	str	r2, [r4, #0]
 80034c6:	7019      	strb	r1, [r3, #0]
 80034c8:	68a3      	ldr	r3, [r4, #8]
 80034ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80034ce:	3b01      	subs	r3, #1
 80034d0:	60a3      	str	r3, [r4, #8]
 80034d2:	2900      	cmp	r1, #0
 80034d4:	d1ed      	bne.n	80034b2 <_puts_r+0x52>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da11      	bge.n	80034fe <_puts_r+0x9e>
 80034da:	4622      	mov	r2, r4
 80034dc:	210a      	movs	r1, #10
 80034de:	4628      	mov	r0, r5
 80034e0:	f000 f85f 	bl	80035a2 <__swbuf_r>
 80034e4:	3001      	adds	r0, #1
 80034e6:	d0d7      	beq.n	8003498 <_puts_r+0x38>
 80034e8:	250a      	movs	r5, #10
 80034ea:	e7d7      	b.n	800349c <_puts_r+0x3c>
 80034ec:	4622      	mov	r2, r4
 80034ee:	4628      	mov	r0, r5
 80034f0:	f000 f857 	bl	80035a2 <__swbuf_r>
 80034f4:	3001      	adds	r0, #1
 80034f6:	d1e7      	bne.n	80034c8 <_puts_r+0x68>
 80034f8:	e7ce      	b.n	8003498 <_puts_r+0x38>
 80034fa:	3e01      	subs	r6, #1
 80034fc:	e7e4      	b.n	80034c8 <_puts_r+0x68>
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	6022      	str	r2, [r4, #0]
 8003504:	220a      	movs	r2, #10
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e7ee      	b.n	80034e8 <_puts_r+0x88>
	...

0800350c <puts>:
 800350c:	4b02      	ldr	r3, [pc, #8]	@ (8003518 <puts+0xc>)
 800350e:	4601      	mov	r1, r0
 8003510:	6818      	ldr	r0, [r3, #0]
 8003512:	f7ff bfa5 	b.w	8003460 <_puts_r>
 8003516:	bf00      	nop
 8003518:	20000024 	.word	0x20000024

0800351c <__sread>:
 800351c:	b510      	push	{r4, lr}
 800351e:	460c      	mov	r4, r1
 8003520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003524:	f000 f8fc 	bl	8003720 <_read_r>
 8003528:	2800      	cmp	r0, #0
 800352a:	bfab      	itete	ge
 800352c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800352e:	89a3      	ldrhlt	r3, [r4, #12]
 8003530:	181b      	addge	r3, r3, r0
 8003532:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003536:	bfac      	ite	ge
 8003538:	6563      	strge	r3, [r4, #84]	@ 0x54
 800353a:	81a3      	strhlt	r3, [r4, #12]
 800353c:	bd10      	pop	{r4, pc}

0800353e <__swrite>:
 800353e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003542:	461f      	mov	r7, r3
 8003544:	898b      	ldrh	r3, [r1, #12]
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	4605      	mov	r5, r0
 800354a:	460c      	mov	r4, r1
 800354c:	4616      	mov	r6, r2
 800354e:	d505      	bpl.n	800355c <__swrite+0x1e>
 8003550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003554:	2302      	movs	r3, #2
 8003556:	2200      	movs	r2, #0
 8003558:	f000 f8d0 	bl	80036fc <_lseek_r>
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003562:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003566:	81a3      	strh	r3, [r4, #12]
 8003568:	4632      	mov	r2, r6
 800356a:	463b      	mov	r3, r7
 800356c:	4628      	mov	r0, r5
 800356e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003572:	f000 b8e7 	b.w	8003744 <_write_r>

08003576 <__sseek>:
 8003576:	b510      	push	{r4, lr}
 8003578:	460c      	mov	r4, r1
 800357a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800357e:	f000 f8bd 	bl	80036fc <_lseek_r>
 8003582:	1c43      	adds	r3, r0, #1
 8003584:	89a3      	ldrh	r3, [r4, #12]
 8003586:	bf15      	itete	ne
 8003588:	6560      	strne	r0, [r4, #84]	@ 0x54
 800358a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800358e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003592:	81a3      	strheq	r3, [r4, #12]
 8003594:	bf18      	it	ne
 8003596:	81a3      	strhne	r3, [r4, #12]
 8003598:	bd10      	pop	{r4, pc}

0800359a <__sclose>:
 800359a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800359e:	f000 b89d 	b.w	80036dc <_close_r>

080035a2 <__swbuf_r>:
 80035a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a4:	460e      	mov	r6, r1
 80035a6:	4614      	mov	r4, r2
 80035a8:	4605      	mov	r5, r0
 80035aa:	b118      	cbz	r0, 80035b4 <__swbuf_r+0x12>
 80035ac:	6a03      	ldr	r3, [r0, #32]
 80035ae:	b90b      	cbnz	r3, 80035b4 <__swbuf_r+0x12>
 80035b0:	f7ff ff0e 	bl	80033d0 <__sinit>
 80035b4:	69a3      	ldr	r3, [r4, #24]
 80035b6:	60a3      	str	r3, [r4, #8]
 80035b8:	89a3      	ldrh	r3, [r4, #12]
 80035ba:	071a      	lsls	r2, r3, #28
 80035bc:	d501      	bpl.n	80035c2 <__swbuf_r+0x20>
 80035be:	6923      	ldr	r3, [r4, #16]
 80035c0:	b943      	cbnz	r3, 80035d4 <__swbuf_r+0x32>
 80035c2:	4621      	mov	r1, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	f000 f82b 	bl	8003620 <__swsetup_r>
 80035ca:	b118      	cbz	r0, 80035d4 <__swbuf_r+0x32>
 80035cc:	f04f 37ff 	mov.w	r7, #4294967295
 80035d0:	4638      	mov	r0, r7
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d4:	6823      	ldr	r3, [r4, #0]
 80035d6:	6922      	ldr	r2, [r4, #16]
 80035d8:	1a98      	subs	r0, r3, r2
 80035da:	6963      	ldr	r3, [r4, #20]
 80035dc:	b2f6      	uxtb	r6, r6
 80035de:	4283      	cmp	r3, r0
 80035e0:	4637      	mov	r7, r6
 80035e2:	dc05      	bgt.n	80035f0 <__swbuf_r+0x4e>
 80035e4:	4621      	mov	r1, r4
 80035e6:	4628      	mov	r0, r5
 80035e8:	f000 fd38 	bl	800405c <_fflush_r>
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d1ed      	bne.n	80035cc <__swbuf_r+0x2a>
 80035f0:	68a3      	ldr	r3, [r4, #8]
 80035f2:	3b01      	subs	r3, #1
 80035f4:	60a3      	str	r3, [r4, #8]
 80035f6:	6823      	ldr	r3, [r4, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	6022      	str	r2, [r4, #0]
 80035fc:	701e      	strb	r6, [r3, #0]
 80035fe:	6962      	ldr	r2, [r4, #20]
 8003600:	1c43      	adds	r3, r0, #1
 8003602:	429a      	cmp	r2, r3
 8003604:	d004      	beq.n	8003610 <__swbuf_r+0x6e>
 8003606:	89a3      	ldrh	r3, [r4, #12]
 8003608:	07db      	lsls	r3, r3, #31
 800360a:	d5e1      	bpl.n	80035d0 <__swbuf_r+0x2e>
 800360c:	2e0a      	cmp	r6, #10
 800360e:	d1df      	bne.n	80035d0 <__swbuf_r+0x2e>
 8003610:	4621      	mov	r1, r4
 8003612:	4628      	mov	r0, r5
 8003614:	f000 fd22 	bl	800405c <_fflush_r>
 8003618:	2800      	cmp	r0, #0
 800361a:	d0d9      	beq.n	80035d0 <__swbuf_r+0x2e>
 800361c:	e7d6      	b.n	80035cc <__swbuf_r+0x2a>
	...

08003620 <__swsetup_r>:
 8003620:	b538      	push	{r3, r4, r5, lr}
 8003622:	4b29      	ldr	r3, [pc, #164]	@ (80036c8 <__swsetup_r+0xa8>)
 8003624:	4605      	mov	r5, r0
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	460c      	mov	r4, r1
 800362a:	b118      	cbz	r0, 8003634 <__swsetup_r+0x14>
 800362c:	6a03      	ldr	r3, [r0, #32]
 800362e:	b90b      	cbnz	r3, 8003634 <__swsetup_r+0x14>
 8003630:	f7ff fece 	bl	80033d0 <__sinit>
 8003634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003638:	0719      	lsls	r1, r3, #28
 800363a:	d422      	bmi.n	8003682 <__swsetup_r+0x62>
 800363c:	06da      	lsls	r2, r3, #27
 800363e:	d407      	bmi.n	8003650 <__swsetup_r+0x30>
 8003640:	2209      	movs	r2, #9
 8003642:	602a      	str	r2, [r5, #0]
 8003644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	f04f 30ff 	mov.w	r0, #4294967295
 800364e:	e033      	b.n	80036b8 <__swsetup_r+0x98>
 8003650:	0758      	lsls	r0, r3, #29
 8003652:	d512      	bpl.n	800367a <__swsetup_r+0x5a>
 8003654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003656:	b141      	cbz	r1, 800366a <__swsetup_r+0x4a>
 8003658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800365c:	4299      	cmp	r1, r3
 800365e:	d002      	beq.n	8003666 <__swsetup_r+0x46>
 8003660:	4628      	mov	r0, r5
 8003662:	f000 f8af 	bl	80037c4 <_free_r>
 8003666:	2300      	movs	r3, #0
 8003668:	6363      	str	r3, [r4, #52]	@ 0x34
 800366a:	89a3      	ldrh	r3, [r4, #12]
 800366c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003670:	81a3      	strh	r3, [r4, #12]
 8003672:	2300      	movs	r3, #0
 8003674:	6063      	str	r3, [r4, #4]
 8003676:	6923      	ldr	r3, [r4, #16]
 8003678:	6023      	str	r3, [r4, #0]
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	f043 0308 	orr.w	r3, r3, #8
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	6923      	ldr	r3, [r4, #16]
 8003684:	b94b      	cbnz	r3, 800369a <__swsetup_r+0x7a>
 8003686:	89a3      	ldrh	r3, [r4, #12]
 8003688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800368c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003690:	d003      	beq.n	800369a <__swsetup_r+0x7a>
 8003692:	4621      	mov	r1, r4
 8003694:	4628      	mov	r0, r5
 8003696:	f000 fd2f 	bl	80040f8 <__smakebuf_r>
 800369a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800369e:	f013 0201 	ands.w	r2, r3, #1
 80036a2:	d00a      	beq.n	80036ba <__swsetup_r+0x9a>
 80036a4:	2200      	movs	r2, #0
 80036a6:	60a2      	str	r2, [r4, #8]
 80036a8:	6962      	ldr	r2, [r4, #20]
 80036aa:	4252      	negs	r2, r2
 80036ac:	61a2      	str	r2, [r4, #24]
 80036ae:	6922      	ldr	r2, [r4, #16]
 80036b0:	b942      	cbnz	r2, 80036c4 <__swsetup_r+0xa4>
 80036b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80036b6:	d1c5      	bne.n	8003644 <__swsetup_r+0x24>
 80036b8:	bd38      	pop	{r3, r4, r5, pc}
 80036ba:	0799      	lsls	r1, r3, #30
 80036bc:	bf58      	it	pl
 80036be:	6962      	ldrpl	r2, [r4, #20]
 80036c0:	60a2      	str	r2, [r4, #8]
 80036c2:	e7f4      	b.n	80036ae <__swsetup_r+0x8e>
 80036c4:	2000      	movs	r0, #0
 80036c6:	e7f7      	b.n	80036b8 <__swsetup_r+0x98>
 80036c8:	20000024 	.word	0x20000024

080036cc <memset>:
 80036cc:	4402      	add	r2, r0
 80036ce:	4603      	mov	r3, r0
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d100      	bne.n	80036d6 <memset+0xa>
 80036d4:	4770      	bx	lr
 80036d6:	f803 1b01 	strb.w	r1, [r3], #1
 80036da:	e7f9      	b.n	80036d0 <memset+0x4>

080036dc <_close_r>:
 80036dc:	b538      	push	{r3, r4, r5, lr}
 80036de:	4d06      	ldr	r5, [pc, #24]	@ (80036f8 <_close_r+0x1c>)
 80036e0:	2300      	movs	r3, #0
 80036e2:	4604      	mov	r4, r0
 80036e4:	4608      	mov	r0, r1
 80036e6:	602b      	str	r3, [r5, #0]
 80036e8:	f7fd f824 	bl	8000734 <_close>
 80036ec:	1c43      	adds	r3, r0, #1
 80036ee:	d102      	bne.n	80036f6 <_close_r+0x1a>
 80036f0:	682b      	ldr	r3, [r5, #0]
 80036f2:	b103      	cbz	r3, 80036f6 <_close_r+0x1a>
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	bd38      	pop	{r3, r4, r5, pc}
 80036f8:	200002f0 	.word	0x200002f0

080036fc <_lseek_r>:
 80036fc:	b538      	push	{r3, r4, r5, lr}
 80036fe:	4d07      	ldr	r5, [pc, #28]	@ (800371c <_lseek_r+0x20>)
 8003700:	4604      	mov	r4, r0
 8003702:	4608      	mov	r0, r1
 8003704:	4611      	mov	r1, r2
 8003706:	2200      	movs	r2, #0
 8003708:	602a      	str	r2, [r5, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	f7fd f839 	bl	8000782 <_lseek>
 8003710:	1c43      	adds	r3, r0, #1
 8003712:	d102      	bne.n	800371a <_lseek_r+0x1e>
 8003714:	682b      	ldr	r3, [r5, #0]
 8003716:	b103      	cbz	r3, 800371a <_lseek_r+0x1e>
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	bd38      	pop	{r3, r4, r5, pc}
 800371c:	200002f0 	.word	0x200002f0

08003720 <_read_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	4d07      	ldr	r5, [pc, #28]	@ (8003740 <_read_r+0x20>)
 8003724:	4604      	mov	r4, r0
 8003726:	4608      	mov	r0, r1
 8003728:	4611      	mov	r1, r2
 800372a:	2200      	movs	r2, #0
 800372c:	602a      	str	r2, [r5, #0]
 800372e:	461a      	mov	r2, r3
 8003730:	f7fc ffe3 	bl	80006fa <_read>
 8003734:	1c43      	adds	r3, r0, #1
 8003736:	d102      	bne.n	800373e <_read_r+0x1e>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	b103      	cbz	r3, 800373e <_read_r+0x1e>
 800373c:	6023      	str	r3, [r4, #0]
 800373e:	bd38      	pop	{r3, r4, r5, pc}
 8003740:	200002f0 	.word	0x200002f0

08003744 <_write_r>:
 8003744:	b538      	push	{r3, r4, r5, lr}
 8003746:	4d07      	ldr	r5, [pc, #28]	@ (8003764 <_write_r+0x20>)
 8003748:	4604      	mov	r4, r0
 800374a:	4608      	mov	r0, r1
 800374c:	4611      	mov	r1, r2
 800374e:	2200      	movs	r2, #0
 8003750:	602a      	str	r2, [r5, #0]
 8003752:	461a      	mov	r2, r3
 8003754:	f7fc fdea 	bl	800032c <_write>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d102      	bne.n	8003762 <_write_r+0x1e>
 800375c:	682b      	ldr	r3, [r5, #0]
 800375e:	b103      	cbz	r3, 8003762 <_write_r+0x1e>
 8003760:	6023      	str	r3, [r4, #0]
 8003762:	bd38      	pop	{r3, r4, r5, pc}
 8003764:	200002f0 	.word	0x200002f0

08003768 <__errno>:
 8003768:	4b01      	ldr	r3, [pc, #4]	@ (8003770 <__errno+0x8>)
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	20000024 	.word	0x20000024

08003774 <__libc_init_array>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4d0d      	ldr	r5, [pc, #52]	@ (80037ac <__libc_init_array+0x38>)
 8003778:	4c0d      	ldr	r4, [pc, #52]	@ (80037b0 <__libc_init_array+0x3c>)
 800377a:	1b64      	subs	r4, r4, r5
 800377c:	10a4      	asrs	r4, r4, #2
 800377e:	2600      	movs	r6, #0
 8003780:	42a6      	cmp	r6, r4
 8003782:	d109      	bne.n	8003798 <__libc_init_array+0x24>
 8003784:	4d0b      	ldr	r5, [pc, #44]	@ (80037b4 <__libc_init_array+0x40>)
 8003786:	4c0c      	ldr	r4, [pc, #48]	@ (80037b8 <__libc_init_array+0x44>)
 8003788:	f000 fd24 	bl	80041d4 <_init>
 800378c:	1b64      	subs	r4, r4, r5
 800378e:	10a4      	asrs	r4, r4, #2
 8003790:	2600      	movs	r6, #0
 8003792:	42a6      	cmp	r6, r4
 8003794:	d105      	bne.n	80037a2 <__libc_init_array+0x2e>
 8003796:	bd70      	pop	{r4, r5, r6, pc}
 8003798:	f855 3b04 	ldr.w	r3, [r5], #4
 800379c:	4798      	blx	r3
 800379e:	3601      	adds	r6, #1
 80037a0:	e7ee      	b.n	8003780 <__libc_init_array+0xc>
 80037a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80037a6:	4798      	blx	r3
 80037a8:	3601      	adds	r6, #1
 80037aa:	e7f2      	b.n	8003792 <__libc_init_array+0x1e>
 80037ac:	080042c8 	.word	0x080042c8
 80037b0:	080042c8 	.word	0x080042c8
 80037b4:	080042c8 	.word	0x080042c8
 80037b8:	080042cc 	.word	0x080042cc

080037bc <__retarget_lock_init_recursive>:
 80037bc:	4770      	bx	lr

080037be <__retarget_lock_acquire_recursive>:
 80037be:	4770      	bx	lr

080037c0 <__retarget_lock_release_recursive>:
 80037c0:	4770      	bx	lr
	...

080037c4 <_free_r>:
 80037c4:	b538      	push	{r3, r4, r5, lr}
 80037c6:	4605      	mov	r5, r0
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d041      	beq.n	8003850 <_free_r+0x8c>
 80037cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037d0:	1f0c      	subs	r4, r1, #4
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bfb8      	it	lt
 80037d6:	18e4      	addlt	r4, r4, r3
 80037d8:	f000 f8e0 	bl	800399c <__malloc_lock>
 80037dc:	4a1d      	ldr	r2, [pc, #116]	@ (8003854 <_free_r+0x90>)
 80037de:	6813      	ldr	r3, [r2, #0]
 80037e0:	b933      	cbnz	r3, 80037f0 <_free_r+0x2c>
 80037e2:	6063      	str	r3, [r4, #4]
 80037e4:	6014      	str	r4, [r2, #0]
 80037e6:	4628      	mov	r0, r5
 80037e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ec:	f000 b8dc 	b.w	80039a8 <__malloc_unlock>
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	d908      	bls.n	8003806 <_free_r+0x42>
 80037f4:	6820      	ldr	r0, [r4, #0]
 80037f6:	1821      	adds	r1, r4, r0
 80037f8:	428b      	cmp	r3, r1
 80037fa:	bf01      	itttt	eq
 80037fc:	6819      	ldreq	r1, [r3, #0]
 80037fe:	685b      	ldreq	r3, [r3, #4]
 8003800:	1809      	addeq	r1, r1, r0
 8003802:	6021      	streq	r1, [r4, #0]
 8003804:	e7ed      	b.n	80037e2 <_free_r+0x1e>
 8003806:	461a      	mov	r2, r3
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	b10b      	cbz	r3, 8003810 <_free_r+0x4c>
 800380c:	42a3      	cmp	r3, r4
 800380e:	d9fa      	bls.n	8003806 <_free_r+0x42>
 8003810:	6811      	ldr	r1, [r2, #0]
 8003812:	1850      	adds	r0, r2, r1
 8003814:	42a0      	cmp	r0, r4
 8003816:	d10b      	bne.n	8003830 <_free_r+0x6c>
 8003818:	6820      	ldr	r0, [r4, #0]
 800381a:	4401      	add	r1, r0
 800381c:	1850      	adds	r0, r2, r1
 800381e:	4283      	cmp	r3, r0
 8003820:	6011      	str	r1, [r2, #0]
 8003822:	d1e0      	bne.n	80037e6 <_free_r+0x22>
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	6053      	str	r3, [r2, #4]
 800382a:	4408      	add	r0, r1
 800382c:	6010      	str	r0, [r2, #0]
 800382e:	e7da      	b.n	80037e6 <_free_r+0x22>
 8003830:	d902      	bls.n	8003838 <_free_r+0x74>
 8003832:	230c      	movs	r3, #12
 8003834:	602b      	str	r3, [r5, #0]
 8003836:	e7d6      	b.n	80037e6 <_free_r+0x22>
 8003838:	6820      	ldr	r0, [r4, #0]
 800383a:	1821      	adds	r1, r4, r0
 800383c:	428b      	cmp	r3, r1
 800383e:	bf04      	itt	eq
 8003840:	6819      	ldreq	r1, [r3, #0]
 8003842:	685b      	ldreq	r3, [r3, #4]
 8003844:	6063      	str	r3, [r4, #4]
 8003846:	bf04      	itt	eq
 8003848:	1809      	addeq	r1, r1, r0
 800384a:	6021      	streq	r1, [r4, #0]
 800384c:	6054      	str	r4, [r2, #4]
 800384e:	e7ca      	b.n	80037e6 <_free_r+0x22>
 8003850:	bd38      	pop	{r3, r4, r5, pc}
 8003852:	bf00      	nop
 8003854:	200002fc 	.word	0x200002fc

08003858 <sbrk_aligned>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4e0f      	ldr	r6, [pc, #60]	@ (8003898 <sbrk_aligned+0x40>)
 800385c:	460c      	mov	r4, r1
 800385e:	6831      	ldr	r1, [r6, #0]
 8003860:	4605      	mov	r5, r0
 8003862:	b911      	cbnz	r1, 800386a <sbrk_aligned+0x12>
 8003864:	f000 fca6 	bl	80041b4 <_sbrk_r>
 8003868:	6030      	str	r0, [r6, #0]
 800386a:	4621      	mov	r1, r4
 800386c:	4628      	mov	r0, r5
 800386e:	f000 fca1 	bl	80041b4 <_sbrk_r>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d103      	bne.n	800387e <sbrk_aligned+0x26>
 8003876:	f04f 34ff 	mov.w	r4, #4294967295
 800387a:	4620      	mov	r0, r4
 800387c:	bd70      	pop	{r4, r5, r6, pc}
 800387e:	1cc4      	adds	r4, r0, #3
 8003880:	f024 0403 	bic.w	r4, r4, #3
 8003884:	42a0      	cmp	r0, r4
 8003886:	d0f8      	beq.n	800387a <sbrk_aligned+0x22>
 8003888:	1a21      	subs	r1, r4, r0
 800388a:	4628      	mov	r0, r5
 800388c:	f000 fc92 	bl	80041b4 <_sbrk_r>
 8003890:	3001      	adds	r0, #1
 8003892:	d1f2      	bne.n	800387a <sbrk_aligned+0x22>
 8003894:	e7ef      	b.n	8003876 <sbrk_aligned+0x1e>
 8003896:	bf00      	nop
 8003898:	200002f8 	.word	0x200002f8

0800389c <_malloc_r>:
 800389c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038a0:	1ccd      	adds	r5, r1, #3
 80038a2:	f025 0503 	bic.w	r5, r5, #3
 80038a6:	3508      	adds	r5, #8
 80038a8:	2d0c      	cmp	r5, #12
 80038aa:	bf38      	it	cc
 80038ac:	250c      	movcc	r5, #12
 80038ae:	2d00      	cmp	r5, #0
 80038b0:	4606      	mov	r6, r0
 80038b2:	db01      	blt.n	80038b8 <_malloc_r+0x1c>
 80038b4:	42a9      	cmp	r1, r5
 80038b6:	d904      	bls.n	80038c2 <_malloc_r+0x26>
 80038b8:	230c      	movs	r3, #12
 80038ba:	6033      	str	r3, [r6, #0]
 80038bc:	2000      	movs	r0, #0
 80038be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003998 <_malloc_r+0xfc>
 80038c6:	f000 f869 	bl	800399c <__malloc_lock>
 80038ca:	f8d8 3000 	ldr.w	r3, [r8]
 80038ce:	461c      	mov	r4, r3
 80038d0:	bb44      	cbnz	r4, 8003924 <_malloc_r+0x88>
 80038d2:	4629      	mov	r1, r5
 80038d4:	4630      	mov	r0, r6
 80038d6:	f7ff ffbf 	bl	8003858 <sbrk_aligned>
 80038da:	1c43      	adds	r3, r0, #1
 80038dc:	4604      	mov	r4, r0
 80038de:	d158      	bne.n	8003992 <_malloc_r+0xf6>
 80038e0:	f8d8 4000 	ldr.w	r4, [r8]
 80038e4:	4627      	mov	r7, r4
 80038e6:	2f00      	cmp	r7, #0
 80038e8:	d143      	bne.n	8003972 <_malloc_r+0xd6>
 80038ea:	2c00      	cmp	r4, #0
 80038ec:	d04b      	beq.n	8003986 <_malloc_r+0xea>
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	4639      	mov	r1, r7
 80038f2:	4630      	mov	r0, r6
 80038f4:	eb04 0903 	add.w	r9, r4, r3
 80038f8:	f000 fc5c 	bl	80041b4 <_sbrk_r>
 80038fc:	4581      	cmp	r9, r0
 80038fe:	d142      	bne.n	8003986 <_malloc_r+0xea>
 8003900:	6821      	ldr	r1, [r4, #0]
 8003902:	1a6d      	subs	r5, r5, r1
 8003904:	4629      	mov	r1, r5
 8003906:	4630      	mov	r0, r6
 8003908:	f7ff ffa6 	bl	8003858 <sbrk_aligned>
 800390c:	3001      	adds	r0, #1
 800390e:	d03a      	beq.n	8003986 <_malloc_r+0xea>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	442b      	add	r3, r5
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	f8d8 3000 	ldr.w	r3, [r8]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	bb62      	cbnz	r2, 8003978 <_malloc_r+0xdc>
 800391e:	f8c8 7000 	str.w	r7, [r8]
 8003922:	e00f      	b.n	8003944 <_malloc_r+0xa8>
 8003924:	6822      	ldr	r2, [r4, #0]
 8003926:	1b52      	subs	r2, r2, r5
 8003928:	d420      	bmi.n	800396c <_malloc_r+0xd0>
 800392a:	2a0b      	cmp	r2, #11
 800392c:	d917      	bls.n	800395e <_malloc_r+0xc2>
 800392e:	1961      	adds	r1, r4, r5
 8003930:	42a3      	cmp	r3, r4
 8003932:	6025      	str	r5, [r4, #0]
 8003934:	bf18      	it	ne
 8003936:	6059      	strne	r1, [r3, #4]
 8003938:	6863      	ldr	r3, [r4, #4]
 800393a:	bf08      	it	eq
 800393c:	f8c8 1000 	streq.w	r1, [r8]
 8003940:	5162      	str	r2, [r4, r5]
 8003942:	604b      	str	r3, [r1, #4]
 8003944:	4630      	mov	r0, r6
 8003946:	f000 f82f 	bl	80039a8 <__malloc_unlock>
 800394a:	f104 000b 	add.w	r0, r4, #11
 800394e:	1d23      	adds	r3, r4, #4
 8003950:	f020 0007 	bic.w	r0, r0, #7
 8003954:	1ac2      	subs	r2, r0, r3
 8003956:	bf1c      	itt	ne
 8003958:	1a1b      	subne	r3, r3, r0
 800395a:	50a3      	strne	r3, [r4, r2]
 800395c:	e7af      	b.n	80038be <_malloc_r+0x22>
 800395e:	6862      	ldr	r2, [r4, #4]
 8003960:	42a3      	cmp	r3, r4
 8003962:	bf0c      	ite	eq
 8003964:	f8c8 2000 	streq.w	r2, [r8]
 8003968:	605a      	strne	r2, [r3, #4]
 800396a:	e7eb      	b.n	8003944 <_malloc_r+0xa8>
 800396c:	4623      	mov	r3, r4
 800396e:	6864      	ldr	r4, [r4, #4]
 8003970:	e7ae      	b.n	80038d0 <_malloc_r+0x34>
 8003972:	463c      	mov	r4, r7
 8003974:	687f      	ldr	r7, [r7, #4]
 8003976:	e7b6      	b.n	80038e6 <_malloc_r+0x4a>
 8003978:	461a      	mov	r2, r3
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	42a3      	cmp	r3, r4
 800397e:	d1fb      	bne.n	8003978 <_malloc_r+0xdc>
 8003980:	2300      	movs	r3, #0
 8003982:	6053      	str	r3, [r2, #4]
 8003984:	e7de      	b.n	8003944 <_malloc_r+0xa8>
 8003986:	230c      	movs	r3, #12
 8003988:	6033      	str	r3, [r6, #0]
 800398a:	4630      	mov	r0, r6
 800398c:	f000 f80c 	bl	80039a8 <__malloc_unlock>
 8003990:	e794      	b.n	80038bc <_malloc_r+0x20>
 8003992:	6005      	str	r5, [r0, #0]
 8003994:	e7d6      	b.n	8003944 <_malloc_r+0xa8>
 8003996:	bf00      	nop
 8003998:	200002fc 	.word	0x200002fc

0800399c <__malloc_lock>:
 800399c:	4801      	ldr	r0, [pc, #4]	@ (80039a4 <__malloc_lock+0x8>)
 800399e:	f7ff bf0e 	b.w	80037be <__retarget_lock_acquire_recursive>
 80039a2:	bf00      	nop
 80039a4:	200002f4 	.word	0x200002f4

080039a8 <__malloc_unlock>:
 80039a8:	4801      	ldr	r0, [pc, #4]	@ (80039b0 <__malloc_unlock+0x8>)
 80039aa:	f7ff bf09 	b.w	80037c0 <__retarget_lock_release_recursive>
 80039ae:	bf00      	nop
 80039b0:	200002f4 	.word	0x200002f4

080039b4 <__sfputc_r>:
 80039b4:	6893      	ldr	r3, [r2, #8]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	b410      	push	{r4}
 80039bc:	6093      	str	r3, [r2, #8]
 80039be:	da08      	bge.n	80039d2 <__sfputc_r+0x1e>
 80039c0:	6994      	ldr	r4, [r2, #24]
 80039c2:	42a3      	cmp	r3, r4
 80039c4:	db01      	blt.n	80039ca <__sfputc_r+0x16>
 80039c6:	290a      	cmp	r1, #10
 80039c8:	d103      	bne.n	80039d2 <__sfputc_r+0x1e>
 80039ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039ce:	f7ff bde8 	b.w	80035a2 <__swbuf_r>
 80039d2:	6813      	ldr	r3, [r2, #0]
 80039d4:	1c58      	adds	r0, r3, #1
 80039d6:	6010      	str	r0, [r2, #0]
 80039d8:	7019      	strb	r1, [r3, #0]
 80039da:	4608      	mov	r0, r1
 80039dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <__sfputs_r>:
 80039e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e4:	4606      	mov	r6, r0
 80039e6:	460f      	mov	r7, r1
 80039e8:	4614      	mov	r4, r2
 80039ea:	18d5      	adds	r5, r2, r3
 80039ec:	42ac      	cmp	r4, r5
 80039ee:	d101      	bne.n	80039f4 <__sfputs_r+0x12>
 80039f0:	2000      	movs	r0, #0
 80039f2:	e007      	b.n	8003a04 <__sfputs_r+0x22>
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f8:	463a      	mov	r2, r7
 80039fa:	4630      	mov	r0, r6
 80039fc:	f7ff ffda 	bl	80039b4 <__sfputc_r>
 8003a00:	1c43      	adds	r3, r0, #1
 8003a02:	d1f3      	bne.n	80039ec <__sfputs_r+0xa>
 8003a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a08 <_vfiprintf_r>:
 8003a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a0c:	460d      	mov	r5, r1
 8003a0e:	b09d      	sub	sp, #116	@ 0x74
 8003a10:	4614      	mov	r4, r2
 8003a12:	4698      	mov	r8, r3
 8003a14:	4606      	mov	r6, r0
 8003a16:	b118      	cbz	r0, 8003a20 <_vfiprintf_r+0x18>
 8003a18:	6a03      	ldr	r3, [r0, #32]
 8003a1a:	b90b      	cbnz	r3, 8003a20 <_vfiprintf_r+0x18>
 8003a1c:	f7ff fcd8 	bl	80033d0 <__sinit>
 8003a20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a22:	07d9      	lsls	r1, r3, #31
 8003a24:	d405      	bmi.n	8003a32 <_vfiprintf_r+0x2a>
 8003a26:	89ab      	ldrh	r3, [r5, #12]
 8003a28:	059a      	lsls	r2, r3, #22
 8003a2a:	d402      	bmi.n	8003a32 <_vfiprintf_r+0x2a>
 8003a2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a2e:	f7ff fec6 	bl	80037be <__retarget_lock_acquire_recursive>
 8003a32:	89ab      	ldrh	r3, [r5, #12]
 8003a34:	071b      	lsls	r3, r3, #28
 8003a36:	d501      	bpl.n	8003a3c <_vfiprintf_r+0x34>
 8003a38:	692b      	ldr	r3, [r5, #16]
 8003a3a:	b99b      	cbnz	r3, 8003a64 <_vfiprintf_r+0x5c>
 8003a3c:	4629      	mov	r1, r5
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7ff fdee 	bl	8003620 <__swsetup_r>
 8003a44:	b170      	cbz	r0, 8003a64 <_vfiprintf_r+0x5c>
 8003a46:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a48:	07dc      	lsls	r4, r3, #31
 8003a4a:	d504      	bpl.n	8003a56 <_vfiprintf_r+0x4e>
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	b01d      	add	sp, #116	@ 0x74
 8003a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a56:	89ab      	ldrh	r3, [r5, #12]
 8003a58:	0598      	lsls	r0, r3, #22
 8003a5a:	d4f7      	bmi.n	8003a4c <_vfiprintf_r+0x44>
 8003a5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a5e:	f7ff feaf 	bl	80037c0 <__retarget_lock_release_recursive>
 8003a62:	e7f3      	b.n	8003a4c <_vfiprintf_r+0x44>
 8003a64:	2300      	movs	r3, #0
 8003a66:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a68:	2320      	movs	r3, #32
 8003a6a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a72:	2330      	movs	r3, #48	@ 0x30
 8003a74:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c24 <_vfiprintf_r+0x21c>
 8003a78:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a7c:	f04f 0901 	mov.w	r9, #1
 8003a80:	4623      	mov	r3, r4
 8003a82:	469a      	mov	sl, r3
 8003a84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a88:	b10a      	cbz	r2, 8003a8e <_vfiprintf_r+0x86>
 8003a8a:	2a25      	cmp	r2, #37	@ 0x25
 8003a8c:	d1f9      	bne.n	8003a82 <_vfiprintf_r+0x7a>
 8003a8e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a92:	d00b      	beq.n	8003aac <_vfiprintf_r+0xa4>
 8003a94:	465b      	mov	r3, fp
 8003a96:	4622      	mov	r2, r4
 8003a98:	4629      	mov	r1, r5
 8003a9a:	4630      	mov	r0, r6
 8003a9c:	f7ff ffa1 	bl	80039e2 <__sfputs_r>
 8003aa0:	3001      	adds	r0, #1
 8003aa2:	f000 80a7 	beq.w	8003bf4 <_vfiprintf_r+0x1ec>
 8003aa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aa8:	445a      	add	r2, fp
 8003aaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8003aac:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 809f 	beq.w	8003bf4 <_vfiprintf_r+0x1ec>
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8003abc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac0:	f10a 0a01 	add.w	sl, sl, #1
 8003ac4:	9304      	str	r3, [sp, #16]
 8003ac6:	9307      	str	r3, [sp, #28]
 8003ac8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003acc:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ace:	4654      	mov	r4, sl
 8003ad0:	2205      	movs	r2, #5
 8003ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ad6:	4853      	ldr	r0, [pc, #332]	@ (8003c24 <_vfiprintf_r+0x21c>)
 8003ad8:	f7fc fb82 	bl	80001e0 <memchr>
 8003adc:	9a04      	ldr	r2, [sp, #16]
 8003ade:	b9d8      	cbnz	r0, 8003b18 <_vfiprintf_r+0x110>
 8003ae0:	06d1      	lsls	r1, r2, #27
 8003ae2:	bf44      	itt	mi
 8003ae4:	2320      	movmi	r3, #32
 8003ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aea:	0713      	lsls	r3, r2, #28
 8003aec:	bf44      	itt	mi
 8003aee:	232b      	movmi	r3, #43	@ 0x2b
 8003af0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003af4:	f89a 3000 	ldrb.w	r3, [sl]
 8003af8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003afa:	d015      	beq.n	8003b28 <_vfiprintf_r+0x120>
 8003afc:	9a07      	ldr	r2, [sp, #28]
 8003afe:	4654      	mov	r4, sl
 8003b00:	2000      	movs	r0, #0
 8003b02:	f04f 0c0a 	mov.w	ip, #10
 8003b06:	4621      	mov	r1, r4
 8003b08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b0c:	3b30      	subs	r3, #48	@ 0x30
 8003b0e:	2b09      	cmp	r3, #9
 8003b10:	d94b      	bls.n	8003baa <_vfiprintf_r+0x1a2>
 8003b12:	b1b0      	cbz	r0, 8003b42 <_vfiprintf_r+0x13a>
 8003b14:	9207      	str	r2, [sp, #28]
 8003b16:	e014      	b.n	8003b42 <_vfiprintf_r+0x13a>
 8003b18:	eba0 0308 	sub.w	r3, r0, r8
 8003b1c:	fa09 f303 	lsl.w	r3, r9, r3
 8003b20:	4313      	orrs	r3, r2
 8003b22:	9304      	str	r3, [sp, #16]
 8003b24:	46a2      	mov	sl, r4
 8003b26:	e7d2      	b.n	8003ace <_vfiprintf_r+0xc6>
 8003b28:	9b03      	ldr	r3, [sp, #12]
 8003b2a:	1d19      	adds	r1, r3, #4
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	9103      	str	r1, [sp, #12]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bfbb      	ittet	lt
 8003b34:	425b      	neglt	r3, r3
 8003b36:	f042 0202 	orrlt.w	r2, r2, #2
 8003b3a:	9307      	strge	r3, [sp, #28]
 8003b3c:	9307      	strlt	r3, [sp, #28]
 8003b3e:	bfb8      	it	lt
 8003b40:	9204      	strlt	r2, [sp, #16]
 8003b42:	7823      	ldrb	r3, [r4, #0]
 8003b44:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b46:	d10a      	bne.n	8003b5e <_vfiprintf_r+0x156>
 8003b48:	7863      	ldrb	r3, [r4, #1]
 8003b4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b4c:	d132      	bne.n	8003bb4 <_vfiprintf_r+0x1ac>
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	1d1a      	adds	r2, r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	9203      	str	r2, [sp, #12]
 8003b56:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b5a:	3402      	adds	r4, #2
 8003b5c:	9305      	str	r3, [sp, #20]
 8003b5e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003c34 <_vfiprintf_r+0x22c>
 8003b62:	7821      	ldrb	r1, [r4, #0]
 8003b64:	2203      	movs	r2, #3
 8003b66:	4650      	mov	r0, sl
 8003b68:	f7fc fb3a 	bl	80001e0 <memchr>
 8003b6c:	b138      	cbz	r0, 8003b7e <_vfiprintf_r+0x176>
 8003b6e:	9b04      	ldr	r3, [sp, #16]
 8003b70:	eba0 000a 	sub.w	r0, r0, sl
 8003b74:	2240      	movs	r2, #64	@ 0x40
 8003b76:	4082      	lsls	r2, r0
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	3401      	adds	r4, #1
 8003b7c:	9304      	str	r3, [sp, #16]
 8003b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b82:	4829      	ldr	r0, [pc, #164]	@ (8003c28 <_vfiprintf_r+0x220>)
 8003b84:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b88:	2206      	movs	r2, #6
 8003b8a:	f7fc fb29 	bl	80001e0 <memchr>
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d03f      	beq.n	8003c12 <_vfiprintf_r+0x20a>
 8003b92:	4b26      	ldr	r3, [pc, #152]	@ (8003c2c <_vfiprintf_r+0x224>)
 8003b94:	bb1b      	cbnz	r3, 8003bde <_vfiprintf_r+0x1d6>
 8003b96:	9b03      	ldr	r3, [sp, #12]
 8003b98:	3307      	adds	r3, #7
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	3308      	adds	r3, #8
 8003ba0:	9303      	str	r3, [sp, #12]
 8003ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba4:	443b      	add	r3, r7
 8003ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ba8:	e76a      	b.n	8003a80 <_vfiprintf_r+0x78>
 8003baa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bae:	460c      	mov	r4, r1
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	e7a8      	b.n	8003b06 <_vfiprintf_r+0xfe>
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	3401      	adds	r4, #1
 8003bb8:	9305      	str	r3, [sp, #20]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	f04f 0c0a 	mov.w	ip, #10
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bc6:	3a30      	subs	r2, #48	@ 0x30
 8003bc8:	2a09      	cmp	r2, #9
 8003bca:	d903      	bls.n	8003bd4 <_vfiprintf_r+0x1cc>
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0c6      	beq.n	8003b5e <_vfiprintf_r+0x156>
 8003bd0:	9105      	str	r1, [sp, #20]
 8003bd2:	e7c4      	b.n	8003b5e <_vfiprintf_r+0x156>
 8003bd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8003bd8:	4604      	mov	r4, r0
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e7f0      	b.n	8003bc0 <_vfiprintf_r+0x1b8>
 8003bde:	ab03      	add	r3, sp, #12
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	462a      	mov	r2, r5
 8003be4:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <_vfiprintf_r+0x228>)
 8003be6:	a904      	add	r1, sp, #16
 8003be8:	4630      	mov	r0, r6
 8003bea:	f3af 8000 	nop.w
 8003bee:	4607      	mov	r7, r0
 8003bf0:	1c78      	adds	r0, r7, #1
 8003bf2:	d1d6      	bne.n	8003ba2 <_vfiprintf_r+0x19a>
 8003bf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bf6:	07d9      	lsls	r1, r3, #31
 8003bf8:	d405      	bmi.n	8003c06 <_vfiprintf_r+0x1fe>
 8003bfa:	89ab      	ldrh	r3, [r5, #12]
 8003bfc:	059a      	lsls	r2, r3, #22
 8003bfe:	d402      	bmi.n	8003c06 <_vfiprintf_r+0x1fe>
 8003c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c02:	f7ff fddd 	bl	80037c0 <__retarget_lock_release_recursive>
 8003c06:	89ab      	ldrh	r3, [r5, #12]
 8003c08:	065b      	lsls	r3, r3, #25
 8003c0a:	f53f af1f 	bmi.w	8003a4c <_vfiprintf_r+0x44>
 8003c0e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c10:	e71e      	b.n	8003a50 <_vfiprintf_r+0x48>
 8003c12:	ab03      	add	r3, sp, #12
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	462a      	mov	r2, r5
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <_vfiprintf_r+0x228>)
 8003c1a:	a904      	add	r1, sp, #16
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f000 f879 	bl	8003d14 <_printf_i>
 8003c22:	e7e4      	b.n	8003bee <_vfiprintf_r+0x1e6>
 8003c24:	0800428c 	.word	0x0800428c
 8003c28:	08004296 	.word	0x08004296
 8003c2c:	00000000 	.word	0x00000000
 8003c30:	080039e3 	.word	0x080039e3
 8003c34:	08004292 	.word	0x08004292

08003c38 <_printf_common>:
 8003c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c3c:	4616      	mov	r6, r2
 8003c3e:	4698      	mov	r8, r3
 8003c40:	688a      	ldr	r2, [r1, #8]
 8003c42:	690b      	ldr	r3, [r1, #16]
 8003c44:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	bfb8      	it	lt
 8003c4c:	4613      	movlt	r3, r2
 8003c4e:	6033      	str	r3, [r6, #0]
 8003c50:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c54:	4607      	mov	r7, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	b10a      	cbz	r2, 8003c5e <_printf_common+0x26>
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	6033      	str	r3, [r6, #0]
 8003c5e:	6823      	ldr	r3, [r4, #0]
 8003c60:	0699      	lsls	r1, r3, #26
 8003c62:	bf42      	ittt	mi
 8003c64:	6833      	ldrmi	r3, [r6, #0]
 8003c66:	3302      	addmi	r3, #2
 8003c68:	6033      	strmi	r3, [r6, #0]
 8003c6a:	6825      	ldr	r5, [r4, #0]
 8003c6c:	f015 0506 	ands.w	r5, r5, #6
 8003c70:	d106      	bne.n	8003c80 <_printf_common+0x48>
 8003c72:	f104 0a19 	add.w	sl, r4, #25
 8003c76:	68e3      	ldr	r3, [r4, #12]
 8003c78:	6832      	ldr	r2, [r6, #0]
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	42ab      	cmp	r3, r5
 8003c7e:	dc26      	bgt.n	8003cce <_printf_common+0x96>
 8003c80:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c84:	6822      	ldr	r2, [r4, #0]
 8003c86:	3b00      	subs	r3, #0
 8003c88:	bf18      	it	ne
 8003c8a:	2301      	movne	r3, #1
 8003c8c:	0692      	lsls	r2, r2, #26
 8003c8e:	d42b      	bmi.n	8003ce8 <_printf_common+0xb0>
 8003c90:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c94:	4641      	mov	r1, r8
 8003c96:	4638      	mov	r0, r7
 8003c98:	47c8      	blx	r9
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	d01e      	beq.n	8003cdc <_printf_common+0xa4>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	6922      	ldr	r2, [r4, #16]
 8003ca2:	f003 0306 	and.w	r3, r3, #6
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	bf02      	ittt	eq
 8003caa:	68e5      	ldreq	r5, [r4, #12]
 8003cac:	6833      	ldreq	r3, [r6, #0]
 8003cae:	1aed      	subeq	r5, r5, r3
 8003cb0:	68a3      	ldr	r3, [r4, #8]
 8003cb2:	bf0c      	ite	eq
 8003cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003cb8:	2500      	movne	r5, #0
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	bfc4      	itt	gt
 8003cbe:	1a9b      	subgt	r3, r3, r2
 8003cc0:	18ed      	addgt	r5, r5, r3
 8003cc2:	2600      	movs	r6, #0
 8003cc4:	341a      	adds	r4, #26
 8003cc6:	42b5      	cmp	r5, r6
 8003cc8:	d11a      	bne.n	8003d00 <_printf_common+0xc8>
 8003cca:	2000      	movs	r0, #0
 8003ccc:	e008      	b.n	8003ce0 <_printf_common+0xa8>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	4652      	mov	r2, sl
 8003cd2:	4641      	mov	r1, r8
 8003cd4:	4638      	mov	r0, r7
 8003cd6:	47c8      	blx	r9
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d103      	bne.n	8003ce4 <_printf_common+0xac>
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ce4:	3501      	adds	r5, #1
 8003ce6:	e7c6      	b.n	8003c76 <_printf_common+0x3e>
 8003ce8:	18e1      	adds	r1, r4, r3
 8003cea:	1c5a      	adds	r2, r3, #1
 8003cec:	2030      	movs	r0, #48	@ 0x30
 8003cee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cf2:	4422      	add	r2, r4
 8003cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003cf8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003cfc:	3302      	adds	r3, #2
 8003cfe:	e7c7      	b.n	8003c90 <_printf_common+0x58>
 8003d00:	2301      	movs	r3, #1
 8003d02:	4622      	mov	r2, r4
 8003d04:	4641      	mov	r1, r8
 8003d06:	4638      	mov	r0, r7
 8003d08:	47c8      	blx	r9
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	d0e6      	beq.n	8003cdc <_printf_common+0xa4>
 8003d0e:	3601      	adds	r6, #1
 8003d10:	e7d9      	b.n	8003cc6 <_printf_common+0x8e>
	...

08003d14 <_printf_i>:
 8003d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d18:	7e0f      	ldrb	r7, [r1, #24]
 8003d1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d1c:	2f78      	cmp	r7, #120	@ 0x78
 8003d1e:	4691      	mov	r9, r2
 8003d20:	4680      	mov	r8, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	469a      	mov	sl, r3
 8003d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d2a:	d807      	bhi.n	8003d3c <_printf_i+0x28>
 8003d2c:	2f62      	cmp	r7, #98	@ 0x62
 8003d2e:	d80a      	bhi.n	8003d46 <_printf_i+0x32>
 8003d30:	2f00      	cmp	r7, #0
 8003d32:	f000 80d2 	beq.w	8003eda <_printf_i+0x1c6>
 8003d36:	2f58      	cmp	r7, #88	@ 0x58
 8003d38:	f000 80b9 	beq.w	8003eae <_printf_i+0x19a>
 8003d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d44:	e03a      	b.n	8003dbc <_printf_i+0xa8>
 8003d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d4a:	2b15      	cmp	r3, #21
 8003d4c:	d8f6      	bhi.n	8003d3c <_printf_i+0x28>
 8003d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8003d54 <_printf_i+0x40>)
 8003d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d54:	08003dad 	.word	0x08003dad
 8003d58:	08003dc1 	.word	0x08003dc1
 8003d5c:	08003d3d 	.word	0x08003d3d
 8003d60:	08003d3d 	.word	0x08003d3d
 8003d64:	08003d3d 	.word	0x08003d3d
 8003d68:	08003d3d 	.word	0x08003d3d
 8003d6c:	08003dc1 	.word	0x08003dc1
 8003d70:	08003d3d 	.word	0x08003d3d
 8003d74:	08003d3d 	.word	0x08003d3d
 8003d78:	08003d3d 	.word	0x08003d3d
 8003d7c:	08003d3d 	.word	0x08003d3d
 8003d80:	08003ec1 	.word	0x08003ec1
 8003d84:	08003deb 	.word	0x08003deb
 8003d88:	08003e7b 	.word	0x08003e7b
 8003d8c:	08003d3d 	.word	0x08003d3d
 8003d90:	08003d3d 	.word	0x08003d3d
 8003d94:	08003ee3 	.word	0x08003ee3
 8003d98:	08003d3d 	.word	0x08003d3d
 8003d9c:	08003deb 	.word	0x08003deb
 8003da0:	08003d3d 	.word	0x08003d3d
 8003da4:	08003d3d 	.word	0x08003d3d
 8003da8:	08003e83 	.word	0x08003e83
 8003dac:	6833      	ldr	r3, [r6, #0]
 8003dae:	1d1a      	adds	r2, r3, #4
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	6032      	str	r2, [r6, #0]
 8003db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e09d      	b.n	8003efc <_printf_i+0x1e8>
 8003dc0:	6833      	ldr	r3, [r6, #0]
 8003dc2:	6820      	ldr	r0, [r4, #0]
 8003dc4:	1d19      	adds	r1, r3, #4
 8003dc6:	6031      	str	r1, [r6, #0]
 8003dc8:	0606      	lsls	r6, r0, #24
 8003dca:	d501      	bpl.n	8003dd0 <_printf_i+0xbc>
 8003dcc:	681d      	ldr	r5, [r3, #0]
 8003dce:	e003      	b.n	8003dd8 <_printf_i+0xc4>
 8003dd0:	0645      	lsls	r5, r0, #25
 8003dd2:	d5fb      	bpl.n	8003dcc <_printf_i+0xb8>
 8003dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003dd8:	2d00      	cmp	r5, #0
 8003dda:	da03      	bge.n	8003de4 <_printf_i+0xd0>
 8003ddc:	232d      	movs	r3, #45	@ 0x2d
 8003dde:	426d      	negs	r5, r5
 8003de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003de4:	4859      	ldr	r0, [pc, #356]	@ (8003f4c <_printf_i+0x238>)
 8003de6:	230a      	movs	r3, #10
 8003de8:	e011      	b.n	8003e0e <_printf_i+0xfa>
 8003dea:	6821      	ldr	r1, [r4, #0]
 8003dec:	6833      	ldr	r3, [r6, #0]
 8003dee:	0608      	lsls	r0, r1, #24
 8003df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003df4:	d402      	bmi.n	8003dfc <_printf_i+0xe8>
 8003df6:	0649      	lsls	r1, r1, #25
 8003df8:	bf48      	it	mi
 8003dfa:	b2ad      	uxthmi	r5, r5
 8003dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003dfe:	4853      	ldr	r0, [pc, #332]	@ (8003f4c <_printf_i+0x238>)
 8003e00:	6033      	str	r3, [r6, #0]
 8003e02:	bf14      	ite	ne
 8003e04:	230a      	movne	r3, #10
 8003e06:	2308      	moveq	r3, #8
 8003e08:	2100      	movs	r1, #0
 8003e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e0e:	6866      	ldr	r6, [r4, #4]
 8003e10:	60a6      	str	r6, [r4, #8]
 8003e12:	2e00      	cmp	r6, #0
 8003e14:	bfa2      	ittt	ge
 8003e16:	6821      	ldrge	r1, [r4, #0]
 8003e18:	f021 0104 	bicge.w	r1, r1, #4
 8003e1c:	6021      	strge	r1, [r4, #0]
 8003e1e:	b90d      	cbnz	r5, 8003e24 <_printf_i+0x110>
 8003e20:	2e00      	cmp	r6, #0
 8003e22:	d04b      	beq.n	8003ebc <_printf_i+0x1a8>
 8003e24:	4616      	mov	r6, r2
 8003e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8003e2e:	5dc7      	ldrb	r7, [r0, r7]
 8003e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e34:	462f      	mov	r7, r5
 8003e36:	42bb      	cmp	r3, r7
 8003e38:	460d      	mov	r5, r1
 8003e3a:	d9f4      	bls.n	8003e26 <_printf_i+0x112>
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d10b      	bne.n	8003e58 <_printf_i+0x144>
 8003e40:	6823      	ldr	r3, [r4, #0]
 8003e42:	07df      	lsls	r7, r3, #31
 8003e44:	d508      	bpl.n	8003e58 <_printf_i+0x144>
 8003e46:	6923      	ldr	r3, [r4, #16]
 8003e48:	6861      	ldr	r1, [r4, #4]
 8003e4a:	4299      	cmp	r1, r3
 8003e4c:	bfde      	ittt	le
 8003e4e:	2330      	movle	r3, #48	@ 0x30
 8003e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e58:	1b92      	subs	r2, r2, r6
 8003e5a:	6122      	str	r2, [r4, #16]
 8003e5c:	f8cd a000 	str.w	sl, [sp]
 8003e60:	464b      	mov	r3, r9
 8003e62:	aa03      	add	r2, sp, #12
 8003e64:	4621      	mov	r1, r4
 8003e66:	4640      	mov	r0, r8
 8003e68:	f7ff fee6 	bl	8003c38 <_printf_common>
 8003e6c:	3001      	adds	r0, #1
 8003e6e:	d14a      	bne.n	8003f06 <_printf_i+0x1f2>
 8003e70:	f04f 30ff 	mov.w	r0, #4294967295
 8003e74:	b004      	add	sp, #16
 8003e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e7a:	6823      	ldr	r3, [r4, #0]
 8003e7c:	f043 0320 	orr.w	r3, r3, #32
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	4833      	ldr	r0, [pc, #204]	@ (8003f50 <_printf_i+0x23c>)
 8003e84:	2778      	movs	r7, #120	@ 0x78
 8003e86:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	6831      	ldr	r1, [r6, #0]
 8003e8e:	061f      	lsls	r7, r3, #24
 8003e90:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e94:	d402      	bmi.n	8003e9c <_printf_i+0x188>
 8003e96:	065f      	lsls	r7, r3, #25
 8003e98:	bf48      	it	mi
 8003e9a:	b2ad      	uxthmi	r5, r5
 8003e9c:	6031      	str	r1, [r6, #0]
 8003e9e:	07d9      	lsls	r1, r3, #31
 8003ea0:	bf44      	itt	mi
 8003ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8003ea6:	6023      	strmi	r3, [r4, #0]
 8003ea8:	b11d      	cbz	r5, 8003eb2 <_printf_i+0x19e>
 8003eaa:	2310      	movs	r3, #16
 8003eac:	e7ac      	b.n	8003e08 <_printf_i+0xf4>
 8003eae:	4827      	ldr	r0, [pc, #156]	@ (8003f4c <_printf_i+0x238>)
 8003eb0:	e7e9      	b.n	8003e86 <_printf_i+0x172>
 8003eb2:	6823      	ldr	r3, [r4, #0]
 8003eb4:	f023 0320 	bic.w	r3, r3, #32
 8003eb8:	6023      	str	r3, [r4, #0]
 8003eba:	e7f6      	b.n	8003eaa <_printf_i+0x196>
 8003ebc:	4616      	mov	r6, r2
 8003ebe:	e7bd      	b.n	8003e3c <_printf_i+0x128>
 8003ec0:	6833      	ldr	r3, [r6, #0]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	6961      	ldr	r1, [r4, #20]
 8003ec6:	1d18      	adds	r0, r3, #4
 8003ec8:	6030      	str	r0, [r6, #0]
 8003eca:	062e      	lsls	r6, r5, #24
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	d501      	bpl.n	8003ed4 <_printf_i+0x1c0>
 8003ed0:	6019      	str	r1, [r3, #0]
 8003ed2:	e002      	b.n	8003eda <_printf_i+0x1c6>
 8003ed4:	0668      	lsls	r0, r5, #25
 8003ed6:	d5fb      	bpl.n	8003ed0 <_printf_i+0x1bc>
 8003ed8:	8019      	strh	r1, [r3, #0]
 8003eda:	2300      	movs	r3, #0
 8003edc:	6123      	str	r3, [r4, #16]
 8003ede:	4616      	mov	r6, r2
 8003ee0:	e7bc      	b.n	8003e5c <_printf_i+0x148>
 8003ee2:	6833      	ldr	r3, [r6, #0]
 8003ee4:	1d1a      	adds	r2, r3, #4
 8003ee6:	6032      	str	r2, [r6, #0]
 8003ee8:	681e      	ldr	r6, [r3, #0]
 8003eea:	6862      	ldr	r2, [r4, #4]
 8003eec:	2100      	movs	r1, #0
 8003eee:	4630      	mov	r0, r6
 8003ef0:	f7fc f976 	bl	80001e0 <memchr>
 8003ef4:	b108      	cbz	r0, 8003efa <_printf_i+0x1e6>
 8003ef6:	1b80      	subs	r0, r0, r6
 8003ef8:	6060      	str	r0, [r4, #4]
 8003efa:	6863      	ldr	r3, [r4, #4]
 8003efc:	6123      	str	r3, [r4, #16]
 8003efe:	2300      	movs	r3, #0
 8003f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f04:	e7aa      	b.n	8003e5c <_printf_i+0x148>
 8003f06:	6923      	ldr	r3, [r4, #16]
 8003f08:	4632      	mov	r2, r6
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	4640      	mov	r0, r8
 8003f0e:	47d0      	blx	sl
 8003f10:	3001      	adds	r0, #1
 8003f12:	d0ad      	beq.n	8003e70 <_printf_i+0x15c>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	079b      	lsls	r3, r3, #30
 8003f18:	d413      	bmi.n	8003f42 <_printf_i+0x22e>
 8003f1a:	68e0      	ldr	r0, [r4, #12]
 8003f1c:	9b03      	ldr	r3, [sp, #12]
 8003f1e:	4298      	cmp	r0, r3
 8003f20:	bfb8      	it	lt
 8003f22:	4618      	movlt	r0, r3
 8003f24:	e7a6      	b.n	8003e74 <_printf_i+0x160>
 8003f26:	2301      	movs	r3, #1
 8003f28:	4632      	mov	r2, r6
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	4640      	mov	r0, r8
 8003f2e:	47d0      	blx	sl
 8003f30:	3001      	adds	r0, #1
 8003f32:	d09d      	beq.n	8003e70 <_printf_i+0x15c>
 8003f34:	3501      	adds	r5, #1
 8003f36:	68e3      	ldr	r3, [r4, #12]
 8003f38:	9903      	ldr	r1, [sp, #12]
 8003f3a:	1a5b      	subs	r3, r3, r1
 8003f3c:	42ab      	cmp	r3, r5
 8003f3e:	dcf2      	bgt.n	8003f26 <_printf_i+0x212>
 8003f40:	e7eb      	b.n	8003f1a <_printf_i+0x206>
 8003f42:	2500      	movs	r5, #0
 8003f44:	f104 0619 	add.w	r6, r4, #25
 8003f48:	e7f5      	b.n	8003f36 <_printf_i+0x222>
 8003f4a:	bf00      	nop
 8003f4c:	0800429d 	.word	0x0800429d
 8003f50:	080042ae 	.word	0x080042ae

08003f54 <__sflush_r>:
 8003f54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f5c:	0716      	lsls	r6, r2, #28
 8003f5e:	4605      	mov	r5, r0
 8003f60:	460c      	mov	r4, r1
 8003f62:	d454      	bmi.n	800400e <__sflush_r+0xba>
 8003f64:	684b      	ldr	r3, [r1, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	dc02      	bgt.n	8003f70 <__sflush_r+0x1c>
 8003f6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	dd48      	ble.n	8004002 <__sflush_r+0xae>
 8003f70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f72:	2e00      	cmp	r6, #0
 8003f74:	d045      	beq.n	8004002 <__sflush_r+0xae>
 8003f76:	2300      	movs	r3, #0
 8003f78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003f7c:	682f      	ldr	r7, [r5, #0]
 8003f7e:	6a21      	ldr	r1, [r4, #32]
 8003f80:	602b      	str	r3, [r5, #0]
 8003f82:	d030      	beq.n	8003fe6 <__sflush_r+0x92>
 8003f84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003f86:	89a3      	ldrh	r3, [r4, #12]
 8003f88:	0759      	lsls	r1, r3, #29
 8003f8a:	d505      	bpl.n	8003f98 <__sflush_r+0x44>
 8003f8c:	6863      	ldr	r3, [r4, #4]
 8003f8e:	1ad2      	subs	r2, r2, r3
 8003f90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003f92:	b10b      	cbz	r3, 8003f98 <__sflush_r+0x44>
 8003f94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003f96:	1ad2      	subs	r2, r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003f9c:	6a21      	ldr	r1, [r4, #32]
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	47b0      	blx	r6
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	d106      	bne.n	8003fb6 <__sflush_r+0x62>
 8003fa8:	6829      	ldr	r1, [r5, #0]
 8003faa:	291d      	cmp	r1, #29
 8003fac:	d82b      	bhi.n	8004006 <__sflush_r+0xb2>
 8003fae:	4a2a      	ldr	r2, [pc, #168]	@ (8004058 <__sflush_r+0x104>)
 8003fb0:	410a      	asrs	r2, r1
 8003fb2:	07d6      	lsls	r6, r2, #31
 8003fb4:	d427      	bmi.n	8004006 <__sflush_r+0xb2>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	6062      	str	r2, [r4, #4]
 8003fba:	04d9      	lsls	r1, r3, #19
 8003fbc:	6922      	ldr	r2, [r4, #16]
 8003fbe:	6022      	str	r2, [r4, #0]
 8003fc0:	d504      	bpl.n	8003fcc <__sflush_r+0x78>
 8003fc2:	1c42      	adds	r2, r0, #1
 8003fc4:	d101      	bne.n	8003fca <__sflush_r+0x76>
 8003fc6:	682b      	ldr	r3, [r5, #0]
 8003fc8:	b903      	cbnz	r3, 8003fcc <__sflush_r+0x78>
 8003fca:	6560      	str	r0, [r4, #84]	@ 0x54
 8003fcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003fce:	602f      	str	r7, [r5, #0]
 8003fd0:	b1b9      	cbz	r1, 8004002 <__sflush_r+0xae>
 8003fd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003fd6:	4299      	cmp	r1, r3
 8003fd8:	d002      	beq.n	8003fe0 <__sflush_r+0x8c>
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f7ff fbf2 	bl	80037c4 <_free_r>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	6363      	str	r3, [r4, #52]	@ 0x34
 8003fe4:	e00d      	b.n	8004002 <__sflush_r+0xae>
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b0      	blx	r6
 8003fec:	4602      	mov	r2, r0
 8003fee:	1c50      	adds	r0, r2, #1
 8003ff0:	d1c9      	bne.n	8003f86 <__sflush_r+0x32>
 8003ff2:	682b      	ldr	r3, [r5, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0c6      	beq.n	8003f86 <__sflush_r+0x32>
 8003ff8:	2b1d      	cmp	r3, #29
 8003ffa:	d001      	beq.n	8004000 <__sflush_r+0xac>
 8003ffc:	2b16      	cmp	r3, #22
 8003ffe:	d11e      	bne.n	800403e <__sflush_r+0xea>
 8004000:	602f      	str	r7, [r5, #0]
 8004002:	2000      	movs	r0, #0
 8004004:	e022      	b.n	800404c <__sflush_r+0xf8>
 8004006:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800400a:	b21b      	sxth	r3, r3
 800400c:	e01b      	b.n	8004046 <__sflush_r+0xf2>
 800400e:	690f      	ldr	r7, [r1, #16]
 8004010:	2f00      	cmp	r7, #0
 8004012:	d0f6      	beq.n	8004002 <__sflush_r+0xae>
 8004014:	0793      	lsls	r3, r2, #30
 8004016:	680e      	ldr	r6, [r1, #0]
 8004018:	bf08      	it	eq
 800401a:	694b      	ldreq	r3, [r1, #20]
 800401c:	600f      	str	r7, [r1, #0]
 800401e:	bf18      	it	ne
 8004020:	2300      	movne	r3, #0
 8004022:	eba6 0807 	sub.w	r8, r6, r7
 8004026:	608b      	str	r3, [r1, #8]
 8004028:	f1b8 0f00 	cmp.w	r8, #0
 800402c:	dde9      	ble.n	8004002 <__sflush_r+0xae>
 800402e:	6a21      	ldr	r1, [r4, #32]
 8004030:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004032:	4643      	mov	r3, r8
 8004034:	463a      	mov	r2, r7
 8004036:	4628      	mov	r0, r5
 8004038:	47b0      	blx	r6
 800403a:	2800      	cmp	r0, #0
 800403c:	dc08      	bgt.n	8004050 <__sflush_r+0xfc>
 800403e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004046:	81a3      	strh	r3, [r4, #12]
 8004048:	f04f 30ff 	mov.w	r0, #4294967295
 800404c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004050:	4407      	add	r7, r0
 8004052:	eba8 0800 	sub.w	r8, r8, r0
 8004056:	e7e7      	b.n	8004028 <__sflush_r+0xd4>
 8004058:	dfbffffe 	.word	0xdfbffffe

0800405c <_fflush_r>:
 800405c:	b538      	push	{r3, r4, r5, lr}
 800405e:	690b      	ldr	r3, [r1, #16]
 8004060:	4605      	mov	r5, r0
 8004062:	460c      	mov	r4, r1
 8004064:	b913      	cbnz	r3, 800406c <_fflush_r+0x10>
 8004066:	2500      	movs	r5, #0
 8004068:	4628      	mov	r0, r5
 800406a:	bd38      	pop	{r3, r4, r5, pc}
 800406c:	b118      	cbz	r0, 8004076 <_fflush_r+0x1a>
 800406e:	6a03      	ldr	r3, [r0, #32]
 8004070:	b90b      	cbnz	r3, 8004076 <_fflush_r+0x1a>
 8004072:	f7ff f9ad 	bl	80033d0 <__sinit>
 8004076:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f3      	beq.n	8004066 <_fflush_r+0xa>
 800407e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004080:	07d0      	lsls	r0, r2, #31
 8004082:	d404      	bmi.n	800408e <_fflush_r+0x32>
 8004084:	0599      	lsls	r1, r3, #22
 8004086:	d402      	bmi.n	800408e <_fflush_r+0x32>
 8004088:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800408a:	f7ff fb98 	bl	80037be <__retarget_lock_acquire_recursive>
 800408e:	4628      	mov	r0, r5
 8004090:	4621      	mov	r1, r4
 8004092:	f7ff ff5f 	bl	8003f54 <__sflush_r>
 8004096:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004098:	07da      	lsls	r2, r3, #31
 800409a:	4605      	mov	r5, r0
 800409c:	d4e4      	bmi.n	8004068 <_fflush_r+0xc>
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	059b      	lsls	r3, r3, #22
 80040a2:	d4e1      	bmi.n	8004068 <_fflush_r+0xc>
 80040a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80040a6:	f7ff fb8b 	bl	80037c0 <__retarget_lock_release_recursive>
 80040aa:	e7dd      	b.n	8004068 <_fflush_r+0xc>

080040ac <__swhatbuf_r>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	460c      	mov	r4, r1
 80040b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b4:	2900      	cmp	r1, #0
 80040b6:	b096      	sub	sp, #88	@ 0x58
 80040b8:	4615      	mov	r5, r2
 80040ba:	461e      	mov	r6, r3
 80040bc:	da0d      	bge.n	80040da <__swhatbuf_r+0x2e>
 80040be:	89a3      	ldrh	r3, [r4, #12]
 80040c0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80040c4:	f04f 0100 	mov.w	r1, #0
 80040c8:	bf14      	ite	ne
 80040ca:	2340      	movne	r3, #64	@ 0x40
 80040cc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80040d0:	2000      	movs	r0, #0
 80040d2:	6031      	str	r1, [r6, #0]
 80040d4:	602b      	str	r3, [r5, #0]
 80040d6:	b016      	add	sp, #88	@ 0x58
 80040d8:	bd70      	pop	{r4, r5, r6, pc}
 80040da:	466a      	mov	r2, sp
 80040dc:	f000 f848 	bl	8004170 <_fstat_r>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	dbec      	blt.n	80040be <__swhatbuf_r+0x12>
 80040e4:	9901      	ldr	r1, [sp, #4]
 80040e6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80040ea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80040ee:	4259      	negs	r1, r3
 80040f0:	4159      	adcs	r1, r3
 80040f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80040f6:	e7eb      	b.n	80040d0 <__swhatbuf_r+0x24>

080040f8 <__smakebuf_r>:
 80040f8:	898b      	ldrh	r3, [r1, #12]
 80040fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040fc:	079d      	lsls	r5, r3, #30
 80040fe:	4606      	mov	r6, r0
 8004100:	460c      	mov	r4, r1
 8004102:	d507      	bpl.n	8004114 <__smakebuf_r+0x1c>
 8004104:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004108:	6023      	str	r3, [r4, #0]
 800410a:	6123      	str	r3, [r4, #16]
 800410c:	2301      	movs	r3, #1
 800410e:	6163      	str	r3, [r4, #20]
 8004110:	b003      	add	sp, #12
 8004112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004114:	ab01      	add	r3, sp, #4
 8004116:	466a      	mov	r2, sp
 8004118:	f7ff ffc8 	bl	80040ac <__swhatbuf_r>
 800411c:	9f00      	ldr	r7, [sp, #0]
 800411e:	4605      	mov	r5, r0
 8004120:	4639      	mov	r1, r7
 8004122:	4630      	mov	r0, r6
 8004124:	f7ff fbba 	bl	800389c <_malloc_r>
 8004128:	b948      	cbnz	r0, 800413e <__smakebuf_r+0x46>
 800412a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800412e:	059a      	lsls	r2, r3, #22
 8004130:	d4ee      	bmi.n	8004110 <__smakebuf_r+0x18>
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	f043 0302 	orr.w	r3, r3, #2
 800413a:	81a3      	strh	r3, [r4, #12]
 800413c:	e7e2      	b.n	8004104 <__smakebuf_r+0xc>
 800413e:	89a3      	ldrh	r3, [r4, #12]
 8004140:	6020      	str	r0, [r4, #0]
 8004142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004146:	81a3      	strh	r3, [r4, #12]
 8004148:	9b01      	ldr	r3, [sp, #4]
 800414a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800414e:	b15b      	cbz	r3, 8004168 <__smakebuf_r+0x70>
 8004150:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004154:	4630      	mov	r0, r6
 8004156:	f000 f81d 	bl	8004194 <_isatty_r>
 800415a:	b128      	cbz	r0, 8004168 <__smakebuf_r+0x70>
 800415c:	89a3      	ldrh	r3, [r4, #12]
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	f043 0301 	orr.w	r3, r3, #1
 8004166:	81a3      	strh	r3, [r4, #12]
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	431d      	orrs	r5, r3
 800416c:	81a5      	strh	r5, [r4, #12]
 800416e:	e7cf      	b.n	8004110 <__smakebuf_r+0x18>

08004170 <_fstat_r>:
 8004170:	b538      	push	{r3, r4, r5, lr}
 8004172:	4d07      	ldr	r5, [pc, #28]	@ (8004190 <_fstat_r+0x20>)
 8004174:	2300      	movs	r3, #0
 8004176:	4604      	mov	r4, r0
 8004178:	4608      	mov	r0, r1
 800417a:	4611      	mov	r1, r2
 800417c:	602b      	str	r3, [r5, #0]
 800417e:	f7fc fae5 	bl	800074c <_fstat>
 8004182:	1c43      	adds	r3, r0, #1
 8004184:	d102      	bne.n	800418c <_fstat_r+0x1c>
 8004186:	682b      	ldr	r3, [r5, #0]
 8004188:	b103      	cbz	r3, 800418c <_fstat_r+0x1c>
 800418a:	6023      	str	r3, [r4, #0]
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	200002f0 	.word	0x200002f0

08004194 <_isatty_r>:
 8004194:	b538      	push	{r3, r4, r5, lr}
 8004196:	4d06      	ldr	r5, [pc, #24]	@ (80041b0 <_isatty_r+0x1c>)
 8004198:	2300      	movs	r3, #0
 800419a:	4604      	mov	r4, r0
 800419c:	4608      	mov	r0, r1
 800419e:	602b      	str	r3, [r5, #0]
 80041a0:	f7fc fae4 	bl	800076c <_isatty>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d102      	bne.n	80041ae <_isatty_r+0x1a>
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	b103      	cbz	r3, 80041ae <_isatty_r+0x1a>
 80041ac:	6023      	str	r3, [r4, #0]
 80041ae:	bd38      	pop	{r3, r4, r5, pc}
 80041b0:	200002f0 	.word	0x200002f0

080041b4 <_sbrk_r>:
 80041b4:	b538      	push	{r3, r4, r5, lr}
 80041b6:	4d06      	ldr	r5, [pc, #24]	@ (80041d0 <_sbrk_r+0x1c>)
 80041b8:	2300      	movs	r3, #0
 80041ba:	4604      	mov	r4, r0
 80041bc:	4608      	mov	r0, r1
 80041be:	602b      	str	r3, [r5, #0]
 80041c0:	f7fc faec 	bl	800079c <_sbrk>
 80041c4:	1c43      	adds	r3, r0, #1
 80041c6:	d102      	bne.n	80041ce <_sbrk_r+0x1a>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	b103      	cbz	r3, 80041ce <_sbrk_r+0x1a>
 80041cc:	6023      	str	r3, [r4, #0]
 80041ce:	bd38      	pop	{r3, r4, r5, pc}
 80041d0:	200002f0 	.word	0x200002f0

080041d4 <_init>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	bf00      	nop
 80041d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041da:	bc08      	pop	{r3}
 80041dc:	469e      	mov	lr, r3
 80041de:	4770      	bx	lr

080041e0 <_fini>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	bf00      	nop
 80041e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041e6:	bc08      	pop	{r3}
 80041e8:	469e      	mov	lr, r3
 80041ea:	4770      	bx	lr

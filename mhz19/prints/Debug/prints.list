
prints.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f10  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080010b0  080010b0  000020b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800117c  0800117c  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  0800117c  0800117c  0000217c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001184  08001184  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001184  08001184  00002184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001188  08001188  00002188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800118c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000050  080011dc  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080011dc  00003244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001835  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000063d  00000000  00000000  000048b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000128  00000000  00000000  00004ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d7  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018657  00000000  00000000  000050f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000017ce  00000000  00000000  0001d74e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086962  00000000  00000000  0001ef1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a587e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008b4  00000000  00000000  000a58c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a6178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001098 	.word	0x08001098

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08001098 	.word	0x08001098

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <MHZ19_checksum>:
------------------------------------------------------------------------------*/
// Computes the checksum for a 9‑byte MH‑Z19 frame.
// The checksum is calculated by summing bytes [1..7], then:
//   checksum = (0xFF – sum) + 1.
uint8_t MHZ19_checksum(const uint8_t *packet)
{
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
    uint8_t sum = 0;
 80002c4:	2300      	movs	r3, #0
 80002c6:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < 8; i++)
 80002c8:	2301      	movs	r3, #1
 80002ca:	60bb      	str	r3, [r7, #8]
 80002cc:	e009      	b.n	80002e2 <MHZ19_checksum+0x26>
    {
        sum += packet[i];
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	687a      	ldr	r2, [r7, #4]
 80002d2:	4413      	add	r3, r2
 80002d4:	781a      	ldrb	r2, [r3, #0]
 80002d6:	7bfb      	ldrb	r3, [r7, #15]
 80002d8:	4413      	add	r3, r2
 80002da:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < 8; i++)
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	3301      	adds	r3, #1
 80002e0:	60bb      	str	r3, [r7, #8]
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	2b07      	cmp	r3, #7
 80002e6:	ddf2      	ble.n	80002ce <MHZ19_checksum+0x12>
    }
    sum = 0xFF - sum;
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	43db      	mvns	r3, r3
 80002ec:	73fb      	strb	r3, [r7, #15]
    sum += 1;
 80002ee:	7bfb      	ldrb	r3, [r7, #15]
 80002f0:	3301      	adds	r3, #1
 80002f2:	73fb      	strb	r3, [r7, #15]
    return sum;
 80002f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f6:	4618      	mov	r0, r3
 80002f8:	3714      	adds	r7, #20
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
	...

08000304 <USART1_init>:

/*------------------------------------------------------------------------------
  USART1 Functions (Sensor Communication)
------------------------------------------------------------------------------*/
void USART1_init(void)
{
 8000304:	b580      	push	{r7, lr}
 8000306:	af00      	add	r7, sp, #0
    // Enable GPIOA clock.
    RCC->AHBENR |= 0x00020000;
 8000308:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <USART1_init+0x54>)
 800030a:	695b      	ldr	r3, [r3, #20]
 800030c:	4a12      	ldr	r2, [pc, #72]	@ (8000358 <USART1_init+0x54>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000312:	6153      	str	r3, [r2, #20]

    // Enable USART1 clock on APB2.
    RCC->APB2ENR |= 0x00004000;
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <USART1_init+0x54>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a0f      	ldr	r2, [pc, #60]	@ (8000358 <USART1_init+0x54>)
 800031a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800031e:	6193      	str	r3, [r2, #24]

    // Configure PA9 (TX) and PA10 (RX) as alternate function mode.
    GPIOA->MODER |= 0x00280000;
 8000320:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800032a:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800032e:	6013      	str	r3, [r2, #0]

    // Set PA9 and PA10 alternate function to AF7.
    GPIOA->AFR[1] |= 0x00000770;
 8000330:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000336:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033a:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800033e:	6253      	str	r3, [r2, #36]	@ 0x24

    // Set baud rate to 9600 @ 8 MHz clock (833 decimal).
    USART1->BRR = 833;
 8000340:	4b06      	ldr	r3, [pc, #24]	@ (800035c <USART1_init+0x58>)
 8000342:	f240 3241 	movw	r2, #833	@ 0x341
 8000346:	60da      	str	r2, [r3, #12]

    // Enable USART1, Rx, Tx, and Rx interrupt.
    USART1->CR1 = 0x2D;
 8000348:	4b04      	ldr	r3, [pc, #16]	@ (800035c <USART1_init+0x58>)
 800034a:	222d      	movs	r2, #45	@ 0x2d
 800034c:	601a      	str	r2, [r3, #0]

    // Enable USART1 IRQ in NVIC.
    NVIC_EnableIRQ(USART1_IRQn);
 800034e:	2025      	movs	r0, #37	@ 0x25
 8000350:	f7ff ff96 	bl	8000280 <__NVIC_EnableIRQ>
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000
 800035c:	40013800 	.word	0x40013800

08000360 <USART1_printCharacter>:

// Transmit a single character via USART1.
void USART1_printCharacter(char c)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
    USART1->TDR = (uint8_t)c;
 800036a:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <USART1_printCharacter+0x30>)
 800036c:	79fa      	ldrb	r2, [r7, #7]
 800036e:	b292      	uxth	r2, r2
 8000370:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (!(USART1->ISR & 0x80)); // Wait for TXE flag.
 8000372:	bf00      	nop
 8000374:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <USART1_printCharacter+0x30>)
 8000376:	69db      	ldr	r3, [r3, #28]
 8000378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0f9      	beq.n	8000374 <USART1_printCharacter+0x14>
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40013800 	.word	0x40013800

08000394 <USART1_dataAvailable>:
    }
}

// Check if a full 9‑byte frame is available.
BOOL USART1_dataAvailable(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
    return g_dataReady;
 8000398:	4b03      	ldr	r3, [pc, #12]	@ (80003a8 <USART1_dataAvailable+0x14>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2db      	uxtb	r3, r3
}
 800039e:	4618      	mov	r0, r3
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	20000076 	.word	0x20000076

080003ac <USART1_getData>:

// Copy the sensor response to a destination buffer and clear the flag.
void USART1_getData(uint8_t *dest)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b085      	sub	sp, #20
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 80003b4:	2300      	movs	r3, #0
 80003b6:	60fb      	str	r3, [r7, #12]
 80003b8:	e00b      	b.n	80003d2 <USART1_getData+0x26>
    {
        dest[i] = g_rxBuffer[i];
 80003ba:	68fb      	ldr	r3, [r7, #12]
 80003bc:	687a      	ldr	r2, [r7, #4]
 80003be:	4413      	add	r3, r2
 80003c0:	490a      	ldr	r1, [pc, #40]	@ (80003ec <USART1_getData+0x40>)
 80003c2:	68fa      	ldr	r2, [r7, #12]
 80003c4:	440a      	add	r2, r1
 80003c6:	7812      	ldrb	r2, [r2, #0]
 80003c8:	b2d2      	uxtb	r2, r2
 80003ca:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	3301      	adds	r3, #1
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	2b08      	cmp	r3, #8
 80003d6:	ddf0      	ble.n	80003ba <USART1_getData+0xe>
    }
    g_dataReady = FALSE;
 80003d8:	4b05      	ldr	r3, [pc, #20]	@ (80003f0 <USART1_getData+0x44>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	2000006c 	.word	0x2000006c
 80003f0:	20000076 	.word	0x20000076

080003f4 <USART1_EXTI25_IRQHandler>:
/*------------------------------------------------------------------------------
  USART1 IRQ Handler
------------------------------------------------------------------------------*/
// The IRQ handler collects bytes from the sensor into a 9‑byte buffer.
void USART1_EXTI25_IRQHandler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
    // Reading USART1->RDR clears the RXNE flag.
    uint8_t rx_byte = (uint8_t)(USART1->RDR & 0xFF);
 80003fa:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <USART1_EXTI25_IRQHandler+0x4c>)
 80003fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003fe:	b29b      	uxth	r3, r3
 8000400:	71fb      	strb	r3, [r7, #7]

    g_rxBuffer[g_rxIndex] = rx_byte;
 8000402:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <USART1_EXTI25_IRQHandler+0x50>)
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	b2db      	uxtb	r3, r3
 8000408:	4619      	mov	r1, r3
 800040a:	4a0f      	ldr	r2, [pc, #60]	@ (8000448 <USART1_EXTI25_IRQHandler+0x54>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	5453      	strb	r3, [r2, r1]
    g_rxIndex++;
 8000410:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <USART1_EXTI25_IRQHandler+0x50>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	3301      	adds	r3, #1
 8000418:	b2da      	uxtb	r2, r3
 800041a:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <USART1_EXTI25_IRQHandler+0x50>)
 800041c:	701a      	strb	r2, [r3, #0]

    if (g_rxIndex >= MHZ19_FRAME_LENGTH)
 800041e:	4b09      	ldr	r3, [pc, #36]	@ (8000444 <USART1_EXTI25_IRQHandler+0x50>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	2b08      	cmp	r3, #8
 8000426:	d905      	bls.n	8000434 <USART1_EXTI25_IRQHandler+0x40>
    {
        g_dataReady = TRUE;
 8000428:	4b08      	ldr	r3, [pc, #32]	@ (800044c <USART1_EXTI25_IRQHandler+0x58>)
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
        g_rxIndex = 0;
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <USART1_EXTI25_IRQHandler+0x50>)
 8000430:	2200      	movs	r2, #0
 8000432:	701a      	strb	r2, [r3, #0]
    }
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40013800 	.word	0x40013800
 8000444:	20000075 	.word	0x20000075
 8000448:	2000006c 	.word	0x2000006c
 800044c:	20000076 	.word	0x20000076

08000450 <MHZ19_sendReadCommand>:
/*------------------------------------------------------------------------------
  MH‑Z19 Sensor Command Function
------------------------------------------------------------------------------*/
// Sends the standard “read CO2” command to the sensor.
void MHZ19_sendReadCommand(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 8000456:	2300      	movs	r3, #0
 8000458:	607b      	str	r3, [r7, #4]
 800045a:	e009      	b.n	8000470 <MHZ19_sendReadCommand+0x20>
    {
        USART1_printCharacter(MHZ19_Read_Cmd[i]);
 800045c:	4a08      	ldr	r2, [pc, #32]	@ (8000480 <MHZ19_sendReadCommand+0x30>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4413      	add	r3, r2
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ff7b 	bl	8000360 <USART1_printCharacter>
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	3301      	adds	r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b08      	cmp	r3, #8
 8000474:	ddf2      	ble.n	800045c <MHZ19_sendReadCommand+0xc>
    }
}
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	3708      	adds	r7, #8
 800047c:	46bd      	mov	sp, r7
 800047e:	bd80      	pop	{r7, pc}
 8000480:	08001140 	.word	0x08001140

08000484 <processSensor>:
  Sensor Processing Function
------------------------------------------------------------------------------*/
// This function sends the sensor command and, if a complete response is available,
// parses and prints the CO2 concentration using USART2.
void processSensor(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
    // Send the "read CO2" command to the sensor.
    MHZ19_sendReadCommand();
 800048a:	f7ff ffe1 	bl	8000450 <MHZ19_sendReadCommand>

    // (In a real design you might want a short delay or state machine here.)

    // If the sensor response (9 bytes) has been received via the IRQ handler...
    if (USART1_dataAvailable())
 800048e:	f7ff ff81 	bl	8000394 <USART1_dataAvailable>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d02c      	beq.n	80004f2 <processSensor+0x6e>
    {
        uint8_t response[MHZ19_FRAME_LENGTH];
        USART1_getData(response);
 8000498:	1d3b      	adds	r3, r7, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ff86 	bl	80003ac <USART1_getData>

        // Validate the response header.
        if (response[0] == 0xFF && response[1] == 0x86)
 80004a0:	793b      	ldrb	r3, [r7, #4]
 80004a2:	2bff      	cmp	r3, #255	@ 0xff
 80004a4:	d11d      	bne.n	80004e2 <processSensor+0x5e>
 80004a6:	797b      	ldrb	r3, [r7, #5]
 80004a8:	2b86      	cmp	r3, #134	@ 0x86
 80004aa:	d11a      	bne.n	80004e2 <processSensor+0x5e>
        {
            uint8_t cs = MHZ19_checksum(response);
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	4618      	mov	r0, r3
 80004b0:	f7ff ff04 	bl	80002bc <MHZ19_checksum>
 80004b4:	4603      	mov	r3, r0
 80004b6:	75fb      	strb	r3, [r7, #23]
            if (cs == response[8])
 80004b8:	7b3b      	ldrb	r3, [r7, #12]
 80004ba:	7dfa      	ldrb	r2, [r7, #23]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d109      	bne.n	80004d4 <processSensor+0x50>
            {
                // Extract the CO2 concentration from bytes 2 (high) and 3 (low).
                int ppm = ((int)response[2] << 8) | response[3];
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	021b      	lsls	r3, r3, #8
 80004c4:	79fa      	ldrb	r2, [r7, #7]
 80004c6:	4313      	orrs	r3, r2
 80004c8:	613b      	str	r3, [r7, #16]
                print("CO2 = %d ppm\r\n", ppm);
 80004ca:	6939      	ldr	r1, [r7, #16]
 80004cc:	480b      	ldr	r0, [pc, #44]	@ (80004fc <processSensor+0x78>)
 80004ce:	f000 f8b3 	bl	8000638 <print>
        {
 80004d2:	e00e      	b.n	80004f2 <processSensor+0x6e>
            }
            else
            {
                print("Checksum error: expected 0x%02X, got 0x%02X\r\n", cs, response[8]);
 80004d4:	7dfb      	ldrb	r3, [r7, #23]
 80004d6:	7b3a      	ldrb	r2, [r7, #12]
 80004d8:	4619      	mov	r1, r3
 80004da:	4809      	ldr	r0, [pc, #36]	@ (8000500 <processSensor+0x7c>)
 80004dc:	f000 f8ac 	bl	8000638 <print>
        {
 80004e0:	e007      	b.n	80004f2 <processSensor+0x6e>
            }
        }
        else
        {
            print("Invalid sensor response: 0x%02X, 0x%02X\r\n", response[0], response[1]);
 80004e2:	793b      	ldrb	r3, [r7, #4]
 80004e4:	4619      	mov	r1, r3
 80004e6:	797b      	ldrb	r3, [r7, #5]
 80004e8:	461a      	mov	r2, r3
 80004ea:	4806      	ldr	r0, [pc, #24]	@ (8000504 <processSensor+0x80>)
 80004ec:	f000 f8a4 	bl	8000638 <print>
        }
    }
}
 80004f0:	e7ff      	b.n	80004f2 <processSensor+0x6e>
 80004f2:	bf00      	nop
 80004f4:	3718      	adds	r7, #24
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	080010b0 	.word	0x080010b0
 8000500:	080010c0 	.word	0x080010c0
 8000504:	080010f0 	.word	0x080010f0

08000508 <main>:

/*------------------------------------------------------------------------------
  Main Function
------------------------------------------------------------------------------*/
int main(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
    // Initialize peripherals.
    USART1_init();   // Sensor communication.
 800050c:	f7ff fefa 	bl	8000304 <USART1_init>
    USART2_init();   // PC debugging/printing.
 8000510:	f000 f8aa 	bl	8000668 <USART2_init>
    TIMER2_init();   // Timer2 will tick every 1 second.
 8000514:	f000 f854 	bl	80005c0 <TIMER2_init>

    // Greet the user.
    print("MH-Z19 Timer-based Sensor Demo\r\n");
 8000518:	4805      	ldr	r0, [pc, #20]	@ (8000530 <main+0x28>)
 800051a:	f000 f88d 	bl	8000638 <print>

    // Main loop: non-blocking tasks.
    while (1)
    {
        // Every 1 second, as signaled by Timer2, process the sensor data.
        if (TIMER2_expired())
 800051e:	f000 f83b 	bl	8000598 <TIMER2_expired>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d0fa      	beq.n	800051e <main+0x16>
        {
            processSensor();
 8000528:	f7ff ffac 	bl	8000484 <processSensor>
        if (TIMER2_expired())
 800052c:	e7f7      	b.n	800051e <main+0x16>
 800052e:	bf00      	nop
 8000530:	0800111c 	.word	0x0800111c

08000534 <__NVIC_EnableIRQ>:
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	db0b      	blt.n	800055e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f003 021f 	and.w	r2, r3, #31
 800054c:	4907      	ldr	r1, [pc, #28]	@ (800056c <__NVIC_EnableIRQ+0x38>)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	095b      	lsrs	r3, r3, #5
 8000554:	2001      	movs	r0, #1
 8000556:	fa00 f202 	lsl.w	r2, r0, r2
 800055a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000e100 	.word	0xe000e100

08000570 <TIM2_IRQHandler>:




void TIM2_IRQHandler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
	// Clean the interrupt flag.
    TIM2->SR &= ~0x00000001;
 8000574:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000578:	691b      	ldr	r3, [r3, #16]
 800057a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800057e:	f023 0301 	bic.w	r3, r3, #1
 8000582:	6113      	str	r3, [r2, #16]
	// Raise the software flag.
	Expired = TRUE;
 8000584:	4b03      	ldr	r3, [pc, #12]	@ (8000594 <TIM2_IRQHandler+0x24>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000077 	.word	0x20000077

08000598 <TIMER2_expired>:




BOOL TIMER2_expired(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
	if(Expired)
 800059c:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <TIMER2_expired+0x24>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d004      	beq.n	80005ae <TIMER2_expired+0x16>
	{
		Expired = FALSE;
 80005a4:	4b05      	ldr	r3, [pc, #20]	@ (80005bc <TIMER2_expired+0x24>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e000      	b.n	80005b0 <TIMER2_expired+0x18>
	}
	else
	{
		return FALSE;
 80005ae:	2300      	movs	r3, #0
	}
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	20000077 	.word	0x20000077

080005c0 <TIMER2_init>:




void TIMER2_init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    // Enable Timer 2 clock (p. 152 in the datasheet).
    RCC->APB1ENR |= 0x00000001;
 80005c4:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <TIMER2_init+0x34>)
 80005c6:	69db      	ldr	r3, [r3, #28]
 80005c8:	4a0a      	ldr	r2, [pc, #40]	@ (80005f4 <TIMER2_init+0x34>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	61d3      	str	r3, [r2, #28]
    // Set the frequency of Timer 2.
    // Assuming a clock source of 8 MHz (see pp. 127 and 133 in the datasheet),
    // this will set the timer to tick at a rate of 1 Hz.
    TIM2->ARR = 8000000;
 80005d0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d4:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <TIMER2_init+0x38>)
 80005d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Enable the Timer 2 interrupt.
    TIM2->DIER = 0x00000001;
 80005d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005dc:	2201      	movs	r2, #1
 80005de:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 80005e0:	201c      	movs	r0, #28
 80005e2:	f7ff ffa7 	bl	8000534 <__NVIC_EnableIRQ>
    // Enable Timer 2.
    TIM2->CR1 = 0x00000001;
 80005e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005ea:	2201      	movs	r2, #1
 80005ec:	601a      	str	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	007a1200 	.word	0x007a1200

080005fc <__NVIC_EnableIRQ>:
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800060a:	2b00      	cmp	r3, #0
 800060c:	db0b      	blt.n	8000626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	f003 021f 	and.w	r2, r3, #31
 8000614:	4907      	ldr	r1, [pc, #28]	@ (8000634 <__NVIC_EnableIRQ+0x38>)
 8000616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800061a:	095b      	lsrs	r3, r3, #5
 800061c:	2001      	movs	r0, #1
 800061e:	fa00 f202 	lsl.w	r2, r0, r2
 8000622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	e000e100 	.word	0xe000e100

08000638 <print>:




void print(char *p_format, ...)
{
 8000638:	b40f      	push	{r0, r1, r2, r3}
 800063a:	b580      	push	{r7, lr}
 800063c:	b082      	sub	sp, #8
 800063e:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	607b      	str	r3, [r7, #4]
	(void)vsprintf(A_Tx_Buffer, p_format, p_variables);
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	6939      	ldr	r1, [r7, #16]
 800064a:	4806      	ldr	r0, [pc, #24]	@ (8000664 <print+0x2c>)
 800064c:	f000 f89a 	bl	8000784 <vsiprintf>
    USART2_print(A_Tx_Buffer);
 8000650:	4804      	ldr	r0, [pc, #16]	@ (8000664 <print+0x2c>)
 8000652:	f000 f837 	bl	80006c4 <USART2_print>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000660:	b004      	add	sp, #16
 8000662:	4770      	bx	lr
 8000664:	20000078 	.word	0x20000078

08000668 <USART2_init>:




void USART2_init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet).
    RCC->AHBENR |= 0x00020000;
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <USART2_init+0x54>)
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <USART2_init+0x54>)
 8000672:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000676:	6153      	str	r3, [r2, #20]
    // Enable USART2 clock.
    RCC->APB1ENR |= 0x00020000;
 8000678:	4b10      	ldr	r3, [pc, #64]	@ (80006bc <USART2_init+0x54>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	4a0f      	ldr	r2, [pc, #60]	@ (80006bc <USART2_init+0x54>)
 800067e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000682:	61d3      	str	r3, [r2, #28]
    // Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
    GPIOA->MODER |= 0x000000A0;
 8000684:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800068e:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000692:	6013      	str	r3, [r2, #0]
    // AFR[0] is the same as AFRL in the reference manual (p. 241),
    // and AFR[1] is the same as AFRH in the reference manual (p. 242).
    GPIOA->AFR[0] |= 0x00007700;
 8000694:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000698:	6a1b      	ldr	r3, [r3, #32]
 800069a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800069e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80006a2:	6213      	str	r3, [r2, #32]
    USART2->BRR = 833;  // 8 MHz / 9600 baud rate.
 80006a4:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <USART2_init+0x58>)
 80006a6:	f240 3241 	movw	r2, #833	@ 0x341
 80006aa:	60da      	str	r2, [r3, #12]
    // Enable USART2 and its RX and TX functionality.
    // Also enable the RX interrupt.
    USART2->CR1 = 0x0000002D;
 80006ac:	4b04      	ldr	r3, [pc, #16]	@ (80006c0 <USART2_init+0x58>)
 80006ae:	222d      	movs	r2, #45	@ 0x2d
 80006b0:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART2_IRQn);
 80006b2:	2026      	movs	r0, #38	@ 0x26
 80006b4:	f7ff ffa2 	bl	80005fc <__NVIC_EnableIRQ>
}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	40021000 	.word	0x40021000
 80006c0:	40004400 	.word	0x40004400

080006c4 <USART2_print>:




void USART2_print(const char *p_data)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	while(*p_data != '\0')
 80006cc:	e00d      	b.n	80006ea <USART2_print+0x26>
	{
		USART2->TDR = *p_data;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	781a      	ldrb	r2, [r3, #0]
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <USART2_print+0x3c>)
 80006d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_data++;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	3301      	adds	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));
 80006dc:	bf00      	nop
 80006de:	4b08      	ldr	r3, [pc, #32]	@ (8000700 <USART2_print+0x3c>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d0f9      	beq.n	80006de <USART2_print+0x1a>
	while(*p_data != '\0')
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d1ed      	bne.n	80006ce <USART2_print+0xa>
	}
}
 80006f2:	bf00      	nop
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40004400 	.word	0x40004400

08000704 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000704:	480d      	ldr	r0, [pc, #52]	@ (800073c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000706:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000708:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800070c:	480c      	ldr	r0, [pc, #48]	@ (8000740 <LoopForever+0x6>)
  ldr r1, =_edata
 800070e:	490d      	ldr	r1, [pc, #52]	@ (8000744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000710:	4a0d      	ldr	r2, [pc, #52]	@ (8000748 <LoopForever+0xe>)
  movs r3, #0
 8000712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000714:	e002      	b.n	800071c <LoopCopyDataInit>

08000716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800071a:	3304      	adds	r3, #4

0800071c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800071c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000720:	d3f9      	bcc.n	8000716 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000722:	4a0a      	ldr	r2, [pc, #40]	@ (800074c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000724:	4c0a      	ldr	r4, [pc, #40]	@ (8000750 <LoopForever+0x16>)
  movs r3, #0
 8000726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000728:	e001      	b.n	800072e <LoopFillZerobss>

0800072a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800072a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800072c:	3204      	adds	r2, #4

0800072e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000730:	d3fb      	bcc.n	800072a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000732:	f000 f831 	bl	8000798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fee7 	bl	8000508 <main>

0800073a <LoopForever>:

LoopForever:
    b LoopForever
 800073a:	e7fe      	b.n	800073a <LoopForever>
  ldr   r0, =_estack
 800073c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000744:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000748:	0800118c 	.word	0x0800118c
  ldr r2, =_sbss
 800074c:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000750:	20000244 	.word	0x20000244

08000754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000754:	e7fe      	b.n	8000754 <ADC1_2_IRQHandler>
	...

08000758 <_vsiprintf_r>:
 8000758:	b500      	push	{lr}
 800075a:	b09b      	sub	sp, #108	@ 0x6c
 800075c:	9100      	str	r1, [sp, #0]
 800075e:	9104      	str	r1, [sp, #16]
 8000760:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000764:	9105      	str	r1, [sp, #20]
 8000766:	9102      	str	r1, [sp, #8]
 8000768:	4905      	ldr	r1, [pc, #20]	@ (8000780 <_vsiprintf_r+0x28>)
 800076a:	9103      	str	r1, [sp, #12]
 800076c:	4669      	mov	r1, sp
 800076e:	f000 f98d 	bl	8000a8c <_svfiprintf_r>
 8000772:	9b00      	ldr	r3, [sp, #0]
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	b01b      	add	sp, #108	@ 0x6c
 800077a:	f85d fb04 	ldr.w	pc, [sp], #4
 800077e:	bf00      	nop
 8000780:	ffff0208 	.word	0xffff0208

08000784 <vsiprintf>:
 8000784:	4613      	mov	r3, r2
 8000786:	460a      	mov	r2, r1
 8000788:	4601      	mov	r1, r0
 800078a:	4802      	ldr	r0, [pc, #8]	@ (8000794 <vsiprintf+0x10>)
 800078c:	6800      	ldr	r0, [r0, #0]
 800078e:	f7ff bfe3 	b.w	8000758 <_vsiprintf_r>
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000

08000798 <__libc_init_array>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4d0d      	ldr	r5, [pc, #52]	@ (80007d0 <__libc_init_array+0x38>)
 800079c:	4c0d      	ldr	r4, [pc, #52]	@ (80007d4 <__libc_init_array+0x3c>)
 800079e:	1b64      	subs	r4, r4, r5
 80007a0:	10a4      	asrs	r4, r4, #2
 80007a2:	2600      	movs	r6, #0
 80007a4:	42a6      	cmp	r6, r4
 80007a6:	d109      	bne.n	80007bc <__libc_init_array+0x24>
 80007a8:	4d0b      	ldr	r5, [pc, #44]	@ (80007d8 <__libc_init_array+0x40>)
 80007aa:	4c0c      	ldr	r4, [pc, #48]	@ (80007dc <__libc_init_array+0x44>)
 80007ac:	f000 fc74 	bl	8001098 <_init>
 80007b0:	1b64      	subs	r4, r4, r5
 80007b2:	10a4      	asrs	r4, r4, #2
 80007b4:	2600      	movs	r6, #0
 80007b6:	42a6      	cmp	r6, r4
 80007b8:	d105      	bne.n	80007c6 <__libc_init_array+0x2e>
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c0:	4798      	blx	r3
 80007c2:	3601      	adds	r6, #1
 80007c4:	e7ee      	b.n	80007a4 <__libc_init_array+0xc>
 80007c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ca:	4798      	blx	r3
 80007cc:	3601      	adds	r6, #1
 80007ce:	e7f2      	b.n	80007b6 <__libc_init_array+0x1e>
 80007d0:	08001184 	.word	0x08001184
 80007d4:	08001184 	.word	0x08001184
 80007d8:	08001184 	.word	0x08001184
 80007dc:	08001188 	.word	0x08001188

080007e0 <__retarget_lock_acquire_recursive>:
 80007e0:	4770      	bx	lr

080007e2 <__retarget_lock_release_recursive>:
 80007e2:	4770      	bx	lr

080007e4 <_free_r>:
 80007e4:	b538      	push	{r3, r4, r5, lr}
 80007e6:	4605      	mov	r5, r0
 80007e8:	2900      	cmp	r1, #0
 80007ea:	d041      	beq.n	8000870 <_free_r+0x8c>
 80007ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007f0:	1f0c      	subs	r4, r1, #4
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	bfb8      	it	lt
 80007f6:	18e4      	addlt	r4, r4, r3
 80007f8:	f000 f8e0 	bl	80009bc <__malloc_lock>
 80007fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000874 <_free_r+0x90>)
 80007fe:	6813      	ldr	r3, [r2, #0]
 8000800:	b933      	cbnz	r3, 8000810 <_free_r+0x2c>
 8000802:	6063      	str	r3, [r4, #4]
 8000804:	6014      	str	r4, [r2, #0]
 8000806:	4628      	mov	r0, r5
 8000808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800080c:	f000 b8dc 	b.w	80009c8 <__malloc_unlock>
 8000810:	42a3      	cmp	r3, r4
 8000812:	d908      	bls.n	8000826 <_free_r+0x42>
 8000814:	6820      	ldr	r0, [r4, #0]
 8000816:	1821      	adds	r1, r4, r0
 8000818:	428b      	cmp	r3, r1
 800081a:	bf01      	itttt	eq
 800081c:	6819      	ldreq	r1, [r3, #0]
 800081e:	685b      	ldreq	r3, [r3, #4]
 8000820:	1809      	addeq	r1, r1, r0
 8000822:	6021      	streq	r1, [r4, #0]
 8000824:	e7ed      	b.n	8000802 <_free_r+0x1e>
 8000826:	461a      	mov	r2, r3
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	b10b      	cbz	r3, 8000830 <_free_r+0x4c>
 800082c:	42a3      	cmp	r3, r4
 800082e:	d9fa      	bls.n	8000826 <_free_r+0x42>
 8000830:	6811      	ldr	r1, [r2, #0]
 8000832:	1850      	adds	r0, r2, r1
 8000834:	42a0      	cmp	r0, r4
 8000836:	d10b      	bne.n	8000850 <_free_r+0x6c>
 8000838:	6820      	ldr	r0, [r4, #0]
 800083a:	4401      	add	r1, r0
 800083c:	1850      	adds	r0, r2, r1
 800083e:	4283      	cmp	r3, r0
 8000840:	6011      	str	r1, [r2, #0]
 8000842:	d1e0      	bne.n	8000806 <_free_r+0x22>
 8000844:	6818      	ldr	r0, [r3, #0]
 8000846:	685b      	ldr	r3, [r3, #4]
 8000848:	6053      	str	r3, [r2, #4]
 800084a:	4408      	add	r0, r1
 800084c:	6010      	str	r0, [r2, #0]
 800084e:	e7da      	b.n	8000806 <_free_r+0x22>
 8000850:	d902      	bls.n	8000858 <_free_r+0x74>
 8000852:	230c      	movs	r3, #12
 8000854:	602b      	str	r3, [r5, #0]
 8000856:	e7d6      	b.n	8000806 <_free_r+0x22>
 8000858:	6820      	ldr	r0, [r4, #0]
 800085a:	1821      	adds	r1, r4, r0
 800085c:	428b      	cmp	r3, r1
 800085e:	bf04      	itt	eq
 8000860:	6819      	ldreq	r1, [r3, #0]
 8000862:	685b      	ldreq	r3, [r3, #4]
 8000864:	6063      	str	r3, [r4, #4]
 8000866:	bf04      	itt	eq
 8000868:	1809      	addeq	r1, r1, r0
 800086a:	6021      	streq	r1, [r4, #0]
 800086c:	6054      	str	r4, [r2, #4]
 800086e:	e7ca      	b.n	8000806 <_free_r+0x22>
 8000870:	bd38      	pop	{r3, r4, r5, pc}
 8000872:	bf00      	nop
 8000874:	2000023c 	.word	0x2000023c

08000878 <sbrk_aligned>:
 8000878:	b570      	push	{r4, r5, r6, lr}
 800087a:	4e0f      	ldr	r6, [pc, #60]	@ (80008b8 <sbrk_aligned+0x40>)
 800087c:	460c      	mov	r4, r1
 800087e:	6831      	ldr	r1, [r6, #0]
 8000880:	4605      	mov	r5, r0
 8000882:	b911      	cbnz	r1, 800088a <sbrk_aligned+0x12>
 8000884:	f000 fba6 	bl	8000fd4 <_sbrk_r>
 8000888:	6030      	str	r0, [r6, #0]
 800088a:	4621      	mov	r1, r4
 800088c:	4628      	mov	r0, r5
 800088e:	f000 fba1 	bl	8000fd4 <_sbrk_r>
 8000892:	1c43      	adds	r3, r0, #1
 8000894:	d103      	bne.n	800089e <sbrk_aligned+0x26>
 8000896:	f04f 34ff 	mov.w	r4, #4294967295
 800089a:	4620      	mov	r0, r4
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	1cc4      	adds	r4, r0, #3
 80008a0:	f024 0403 	bic.w	r4, r4, #3
 80008a4:	42a0      	cmp	r0, r4
 80008a6:	d0f8      	beq.n	800089a <sbrk_aligned+0x22>
 80008a8:	1a21      	subs	r1, r4, r0
 80008aa:	4628      	mov	r0, r5
 80008ac:	f000 fb92 	bl	8000fd4 <_sbrk_r>
 80008b0:	3001      	adds	r0, #1
 80008b2:	d1f2      	bne.n	800089a <sbrk_aligned+0x22>
 80008b4:	e7ef      	b.n	8000896 <sbrk_aligned+0x1e>
 80008b6:	bf00      	nop
 80008b8:	20000238 	.word	0x20000238

080008bc <_malloc_r>:
 80008bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008c0:	1ccd      	adds	r5, r1, #3
 80008c2:	f025 0503 	bic.w	r5, r5, #3
 80008c6:	3508      	adds	r5, #8
 80008c8:	2d0c      	cmp	r5, #12
 80008ca:	bf38      	it	cc
 80008cc:	250c      	movcc	r5, #12
 80008ce:	2d00      	cmp	r5, #0
 80008d0:	4606      	mov	r6, r0
 80008d2:	db01      	blt.n	80008d8 <_malloc_r+0x1c>
 80008d4:	42a9      	cmp	r1, r5
 80008d6:	d904      	bls.n	80008e2 <_malloc_r+0x26>
 80008d8:	230c      	movs	r3, #12
 80008da:	6033      	str	r3, [r6, #0]
 80008dc:	2000      	movs	r0, #0
 80008de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009b8 <_malloc_r+0xfc>
 80008e6:	f000 f869 	bl	80009bc <__malloc_lock>
 80008ea:	f8d8 3000 	ldr.w	r3, [r8]
 80008ee:	461c      	mov	r4, r3
 80008f0:	bb44      	cbnz	r4, 8000944 <_malloc_r+0x88>
 80008f2:	4629      	mov	r1, r5
 80008f4:	4630      	mov	r0, r6
 80008f6:	f7ff ffbf 	bl	8000878 <sbrk_aligned>
 80008fa:	1c43      	adds	r3, r0, #1
 80008fc:	4604      	mov	r4, r0
 80008fe:	d158      	bne.n	80009b2 <_malloc_r+0xf6>
 8000900:	f8d8 4000 	ldr.w	r4, [r8]
 8000904:	4627      	mov	r7, r4
 8000906:	2f00      	cmp	r7, #0
 8000908:	d143      	bne.n	8000992 <_malloc_r+0xd6>
 800090a:	2c00      	cmp	r4, #0
 800090c:	d04b      	beq.n	80009a6 <_malloc_r+0xea>
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	4639      	mov	r1, r7
 8000912:	4630      	mov	r0, r6
 8000914:	eb04 0903 	add.w	r9, r4, r3
 8000918:	f000 fb5c 	bl	8000fd4 <_sbrk_r>
 800091c:	4581      	cmp	r9, r0
 800091e:	d142      	bne.n	80009a6 <_malloc_r+0xea>
 8000920:	6821      	ldr	r1, [r4, #0]
 8000922:	1a6d      	subs	r5, r5, r1
 8000924:	4629      	mov	r1, r5
 8000926:	4630      	mov	r0, r6
 8000928:	f7ff ffa6 	bl	8000878 <sbrk_aligned>
 800092c:	3001      	adds	r0, #1
 800092e:	d03a      	beq.n	80009a6 <_malloc_r+0xea>
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	442b      	add	r3, r5
 8000934:	6023      	str	r3, [r4, #0]
 8000936:	f8d8 3000 	ldr.w	r3, [r8]
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	bb62      	cbnz	r2, 8000998 <_malloc_r+0xdc>
 800093e:	f8c8 7000 	str.w	r7, [r8]
 8000942:	e00f      	b.n	8000964 <_malloc_r+0xa8>
 8000944:	6822      	ldr	r2, [r4, #0]
 8000946:	1b52      	subs	r2, r2, r5
 8000948:	d420      	bmi.n	800098c <_malloc_r+0xd0>
 800094a:	2a0b      	cmp	r2, #11
 800094c:	d917      	bls.n	800097e <_malloc_r+0xc2>
 800094e:	1961      	adds	r1, r4, r5
 8000950:	42a3      	cmp	r3, r4
 8000952:	6025      	str	r5, [r4, #0]
 8000954:	bf18      	it	ne
 8000956:	6059      	strne	r1, [r3, #4]
 8000958:	6863      	ldr	r3, [r4, #4]
 800095a:	bf08      	it	eq
 800095c:	f8c8 1000 	streq.w	r1, [r8]
 8000960:	5162      	str	r2, [r4, r5]
 8000962:	604b      	str	r3, [r1, #4]
 8000964:	4630      	mov	r0, r6
 8000966:	f000 f82f 	bl	80009c8 <__malloc_unlock>
 800096a:	f104 000b 	add.w	r0, r4, #11
 800096e:	1d23      	adds	r3, r4, #4
 8000970:	f020 0007 	bic.w	r0, r0, #7
 8000974:	1ac2      	subs	r2, r0, r3
 8000976:	bf1c      	itt	ne
 8000978:	1a1b      	subne	r3, r3, r0
 800097a:	50a3      	strne	r3, [r4, r2]
 800097c:	e7af      	b.n	80008de <_malloc_r+0x22>
 800097e:	6862      	ldr	r2, [r4, #4]
 8000980:	42a3      	cmp	r3, r4
 8000982:	bf0c      	ite	eq
 8000984:	f8c8 2000 	streq.w	r2, [r8]
 8000988:	605a      	strne	r2, [r3, #4]
 800098a:	e7eb      	b.n	8000964 <_malloc_r+0xa8>
 800098c:	4623      	mov	r3, r4
 800098e:	6864      	ldr	r4, [r4, #4]
 8000990:	e7ae      	b.n	80008f0 <_malloc_r+0x34>
 8000992:	463c      	mov	r4, r7
 8000994:	687f      	ldr	r7, [r7, #4]
 8000996:	e7b6      	b.n	8000906 <_malloc_r+0x4a>
 8000998:	461a      	mov	r2, r3
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	42a3      	cmp	r3, r4
 800099e:	d1fb      	bne.n	8000998 <_malloc_r+0xdc>
 80009a0:	2300      	movs	r3, #0
 80009a2:	6053      	str	r3, [r2, #4]
 80009a4:	e7de      	b.n	8000964 <_malloc_r+0xa8>
 80009a6:	230c      	movs	r3, #12
 80009a8:	6033      	str	r3, [r6, #0]
 80009aa:	4630      	mov	r0, r6
 80009ac:	f000 f80c 	bl	80009c8 <__malloc_unlock>
 80009b0:	e794      	b.n	80008dc <_malloc_r+0x20>
 80009b2:	6005      	str	r5, [r0, #0]
 80009b4:	e7d6      	b.n	8000964 <_malloc_r+0xa8>
 80009b6:	bf00      	nop
 80009b8:	2000023c 	.word	0x2000023c

080009bc <__malloc_lock>:
 80009bc:	4801      	ldr	r0, [pc, #4]	@ (80009c4 <__malloc_lock+0x8>)
 80009be:	f7ff bf0f 	b.w	80007e0 <__retarget_lock_acquire_recursive>
 80009c2:	bf00      	nop
 80009c4:	20000234 	.word	0x20000234

080009c8 <__malloc_unlock>:
 80009c8:	4801      	ldr	r0, [pc, #4]	@ (80009d0 <__malloc_unlock+0x8>)
 80009ca:	f7ff bf0a 	b.w	80007e2 <__retarget_lock_release_recursive>
 80009ce:	bf00      	nop
 80009d0:	20000234 	.word	0x20000234

080009d4 <__ssputs_r>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	688e      	ldr	r6, [r1, #8]
 80009da:	461f      	mov	r7, r3
 80009dc:	42be      	cmp	r6, r7
 80009de:	680b      	ldr	r3, [r1, #0]
 80009e0:	4682      	mov	sl, r0
 80009e2:	460c      	mov	r4, r1
 80009e4:	4690      	mov	r8, r2
 80009e6:	d82d      	bhi.n	8000a44 <__ssputs_r+0x70>
 80009e8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009ec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009f0:	d026      	beq.n	8000a40 <__ssputs_r+0x6c>
 80009f2:	6965      	ldr	r5, [r4, #20]
 80009f4:	6909      	ldr	r1, [r1, #16]
 80009f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009fa:	eba3 0901 	sub.w	r9, r3, r1
 80009fe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000a02:	1c7b      	adds	r3, r7, #1
 8000a04:	444b      	add	r3, r9
 8000a06:	106d      	asrs	r5, r5, #1
 8000a08:	429d      	cmp	r5, r3
 8000a0a:	bf38      	it	cc
 8000a0c:	461d      	movcc	r5, r3
 8000a0e:	0553      	lsls	r3, r2, #21
 8000a10:	d527      	bpl.n	8000a62 <__ssputs_r+0x8e>
 8000a12:	4629      	mov	r1, r5
 8000a14:	f7ff ff52 	bl	80008bc <_malloc_r>
 8000a18:	4606      	mov	r6, r0
 8000a1a:	b360      	cbz	r0, 8000a76 <__ssputs_r+0xa2>
 8000a1c:	6921      	ldr	r1, [r4, #16]
 8000a1e:	464a      	mov	r2, r9
 8000a20:	f000 fae8 	bl	8000ff4 <memcpy>
 8000a24:	89a3      	ldrh	r3, [r4, #12]
 8000a26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a2e:	81a3      	strh	r3, [r4, #12]
 8000a30:	6126      	str	r6, [r4, #16]
 8000a32:	6165      	str	r5, [r4, #20]
 8000a34:	444e      	add	r6, r9
 8000a36:	eba5 0509 	sub.w	r5, r5, r9
 8000a3a:	6026      	str	r6, [r4, #0]
 8000a3c:	60a5      	str	r5, [r4, #8]
 8000a3e:	463e      	mov	r6, r7
 8000a40:	42be      	cmp	r6, r7
 8000a42:	d900      	bls.n	8000a46 <__ssputs_r+0x72>
 8000a44:	463e      	mov	r6, r7
 8000a46:	6820      	ldr	r0, [r4, #0]
 8000a48:	4632      	mov	r2, r6
 8000a4a:	4641      	mov	r1, r8
 8000a4c:	f000 faa8 	bl	8000fa0 <memmove>
 8000a50:	68a3      	ldr	r3, [r4, #8]
 8000a52:	1b9b      	subs	r3, r3, r6
 8000a54:	60a3      	str	r3, [r4, #8]
 8000a56:	6823      	ldr	r3, [r4, #0]
 8000a58:	4433      	add	r3, r6
 8000a5a:	6023      	str	r3, [r4, #0]
 8000a5c:	2000      	movs	r0, #0
 8000a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a62:	462a      	mov	r2, r5
 8000a64:	f000 fad4 	bl	8001010 <_realloc_r>
 8000a68:	4606      	mov	r6, r0
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d1e0      	bne.n	8000a30 <__ssputs_r+0x5c>
 8000a6e:	6921      	ldr	r1, [r4, #16]
 8000a70:	4650      	mov	r0, sl
 8000a72:	f7ff feb7 	bl	80007e4 <_free_r>
 8000a76:	230c      	movs	r3, #12
 8000a78:	f8ca 3000 	str.w	r3, [sl]
 8000a7c:	89a3      	ldrh	r3, [r4, #12]
 8000a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a82:	81a3      	strh	r3, [r4, #12]
 8000a84:	f04f 30ff 	mov.w	r0, #4294967295
 8000a88:	e7e9      	b.n	8000a5e <__ssputs_r+0x8a>
	...

08000a8c <_svfiprintf_r>:
 8000a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a90:	4698      	mov	r8, r3
 8000a92:	898b      	ldrh	r3, [r1, #12]
 8000a94:	061b      	lsls	r3, r3, #24
 8000a96:	b09d      	sub	sp, #116	@ 0x74
 8000a98:	4607      	mov	r7, r0
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4614      	mov	r4, r2
 8000a9e:	d510      	bpl.n	8000ac2 <_svfiprintf_r+0x36>
 8000aa0:	690b      	ldr	r3, [r1, #16]
 8000aa2:	b973      	cbnz	r3, 8000ac2 <_svfiprintf_r+0x36>
 8000aa4:	2140      	movs	r1, #64	@ 0x40
 8000aa6:	f7ff ff09 	bl	80008bc <_malloc_r>
 8000aaa:	6028      	str	r0, [r5, #0]
 8000aac:	6128      	str	r0, [r5, #16]
 8000aae:	b930      	cbnz	r0, 8000abe <_svfiprintf_r+0x32>
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	b01d      	add	sp, #116	@ 0x74
 8000aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000abe:	2340      	movs	r3, #64	@ 0x40
 8000ac0:	616b      	str	r3, [r5, #20]
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ac6:	2320      	movs	r3, #32
 8000ac8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000acc:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ad0:	2330      	movs	r3, #48	@ 0x30
 8000ad2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c70 <_svfiprintf_r+0x1e4>
 8000ad6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ada:	f04f 0901 	mov.w	r9, #1
 8000ade:	4623      	mov	r3, r4
 8000ae0:	469a      	mov	sl, r3
 8000ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ae6:	b10a      	cbz	r2, 8000aec <_svfiprintf_r+0x60>
 8000ae8:	2a25      	cmp	r2, #37	@ 0x25
 8000aea:	d1f9      	bne.n	8000ae0 <_svfiprintf_r+0x54>
 8000aec:	ebba 0b04 	subs.w	fp, sl, r4
 8000af0:	d00b      	beq.n	8000b0a <_svfiprintf_r+0x7e>
 8000af2:	465b      	mov	r3, fp
 8000af4:	4622      	mov	r2, r4
 8000af6:	4629      	mov	r1, r5
 8000af8:	4638      	mov	r0, r7
 8000afa:	f7ff ff6b 	bl	80009d4 <__ssputs_r>
 8000afe:	3001      	adds	r0, #1
 8000b00:	f000 80a7 	beq.w	8000c52 <_svfiprintf_r+0x1c6>
 8000b04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b06:	445a      	add	r2, fp
 8000b08:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b0a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	f000 809f 	beq.w	8000c52 <_svfiprintf_r+0x1c6>
 8000b14:	2300      	movs	r3, #0
 8000b16:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b1e:	f10a 0a01 	add.w	sl, sl, #1
 8000b22:	9304      	str	r3, [sp, #16]
 8000b24:	9307      	str	r3, [sp, #28]
 8000b26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b2c:	4654      	mov	r4, sl
 8000b2e:	2205      	movs	r2, #5
 8000b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b34:	484e      	ldr	r0, [pc, #312]	@ (8000c70 <_svfiprintf_r+0x1e4>)
 8000b36:	f7ff fb53 	bl	80001e0 <memchr>
 8000b3a:	9a04      	ldr	r2, [sp, #16]
 8000b3c:	b9d8      	cbnz	r0, 8000b76 <_svfiprintf_r+0xea>
 8000b3e:	06d0      	lsls	r0, r2, #27
 8000b40:	bf44      	itt	mi
 8000b42:	2320      	movmi	r3, #32
 8000b44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b48:	0711      	lsls	r1, r2, #28
 8000b4a:	bf44      	itt	mi
 8000b4c:	232b      	movmi	r3, #43	@ 0x2b
 8000b4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b52:	f89a 3000 	ldrb.w	r3, [sl]
 8000b56:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b58:	d015      	beq.n	8000b86 <_svfiprintf_r+0xfa>
 8000b5a:	9a07      	ldr	r2, [sp, #28]
 8000b5c:	4654      	mov	r4, sl
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f04f 0c0a 	mov.w	ip, #10
 8000b64:	4621      	mov	r1, r4
 8000b66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b6a:	3b30      	subs	r3, #48	@ 0x30
 8000b6c:	2b09      	cmp	r3, #9
 8000b6e:	d94b      	bls.n	8000c08 <_svfiprintf_r+0x17c>
 8000b70:	b1b0      	cbz	r0, 8000ba0 <_svfiprintf_r+0x114>
 8000b72:	9207      	str	r2, [sp, #28]
 8000b74:	e014      	b.n	8000ba0 <_svfiprintf_r+0x114>
 8000b76:	eba0 0308 	sub.w	r3, r0, r8
 8000b7a:	fa09 f303 	lsl.w	r3, r9, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	9304      	str	r3, [sp, #16]
 8000b82:	46a2      	mov	sl, r4
 8000b84:	e7d2      	b.n	8000b2c <_svfiprintf_r+0xa0>
 8000b86:	9b03      	ldr	r3, [sp, #12]
 8000b88:	1d19      	adds	r1, r3, #4
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	9103      	str	r1, [sp, #12]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	bfbb      	ittet	lt
 8000b92:	425b      	neglt	r3, r3
 8000b94:	f042 0202 	orrlt.w	r2, r2, #2
 8000b98:	9307      	strge	r3, [sp, #28]
 8000b9a:	9307      	strlt	r3, [sp, #28]
 8000b9c:	bfb8      	it	lt
 8000b9e:	9204      	strlt	r2, [sp, #16]
 8000ba0:	7823      	ldrb	r3, [r4, #0]
 8000ba2:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ba4:	d10a      	bne.n	8000bbc <_svfiprintf_r+0x130>
 8000ba6:	7863      	ldrb	r3, [r4, #1]
 8000ba8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000baa:	d132      	bne.n	8000c12 <_svfiprintf_r+0x186>
 8000bac:	9b03      	ldr	r3, [sp, #12]
 8000bae:	1d1a      	adds	r2, r3, #4
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	9203      	str	r2, [sp, #12]
 8000bb4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000bb8:	3402      	adds	r4, #2
 8000bba:	9305      	str	r3, [sp, #20]
 8000bbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c80 <_svfiprintf_r+0x1f4>
 8000bc0:	7821      	ldrb	r1, [r4, #0]
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	4650      	mov	r0, sl
 8000bc6:	f7ff fb0b 	bl	80001e0 <memchr>
 8000bca:	b138      	cbz	r0, 8000bdc <_svfiprintf_r+0x150>
 8000bcc:	9b04      	ldr	r3, [sp, #16]
 8000bce:	eba0 000a 	sub.w	r0, r0, sl
 8000bd2:	2240      	movs	r2, #64	@ 0x40
 8000bd4:	4082      	lsls	r2, r0
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	3401      	adds	r4, #1
 8000bda:	9304      	str	r3, [sp, #16]
 8000bdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000be0:	4824      	ldr	r0, [pc, #144]	@ (8000c74 <_svfiprintf_r+0x1e8>)
 8000be2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000be6:	2206      	movs	r2, #6
 8000be8:	f7ff fafa 	bl	80001e0 <memchr>
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d036      	beq.n	8000c5e <_svfiprintf_r+0x1d2>
 8000bf0:	4b21      	ldr	r3, [pc, #132]	@ (8000c78 <_svfiprintf_r+0x1ec>)
 8000bf2:	bb1b      	cbnz	r3, 8000c3c <_svfiprintf_r+0x1b0>
 8000bf4:	9b03      	ldr	r3, [sp, #12]
 8000bf6:	3307      	adds	r3, #7
 8000bf8:	f023 0307 	bic.w	r3, r3, #7
 8000bfc:	3308      	adds	r3, #8
 8000bfe:	9303      	str	r3, [sp, #12]
 8000c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000c02:	4433      	add	r3, r6
 8000c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c06:	e76a      	b.n	8000ade <_svfiprintf_r+0x52>
 8000c08:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c0c:	460c      	mov	r4, r1
 8000c0e:	2001      	movs	r0, #1
 8000c10:	e7a8      	b.n	8000b64 <_svfiprintf_r+0xd8>
 8000c12:	2300      	movs	r3, #0
 8000c14:	3401      	adds	r4, #1
 8000c16:	9305      	str	r3, [sp, #20]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f04f 0c0a 	mov.w	ip, #10
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c24:	3a30      	subs	r2, #48	@ 0x30
 8000c26:	2a09      	cmp	r2, #9
 8000c28:	d903      	bls.n	8000c32 <_svfiprintf_r+0x1a6>
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d0c6      	beq.n	8000bbc <_svfiprintf_r+0x130>
 8000c2e:	9105      	str	r1, [sp, #20]
 8000c30:	e7c4      	b.n	8000bbc <_svfiprintf_r+0x130>
 8000c32:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c36:	4604      	mov	r4, r0
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e7f0      	b.n	8000c1e <_svfiprintf_r+0x192>
 8000c3c:	ab03      	add	r3, sp, #12
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	462a      	mov	r2, r5
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <_svfiprintf_r+0x1f0>)
 8000c44:	a904      	add	r1, sp, #16
 8000c46:	4638      	mov	r0, r7
 8000c48:	f3af 8000 	nop.w
 8000c4c:	1c42      	adds	r2, r0, #1
 8000c4e:	4606      	mov	r6, r0
 8000c50:	d1d6      	bne.n	8000c00 <_svfiprintf_r+0x174>
 8000c52:	89ab      	ldrh	r3, [r5, #12]
 8000c54:	065b      	lsls	r3, r3, #25
 8000c56:	f53f af2d 	bmi.w	8000ab4 <_svfiprintf_r+0x28>
 8000c5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c5c:	e72c      	b.n	8000ab8 <_svfiprintf_r+0x2c>
 8000c5e:	ab03      	add	r3, sp, #12
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	462a      	mov	r2, r5
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <_svfiprintf_r+0x1f0>)
 8000c66:	a904      	add	r1, sp, #16
 8000c68:	4638      	mov	r0, r7
 8000c6a:	f000 f879 	bl	8000d60 <_printf_i>
 8000c6e:	e7ed      	b.n	8000c4c <_svfiprintf_r+0x1c0>
 8000c70:	08001149 	.word	0x08001149
 8000c74:	08001153 	.word	0x08001153
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	080009d5 	.word	0x080009d5
 8000c80:	0800114f 	.word	0x0800114f

08000c84 <_printf_common>:
 8000c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c88:	4616      	mov	r6, r2
 8000c8a:	4698      	mov	r8, r3
 8000c8c:	688a      	ldr	r2, [r1, #8]
 8000c8e:	690b      	ldr	r3, [r1, #16]
 8000c90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c94:	4293      	cmp	r3, r2
 8000c96:	bfb8      	it	lt
 8000c98:	4613      	movlt	r3, r2
 8000c9a:	6033      	str	r3, [r6, #0]
 8000c9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ca0:	4607      	mov	r7, r0
 8000ca2:	460c      	mov	r4, r1
 8000ca4:	b10a      	cbz	r2, 8000caa <_printf_common+0x26>
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	6033      	str	r3, [r6, #0]
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	0699      	lsls	r1, r3, #26
 8000cae:	bf42      	ittt	mi
 8000cb0:	6833      	ldrmi	r3, [r6, #0]
 8000cb2:	3302      	addmi	r3, #2
 8000cb4:	6033      	strmi	r3, [r6, #0]
 8000cb6:	6825      	ldr	r5, [r4, #0]
 8000cb8:	f015 0506 	ands.w	r5, r5, #6
 8000cbc:	d106      	bne.n	8000ccc <_printf_common+0x48>
 8000cbe:	f104 0a19 	add.w	sl, r4, #25
 8000cc2:	68e3      	ldr	r3, [r4, #12]
 8000cc4:	6832      	ldr	r2, [r6, #0]
 8000cc6:	1a9b      	subs	r3, r3, r2
 8000cc8:	42ab      	cmp	r3, r5
 8000cca:	dc26      	bgt.n	8000d1a <_printf_common+0x96>
 8000ccc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cd0:	6822      	ldr	r2, [r4, #0]
 8000cd2:	3b00      	subs	r3, #0
 8000cd4:	bf18      	it	ne
 8000cd6:	2301      	movne	r3, #1
 8000cd8:	0692      	lsls	r2, r2, #26
 8000cda:	d42b      	bmi.n	8000d34 <_printf_common+0xb0>
 8000cdc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ce0:	4641      	mov	r1, r8
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	47c8      	blx	r9
 8000ce6:	3001      	adds	r0, #1
 8000ce8:	d01e      	beq.n	8000d28 <_printf_common+0xa4>
 8000cea:	6823      	ldr	r3, [r4, #0]
 8000cec:	6922      	ldr	r2, [r4, #16]
 8000cee:	f003 0306 	and.w	r3, r3, #6
 8000cf2:	2b04      	cmp	r3, #4
 8000cf4:	bf02      	ittt	eq
 8000cf6:	68e5      	ldreq	r5, [r4, #12]
 8000cf8:	6833      	ldreq	r3, [r6, #0]
 8000cfa:	1aed      	subeq	r5, r5, r3
 8000cfc:	68a3      	ldr	r3, [r4, #8]
 8000cfe:	bf0c      	ite	eq
 8000d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d04:	2500      	movne	r5, #0
 8000d06:	4293      	cmp	r3, r2
 8000d08:	bfc4      	itt	gt
 8000d0a:	1a9b      	subgt	r3, r3, r2
 8000d0c:	18ed      	addgt	r5, r5, r3
 8000d0e:	2600      	movs	r6, #0
 8000d10:	341a      	adds	r4, #26
 8000d12:	42b5      	cmp	r5, r6
 8000d14:	d11a      	bne.n	8000d4c <_printf_common+0xc8>
 8000d16:	2000      	movs	r0, #0
 8000d18:	e008      	b.n	8000d2c <_printf_common+0xa8>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4652      	mov	r2, sl
 8000d1e:	4641      	mov	r1, r8
 8000d20:	4638      	mov	r0, r7
 8000d22:	47c8      	blx	r9
 8000d24:	3001      	adds	r0, #1
 8000d26:	d103      	bne.n	8000d30 <_printf_common+0xac>
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d30:	3501      	adds	r5, #1
 8000d32:	e7c6      	b.n	8000cc2 <_printf_common+0x3e>
 8000d34:	18e1      	adds	r1, r4, r3
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	2030      	movs	r0, #48	@ 0x30
 8000d3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d3e:	4422      	add	r2, r4
 8000d40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d48:	3302      	adds	r3, #2
 8000d4a:	e7c7      	b.n	8000cdc <_printf_common+0x58>
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4622      	mov	r2, r4
 8000d50:	4641      	mov	r1, r8
 8000d52:	4638      	mov	r0, r7
 8000d54:	47c8      	blx	r9
 8000d56:	3001      	adds	r0, #1
 8000d58:	d0e6      	beq.n	8000d28 <_printf_common+0xa4>
 8000d5a:	3601      	adds	r6, #1
 8000d5c:	e7d9      	b.n	8000d12 <_printf_common+0x8e>
	...

08000d60 <_printf_i>:
 8000d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d64:	7e0f      	ldrb	r7, [r1, #24]
 8000d66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d68:	2f78      	cmp	r7, #120	@ 0x78
 8000d6a:	4691      	mov	r9, r2
 8000d6c:	4680      	mov	r8, r0
 8000d6e:	460c      	mov	r4, r1
 8000d70:	469a      	mov	sl, r3
 8000d72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d76:	d807      	bhi.n	8000d88 <_printf_i+0x28>
 8000d78:	2f62      	cmp	r7, #98	@ 0x62
 8000d7a:	d80a      	bhi.n	8000d92 <_printf_i+0x32>
 8000d7c:	2f00      	cmp	r7, #0
 8000d7e:	f000 80d2 	beq.w	8000f26 <_printf_i+0x1c6>
 8000d82:	2f58      	cmp	r7, #88	@ 0x58
 8000d84:	f000 80b9 	beq.w	8000efa <_printf_i+0x19a>
 8000d88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d90:	e03a      	b.n	8000e08 <_printf_i+0xa8>
 8000d92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d96:	2b15      	cmp	r3, #21
 8000d98:	d8f6      	bhi.n	8000d88 <_printf_i+0x28>
 8000d9a:	a101      	add	r1, pc, #4	@ (adr r1, 8000da0 <_printf_i+0x40>)
 8000d9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000da0:	08000df9 	.word	0x08000df9
 8000da4:	08000e0d 	.word	0x08000e0d
 8000da8:	08000d89 	.word	0x08000d89
 8000dac:	08000d89 	.word	0x08000d89
 8000db0:	08000d89 	.word	0x08000d89
 8000db4:	08000d89 	.word	0x08000d89
 8000db8:	08000e0d 	.word	0x08000e0d
 8000dbc:	08000d89 	.word	0x08000d89
 8000dc0:	08000d89 	.word	0x08000d89
 8000dc4:	08000d89 	.word	0x08000d89
 8000dc8:	08000d89 	.word	0x08000d89
 8000dcc:	08000f0d 	.word	0x08000f0d
 8000dd0:	08000e37 	.word	0x08000e37
 8000dd4:	08000ec7 	.word	0x08000ec7
 8000dd8:	08000d89 	.word	0x08000d89
 8000ddc:	08000d89 	.word	0x08000d89
 8000de0:	08000f2f 	.word	0x08000f2f
 8000de4:	08000d89 	.word	0x08000d89
 8000de8:	08000e37 	.word	0x08000e37
 8000dec:	08000d89 	.word	0x08000d89
 8000df0:	08000d89 	.word	0x08000d89
 8000df4:	08000ecf 	.word	0x08000ecf
 8000df8:	6833      	ldr	r3, [r6, #0]
 8000dfa:	1d1a      	adds	r2, r3, #4
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	6032      	str	r2, [r6, #0]
 8000e00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e09d      	b.n	8000f48 <_printf_i+0x1e8>
 8000e0c:	6833      	ldr	r3, [r6, #0]
 8000e0e:	6820      	ldr	r0, [r4, #0]
 8000e10:	1d19      	adds	r1, r3, #4
 8000e12:	6031      	str	r1, [r6, #0]
 8000e14:	0606      	lsls	r6, r0, #24
 8000e16:	d501      	bpl.n	8000e1c <_printf_i+0xbc>
 8000e18:	681d      	ldr	r5, [r3, #0]
 8000e1a:	e003      	b.n	8000e24 <_printf_i+0xc4>
 8000e1c:	0645      	lsls	r5, r0, #25
 8000e1e:	d5fb      	bpl.n	8000e18 <_printf_i+0xb8>
 8000e20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	da03      	bge.n	8000e30 <_printf_i+0xd0>
 8000e28:	232d      	movs	r3, #45	@ 0x2d
 8000e2a:	426d      	negs	r5, r5
 8000e2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e30:	4859      	ldr	r0, [pc, #356]	@ (8000f98 <_printf_i+0x238>)
 8000e32:	230a      	movs	r3, #10
 8000e34:	e011      	b.n	8000e5a <_printf_i+0xfa>
 8000e36:	6821      	ldr	r1, [r4, #0]
 8000e38:	6833      	ldr	r3, [r6, #0]
 8000e3a:	0608      	lsls	r0, r1, #24
 8000e3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e40:	d402      	bmi.n	8000e48 <_printf_i+0xe8>
 8000e42:	0649      	lsls	r1, r1, #25
 8000e44:	bf48      	it	mi
 8000e46:	b2ad      	uxthmi	r5, r5
 8000e48:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e4a:	4853      	ldr	r0, [pc, #332]	@ (8000f98 <_printf_i+0x238>)
 8000e4c:	6033      	str	r3, [r6, #0]
 8000e4e:	bf14      	ite	ne
 8000e50:	230a      	movne	r3, #10
 8000e52:	2308      	moveq	r3, #8
 8000e54:	2100      	movs	r1, #0
 8000e56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e5a:	6866      	ldr	r6, [r4, #4]
 8000e5c:	60a6      	str	r6, [r4, #8]
 8000e5e:	2e00      	cmp	r6, #0
 8000e60:	bfa2      	ittt	ge
 8000e62:	6821      	ldrge	r1, [r4, #0]
 8000e64:	f021 0104 	bicge.w	r1, r1, #4
 8000e68:	6021      	strge	r1, [r4, #0]
 8000e6a:	b90d      	cbnz	r5, 8000e70 <_printf_i+0x110>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d04b      	beq.n	8000f08 <_printf_i+0x1a8>
 8000e70:	4616      	mov	r6, r2
 8000e72:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e76:	fb03 5711 	mls	r7, r3, r1, r5
 8000e7a:	5dc7      	ldrb	r7, [r0, r7]
 8000e7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e80:	462f      	mov	r7, r5
 8000e82:	42bb      	cmp	r3, r7
 8000e84:	460d      	mov	r5, r1
 8000e86:	d9f4      	bls.n	8000e72 <_printf_i+0x112>
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	d10b      	bne.n	8000ea4 <_printf_i+0x144>
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	07df      	lsls	r7, r3, #31
 8000e90:	d508      	bpl.n	8000ea4 <_printf_i+0x144>
 8000e92:	6923      	ldr	r3, [r4, #16]
 8000e94:	6861      	ldr	r1, [r4, #4]
 8000e96:	4299      	cmp	r1, r3
 8000e98:	bfde      	ittt	le
 8000e9a:	2330      	movle	r3, #48	@ 0x30
 8000e9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000ea0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ea4:	1b92      	subs	r2, r2, r6
 8000ea6:	6122      	str	r2, [r4, #16]
 8000ea8:	f8cd a000 	str.w	sl, [sp]
 8000eac:	464b      	mov	r3, r9
 8000eae:	aa03      	add	r2, sp, #12
 8000eb0:	4621      	mov	r1, r4
 8000eb2:	4640      	mov	r0, r8
 8000eb4:	f7ff fee6 	bl	8000c84 <_printf_common>
 8000eb8:	3001      	adds	r0, #1
 8000eba:	d14a      	bne.n	8000f52 <_printf_i+0x1f2>
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	b004      	add	sp, #16
 8000ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec6:	6823      	ldr	r3, [r4, #0]
 8000ec8:	f043 0320 	orr.w	r3, r3, #32
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	4833      	ldr	r0, [pc, #204]	@ (8000f9c <_printf_i+0x23c>)
 8000ed0:	2778      	movs	r7, #120	@ 0x78
 8000ed2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	6831      	ldr	r1, [r6, #0]
 8000eda:	061f      	lsls	r7, r3, #24
 8000edc:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ee0:	d402      	bmi.n	8000ee8 <_printf_i+0x188>
 8000ee2:	065f      	lsls	r7, r3, #25
 8000ee4:	bf48      	it	mi
 8000ee6:	b2ad      	uxthmi	r5, r5
 8000ee8:	6031      	str	r1, [r6, #0]
 8000eea:	07d9      	lsls	r1, r3, #31
 8000eec:	bf44      	itt	mi
 8000eee:	f043 0320 	orrmi.w	r3, r3, #32
 8000ef2:	6023      	strmi	r3, [r4, #0]
 8000ef4:	b11d      	cbz	r5, 8000efe <_printf_i+0x19e>
 8000ef6:	2310      	movs	r3, #16
 8000ef8:	e7ac      	b.n	8000e54 <_printf_i+0xf4>
 8000efa:	4827      	ldr	r0, [pc, #156]	@ (8000f98 <_printf_i+0x238>)
 8000efc:	e7e9      	b.n	8000ed2 <_printf_i+0x172>
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	f023 0320 	bic.w	r3, r3, #32
 8000f04:	6023      	str	r3, [r4, #0]
 8000f06:	e7f6      	b.n	8000ef6 <_printf_i+0x196>
 8000f08:	4616      	mov	r6, r2
 8000f0a:	e7bd      	b.n	8000e88 <_printf_i+0x128>
 8000f0c:	6833      	ldr	r3, [r6, #0]
 8000f0e:	6825      	ldr	r5, [r4, #0]
 8000f10:	6961      	ldr	r1, [r4, #20]
 8000f12:	1d18      	adds	r0, r3, #4
 8000f14:	6030      	str	r0, [r6, #0]
 8000f16:	062e      	lsls	r6, r5, #24
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	d501      	bpl.n	8000f20 <_printf_i+0x1c0>
 8000f1c:	6019      	str	r1, [r3, #0]
 8000f1e:	e002      	b.n	8000f26 <_printf_i+0x1c6>
 8000f20:	0668      	lsls	r0, r5, #25
 8000f22:	d5fb      	bpl.n	8000f1c <_printf_i+0x1bc>
 8000f24:	8019      	strh	r1, [r3, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	6123      	str	r3, [r4, #16]
 8000f2a:	4616      	mov	r6, r2
 8000f2c:	e7bc      	b.n	8000ea8 <_printf_i+0x148>
 8000f2e:	6833      	ldr	r3, [r6, #0]
 8000f30:	1d1a      	adds	r2, r3, #4
 8000f32:	6032      	str	r2, [r6, #0]
 8000f34:	681e      	ldr	r6, [r3, #0]
 8000f36:	6862      	ldr	r2, [r4, #4]
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	f7ff f950 	bl	80001e0 <memchr>
 8000f40:	b108      	cbz	r0, 8000f46 <_printf_i+0x1e6>
 8000f42:	1b80      	subs	r0, r0, r6
 8000f44:	6060      	str	r0, [r4, #4]
 8000f46:	6863      	ldr	r3, [r4, #4]
 8000f48:	6123      	str	r3, [r4, #16]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f50:	e7aa      	b.n	8000ea8 <_printf_i+0x148>
 8000f52:	6923      	ldr	r3, [r4, #16]
 8000f54:	4632      	mov	r2, r6
 8000f56:	4649      	mov	r1, r9
 8000f58:	4640      	mov	r0, r8
 8000f5a:	47d0      	blx	sl
 8000f5c:	3001      	adds	r0, #1
 8000f5e:	d0ad      	beq.n	8000ebc <_printf_i+0x15c>
 8000f60:	6823      	ldr	r3, [r4, #0]
 8000f62:	079b      	lsls	r3, r3, #30
 8000f64:	d413      	bmi.n	8000f8e <_printf_i+0x22e>
 8000f66:	68e0      	ldr	r0, [r4, #12]
 8000f68:	9b03      	ldr	r3, [sp, #12]
 8000f6a:	4298      	cmp	r0, r3
 8000f6c:	bfb8      	it	lt
 8000f6e:	4618      	movlt	r0, r3
 8000f70:	e7a6      	b.n	8000ec0 <_printf_i+0x160>
 8000f72:	2301      	movs	r3, #1
 8000f74:	4632      	mov	r2, r6
 8000f76:	4649      	mov	r1, r9
 8000f78:	4640      	mov	r0, r8
 8000f7a:	47d0      	blx	sl
 8000f7c:	3001      	adds	r0, #1
 8000f7e:	d09d      	beq.n	8000ebc <_printf_i+0x15c>
 8000f80:	3501      	adds	r5, #1
 8000f82:	68e3      	ldr	r3, [r4, #12]
 8000f84:	9903      	ldr	r1, [sp, #12]
 8000f86:	1a5b      	subs	r3, r3, r1
 8000f88:	42ab      	cmp	r3, r5
 8000f8a:	dcf2      	bgt.n	8000f72 <_printf_i+0x212>
 8000f8c:	e7eb      	b.n	8000f66 <_printf_i+0x206>
 8000f8e:	2500      	movs	r5, #0
 8000f90:	f104 0619 	add.w	r6, r4, #25
 8000f94:	e7f5      	b.n	8000f82 <_printf_i+0x222>
 8000f96:	bf00      	nop
 8000f98:	0800115a 	.word	0x0800115a
 8000f9c:	0800116b 	.word	0x0800116b

08000fa0 <memmove>:
 8000fa0:	4288      	cmp	r0, r1
 8000fa2:	b510      	push	{r4, lr}
 8000fa4:	eb01 0402 	add.w	r4, r1, r2
 8000fa8:	d902      	bls.n	8000fb0 <memmove+0x10>
 8000faa:	4284      	cmp	r4, r0
 8000fac:	4623      	mov	r3, r4
 8000fae:	d807      	bhi.n	8000fc0 <memmove+0x20>
 8000fb0:	1e43      	subs	r3, r0, #1
 8000fb2:	42a1      	cmp	r1, r4
 8000fb4:	d008      	beq.n	8000fc8 <memmove+0x28>
 8000fb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fbe:	e7f8      	b.n	8000fb2 <memmove+0x12>
 8000fc0:	4402      	add	r2, r0
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	428a      	cmp	r2, r1
 8000fc6:	d100      	bne.n	8000fca <memmove+0x2a>
 8000fc8:	bd10      	pop	{r4, pc}
 8000fca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fd2:	e7f7      	b.n	8000fc4 <memmove+0x24>

08000fd4 <_sbrk_r>:
 8000fd4:	b538      	push	{r3, r4, r5, lr}
 8000fd6:	4d06      	ldr	r5, [pc, #24]	@ (8000ff0 <_sbrk_r+0x1c>)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	4604      	mov	r4, r0
 8000fdc:	4608      	mov	r0, r1
 8000fde:	602b      	str	r3, [r5, #0]
 8000fe0:	f000 f84c 	bl	800107c <_sbrk>
 8000fe4:	1c43      	adds	r3, r0, #1
 8000fe6:	d102      	bne.n	8000fee <_sbrk_r+0x1a>
 8000fe8:	682b      	ldr	r3, [r5, #0]
 8000fea:	b103      	cbz	r3, 8000fee <_sbrk_r+0x1a>
 8000fec:	6023      	str	r3, [r4, #0]
 8000fee:	bd38      	pop	{r3, r4, r5, pc}
 8000ff0:	20000230 	.word	0x20000230

08000ff4 <memcpy>:
 8000ff4:	440a      	add	r2, r1
 8000ff6:	4291      	cmp	r1, r2
 8000ff8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ffc:	d100      	bne.n	8001000 <memcpy+0xc>
 8000ffe:	4770      	bx	lr
 8001000:	b510      	push	{r4, lr}
 8001002:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800100a:	4291      	cmp	r1, r2
 800100c:	d1f9      	bne.n	8001002 <memcpy+0xe>
 800100e:	bd10      	pop	{r4, pc}

08001010 <_realloc_r>:
 8001010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001014:	4680      	mov	r8, r0
 8001016:	4615      	mov	r5, r2
 8001018:	460c      	mov	r4, r1
 800101a:	b921      	cbnz	r1, 8001026 <_realloc_r+0x16>
 800101c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001020:	4611      	mov	r1, r2
 8001022:	f7ff bc4b 	b.w	80008bc <_malloc_r>
 8001026:	b92a      	cbnz	r2, 8001034 <_realloc_r+0x24>
 8001028:	f7ff fbdc 	bl	80007e4 <_free_r>
 800102c:	2400      	movs	r4, #0
 800102e:	4620      	mov	r0, r4
 8001030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001034:	f000 f81a 	bl	800106c <_malloc_usable_size_r>
 8001038:	4285      	cmp	r5, r0
 800103a:	4606      	mov	r6, r0
 800103c:	d802      	bhi.n	8001044 <_realloc_r+0x34>
 800103e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001042:	d8f4      	bhi.n	800102e <_realloc_r+0x1e>
 8001044:	4629      	mov	r1, r5
 8001046:	4640      	mov	r0, r8
 8001048:	f7ff fc38 	bl	80008bc <_malloc_r>
 800104c:	4607      	mov	r7, r0
 800104e:	2800      	cmp	r0, #0
 8001050:	d0ec      	beq.n	800102c <_realloc_r+0x1c>
 8001052:	42b5      	cmp	r5, r6
 8001054:	462a      	mov	r2, r5
 8001056:	4621      	mov	r1, r4
 8001058:	bf28      	it	cs
 800105a:	4632      	movcs	r2, r6
 800105c:	f7ff ffca 	bl	8000ff4 <memcpy>
 8001060:	4621      	mov	r1, r4
 8001062:	4640      	mov	r0, r8
 8001064:	f7ff fbbe 	bl	80007e4 <_free_r>
 8001068:	463c      	mov	r4, r7
 800106a:	e7e0      	b.n	800102e <_realloc_r+0x1e>

0800106c <_malloc_usable_size_r>:
 800106c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001070:	1f18      	subs	r0, r3, #4
 8001072:	2b00      	cmp	r3, #0
 8001074:	bfbc      	itt	lt
 8001076:	580b      	ldrlt	r3, [r1, r0]
 8001078:	18c0      	addlt	r0, r0, r3
 800107a:	4770      	bx	lr

0800107c <_sbrk>:
 800107c:	4a04      	ldr	r2, [pc, #16]	@ (8001090 <_sbrk+0x14>)
 800107e:	6811      	ldr	r1, [r2, #0]
 8001080:	4603      	mov	r3, r0
 8001082:	b909      	cbnz	r1, 8001088 <_sbrk+0xc>
 8001084:	4903      	ldr	r1, [pc, #12]	@ (8001094 <_sbrk+0x18>)
 8001086:	6011      	str	r1, [r2, #0]
 8001088:	6810      	ldr	r0, [r2, #0]
 800108a:	4403      	add	r3, r0
 800108c:	6013      	str	r3, [r2, #0]
 800108e:	4770      	bx	lr
 8001090:	20000240 	.word	0x20000240
 8001094:	20000248 	.word	0x20000248

08001098 <_init>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	bf00      	nop
 800109c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109e:	bc08      	pop	{r3}
 80010a0:	469e      	mov	lr, r3
 80010a2:	4770      	bx	lr

080010a4 <_fini>:
 80010a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a6:	bf00      	nop
 80010a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010aa:	bc08      	pop	{r3}
 80010ac:	469e      	mov	lr, r3
 80010ae:	4770      	bx	lr

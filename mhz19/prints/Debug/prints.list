
prints.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080010ac  080010ac  000020ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001178  08001178  00003050  2**0
                  CONTENTS
  4 .ARM          00000008  08001178  08001178  00002178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001180  08001180  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001180  08001180  00002180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001184  08001184  00002184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  08001188  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000050  080011d8  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000244  080011d8  00003244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019e3  00000000  00000000  00003080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007a7  00000000  00000000  00004a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000158  00000000  00000000  00005210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f1  00000000  00000000  00005368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018926  00000000  00000000  00005459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002362  00000000  00000000  0001dd7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869be  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008d0  00000000  00000000  000a6ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000a73b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000050 	.word	0x20000050
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001094 	.word	0x08001094

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000054 	.word	0x20000054
 80001dc:	08001094 	.word	0x08001094

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include <stdio.h>
#include <stdarg.h>
#include <string.h>

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
    // Initialize the sensor USART, PC USART, and Timer2.
    MHZ19_USART1_init();
 8000284:	f000 f8b0 	bl	80003e8 <MHZ19_USART1_init>
    USART2_init();
 8000288:	f000 f9ec 	bl	8000664 <USART2_init>
    TIMER2_init();
 800028c:	f000 f996 	bl	80005bc <TIMER2_init>

    print("MH-Z19 Timer-based Sensor Demo\r\n");
 8000290:	4805      	ldr	r0, [pc, #20]	@ (80002a8 <main+0x28>)
 8000292:	f000 f9cf 	bl	8000634 <print>

    while (1)
    {
        // When Timer2 expires (every 1 second), process the sensor.
        if (TIMER2_expired())
 8000296:	f000 f97d 	bl	8000594 <TIMER2_expired>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d0fa      	beq.n	8000296 <main+0x16>
        {
            MHZ19_process();
 80002a0:	f000 f842 	bl	8000328 <MHZ19_process>
        if (TIMER2_expired())
 80002a4:	e7f7      	b.n	8000296 <main+0x16>
 80002a6:	bf00      	nop
 80002a8:	080010ac 	.word	0x080010ac

080002ac <MHZ19_checksum>:
{
    0xFF, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79
};

uint8_t MHZ19_checksum(const uint8_t *packet)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b085      	sub	sp, #20
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
    uint8_t sum = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < 8; i++)
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	e009      	b.n	80002d2 <MHZ19_checksum+0x26>
    {
        sum += packet[i];
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	687a      	ldr	r2, [r7, #4]
 80002c2:	4413      	add	r3, r2
 80002c4:	781a      	ldrb	r2, [r3, #0]
 80002c6:	7bfb      	ldrb	r3, [r7, #15]
 80002c8:	4413      	add	r3, r2
 80002ca:	73fb      	strb	r3, [r7, #15]
    for (int i = 1; i < 8; i++)
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	3301      	adds	r3, #1
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
 80002d4:	2b07      	cmp	r3, #7
 80002d6:	ddf2      	ble.n	80002be <MHZ19_checksum+0x12>
    }
    sum = 0xFF - sum;
 80002d8:	7bfb      	ldrb	r3, [r7, #15]
 80002da:	43db      	mvns	r3, r3
 80002dc:	73fb      	strb	r3, [r7, #15]
    sum += 1;
 80002de:	7bfb      	ldrb	r3, [r7, #15]
 80002e0:	3301      	adds	r3, #1
 80002e2:	73fb      	strb	r3, [r7, #15]
    return sum;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3714      	adds	r7, #20
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <MHZ19_sendReadCommand>:

void MHZ19_sendReadCommand(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 80002fa:	2300      	movs	r3, #0
 80002fc:	607b      	str	r3, [r7, #4]
 80002fe:	e009      	b.n	8000314 <MHZ19_sendReadCommand+0x20>
    {
        MHZ19_USART1_printCharacter(MHZ19_Read_Cmd[i]);
 8000300:	4a08      	ldr	r2, [pc, #32]	@ (8000324 <MHZ19_sendReadCommand+0x30>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4413      	add	r3, r2
 8000306:	781b      	ldrb	r3, [r3, #0]
 8000308:	4618      	mov	r0, r3
 800030a:	f000 f89b 	bl	8000444 <MHZ19_USART1_printCharacter>
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3301      	adds	r3, #1
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	2b08      	cmp	r3, #8
 8000318:	ddf2      	ble.n	8000300 <MHZ19_sendReadCommand+0xc>
    }
}
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	0800113c 	.word	0x0800113c

08000328 <MHZ19_process>:

void MHZ19_process(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
    // Send the read command.
    MHZ19_sendReadCommand();
 800032e:	f7ff ffe1 	bl	80002f4 <MHZ19_sendReadCommand>

    // In this design, the sensor response is received via USART1 interrupt.
    while(!MHZ19_USART1_dataAvailable()){}
 8000332:	bf00      	nop
 8000334:	f000 f8a0 	bl	8000478 <MHZ19_USART1_dataAvailable>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0fa      	beq.n	8000334 <MHZ19_process+0xc>

	uint8_t response[MHZ19_FRAME_LENGTH];
	MHZ19_USART1_getData(response);
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4618      	mov	r0, r3
 8000342:	f000 f8a5 	bl	8000490 <MHZ19_USART1_getData>

	// Check header bytes.
	if (response[0] == 0xFF && response[1] == 0x86)
 8000346:	793b      	ldrb	r3, [r7, #4]
 8000348:	2bff      	cmp	r3, #255	@ 0xff
 800034a:	d11d      	bne.n	8000388 <MHZ19_process+0x60>
 800034c:	797b      	ldrb	r3, [r7, #5]
 800034e:	2b86      	cmp	r3, #134	@ 0x86
 8000350:	d11a      	bne.n	8000388 <MHZ19_process+0x60>
	{
		uint8_t cs = MHZ19_checksum(response);
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ffa9 	bl	80002ac <MHZ19_checksum>
 800035a:	4603      	mov	r3, r0
 800035c:	75fb      	strb	r3, [r7, #23]
		if (cs == response[8])
 800035e:	7b3b      	ldrb	r3, [r7, #12]
 8000360:	7dfa      	ldrb	r2, [r7, #23]
 8000362:	429a      	cmp	r2, r3
 8000364:	d109      	bne.n	800037a <MHZ19_process+0x52>
		{
			int ppm = ((int)response[2] << 8) | response[3];
 8000366:	79bb      	ldrb	r3, [r7, #6]
 8000368:	021b      	lsls	r3, r3, #8
 800036a:	79fa      	ldrb	r2, [r7, #7]
 800036c:	4313      	orrs	r3, r2
 800036e:	613b      	str	r3, [r7, #16]
			print("CO2 = %d ppm\r\n", ppm);
 8000370:	6939      	ldr	r1, [r7, #16]
 8000372:	480b      	ldr	r0, [pc, #44]	@ (80003a0 <MHZ19_process+0x78>)
 8000374:	f000 f95e 	bl	8000634 <print>
	{
 8000378:	e00e      	b.n	8000398 <MHZ19_process+0x70>
		}
		else
		{
			print("Checksum error: expected 0x%02X, got 0x%02X\r\n", cs, response[8]);
 800037a:	7dfb      	ldrb	r3, [r7, #23]
 800037c:	7b3a      	ldrb	r2, [r7, #12]
 800037e:	4619      	mov	r1, r3
 8000380:	4808      	ldr	r0, [pc, #32]	@ (80003a4 <MHZ19_process+0x7c>)
 8000382:	f000 f957 	bl	8000634 <print>
	{
 8000386:	e007      	b.n	8000398 <MHZ19_process+0x70>
		}
	}
	else
	{
		print("Invalid sensor response: 0x%02X, 0x%02X\r\n", response[0], response[1]);
 8000388:	793b      	ldrb	r3, [r7, #4]
 800038a:	4619      	mov	r1, r3
 800038c:	797b      	ldrb	r3, [r7, #5]
 800038e:	461a      	mov	r2, r3
 8000390:	4805      	ldr	r0, [pc, #20]	@ (80003a8 <MHZ19_process+0x80>)
 8000392:	f000 f94f 	bl	8000634 <print>
	}

}
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	3718      	adds	r7, #24
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	080010d0 	.word	0x080010d0
 80003a4:	080010e0 	.word	0x080010e0
 80003a8:	08001110 	.word	0x08001110

080003ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	db0b      	blt.n	80003d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	f003 021f 	and.w	r2, r3, #31
 80003c4:	4907      	ldr	r1, [pc, #28]	@ (80003e4 <__NVIC_EnableIRQ+0x38>)
 80003c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ca:	095b      	lsrs	r3, r3, #5
 80003cc:	2001      	movs	r0, #1
 80003ce:	fa00 f202 	lsl.w	r2, r0, r2
 80003d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000e100 	.word	0xe000e100

080003e8 <MHZ19_USART1_init>:
static volatile uint8_t g_rxBuffer[MHZ19_FRAME_LENGTH];
static volatile uint8_t g_rxIndex = 0;
static volatile BOOL    g_dataReady = FALSE;

void MHZ19_USART1_init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	af00      	add	r7, sp, #0
    // Enable GPIOA clock.
    RCC->AHBENR |= 0x00020000;
 80003ec:	4b13      	ldr	r3, [pc, #76]	@ (800043c <MHZ19_USART1_init+0x54>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a12      	ldr	r2, [pc, #72]	@ (800043c <MHZ19_USART1_init+0x54>)
 80003f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003f6:	6153      	str	r3, [r2, #20]
    // Enable USART1 clock on APB2.
    RCC->APB2ENR |= 0x00004000;
 80003f8:	4b10      	ldr	r3, [pc, #64]	@ (800043c <MHZ19_USART1_init+0x54>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	4a0f      	ldr	r2, [pc, #60]	@ (800043c <MHZ19_USART1_init+0x54>)
 80003fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000402:	6193      	str	r3, [r2, #24]
    // Configure PA9 (TX) and PA10 (RX) as alternate function mode.
    GPIOA->MODER |= 0x00280000;
 8000404:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800040e:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 8000412:	6013      	str	r3, [r2, #0]
    // Set alternate function AF7 for PA9 and PA10.
    GPIOA->AFR[1] |= 0x00000770;
 8000414:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800041a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800041e:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 8000422:	6253      	str	r3, [r2, #36]	@ 0x24
    // Set baud rate to 9600 @ 8 MHz (833 decimal).
    USART1->BRR = 833;
 8000424:	4b06      	ldr	r3, [pc, #24]	@ (8000440 <MHZ19_USART1_init+0x58>)
 8000426:	f240 3241 	movw	r2, #833	@ 0x341
 800042a:	60da      	str	r2, [r3, #12]
    // Enable USART1, RX, TX, and RX interrupt.
    USART1->CR1 = 0x2D;
 800042c:	4b04      	ldr	r3, [pc, #16]	@ (8000440 <MHZ19_USART1_init+0x58>)
 800042e:	222d      	movs	r2, #45	@ 0x2d
 8000430:	601a      	str	r2, [r3, #0]
    // Enable USART1 IRQ in NVIC.
    NVIC_EnableIRQ(USART1_IRQn);
 8000432:	2025      	movs	r0, #37	@ 0x25
 8000434:	f7ff ffba 	bl	80003ac <__NVIC_EnableIRQ>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	40013800 	.word	0x40013800

08000444 <MHZ19_USART1_printCharacter>:

void MHZ19_USART1_printCharacter(char c)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
    USART1->TDR = (uint8_t)c;
 800044e:	4b09      	ldr	r3, [pc, #36]	@ (8000474 <MHZ19_USART1_printCharacter+0x30>)
 8000450:	79fa      	ldrb	r2, [r7, #7]
 8000452:	b292      	uxth	r2, r2
 8000454:	851a      	strh	r2, [r3, #40]	@ 0x28
    while (!(USART1->ISR & 0x80));  // Wait for TXE flag.
 8000456:	bf00      	nop
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <MHZ19_USART1_printCharacter+0x30>)
 800045a:	69db      	ldr	r3, [r3, #28]
 800045c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f9      	beq.n	8000458 <MHZ19_USART1_printCharacter+0x14>
}
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	40013800 	.word	0x40013800

08000478 <MHZ19_USART1_dataAvailable>:
        MHZ19_USART1_printCharacter(*p_data++);
    }
}

BOOL MHZ19_USART1_dataAvailable(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
    return g_dataReady;
 800047c:	4b03      	ldr	r3, [pc, #12]	@ (800048c <MHZ19_USART1_dataAvailable+0x14>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	b2db      	uxtb	r3, r3
}
 8000482:	4618      	mov	r0, r3
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr
 800048c:	20000076 	.word	0x20000076

08000490 <MHZ19_USART1_getData>:

void MHZ19_USART1_getData(uint8_t *dest)
{
 8000490:	b480      	push	{r7}
 8000492:	b085      	sub	sp, #20
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
 800049c:	e00b      	b.n	80004b6 <MHZ19_USART1_getData+0x26>
    {
        dest[i] = g_rxBuffer[i];
 800049e:	68fb      	ldr	r3, [r7, #12]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	490a      	ldr	r1, [pc, #40]	@ (80004d0 <MHZ19_USART1_getData+0x40>)
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	440a      	add	r2, r1
 80004aa:	7812      	ldrb	r2, [r2, #0]
 80004ac:	b2d2      	uxtb	r2, r2
 80004ae:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < MHZ19_FRAME_LENGTH; i++)
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	3301      	adds	r3, #1
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2b08      	cmp	r3, #8
 80004ba:	ddf0      	ble.n	800049e <MHZ19_USART1_getData+0xe>
    }
    g_dataReady = FALSE;
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <MHZ19_USART1_getData+0x44>)
 80004be:	2200      	movs	r2, #0
 80004c0:	701a      	strb	r2, [r3, #0]
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	2000006c 	.word	0x2000006c
 80004d4:	20000076 	.word	0x20000076

080004d8 <USART1_EXTI25_IRQHandler>:

// USART1 Interrupt Handler
// Make sure the IRQ handler name matches the startup file.
void USART1_EXTI25_IRQHandler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
    // Reading RDR clears the RXNE flag.
    uint8_t rx_byte = (uint8_t)(USART1->RDR & 0xFF);
 80004de:	4b10      	ldr	r3, [pc, #64]	@ (8000520 <USART1_EXTI25_IRQHandler+0x48>)
 80004e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004e2:	b29b      	uxth	r3, r3
 80004e4:	71fb      	strb	r3, [r7, #7]
    g_rxBuffer[g_rxIndex++] = rx_byte;
 80004e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000524 <USART1_EXTI25_IRQHandler+0x4c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	1c5a      	adds	r2, r3, #1
 80004ee:	b2d1      	uxtb	r1, r2
 80004f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000524 <USART1_EXTI25_IRQHandler+0x4c>)
 80004f2:	7011      	strb	r1, [r2, #0]
 80004f4:	4619      	mov	r1, r3
 80004f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000528 <USART1_EXTI25_IRQHandler+0x50>)
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	5453      	strb	r3, [r2, r1]
    if (g_rxIndex >= MHZ19_FRAME_LENGTH)
 80004fc:	4b09      	ldr	r3, [pc, #36]	@ (8000524 <USART1_EXTI25_IRQHandler+0x4c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	2b08      	cmp	r3, #8
 8000504:	d905      	bls.n	8000512 <USART1_EXTI25_IRQHandler+0x3a>
    {
        g_dataReady = TRUE;
 8000506:	4b09      	ldr	r3, [pc, #36]	@ (800052c <USART1_EXTI25_IRQHandler+0x54>)
 8000508:	2201      	movs	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
        g_rxIndex = 0;
 800050c:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <USART1_EXTI25_IRQHandler+0x4c>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
    }
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40013800 	.word	0x40013800
 8000524:	20000075 	.word	0x20000075
 8000528:	2000006c 	.word	0x2000006c
 800052c:	20000076 	.word	0x20000076

08000530 <__NVIC_EnableIRQ>:
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800053e:	2b00      	cmp	r3, #0
 8000540:	db0b      	blt.n	800055a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	f003 021f 	and.w	r2, r3, #31
 8000548:	4907      	ldr	r1, [pc, #28]	@ (8000568 <__NVIC_EnableIRQ+0x38>)
 800054a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800054e:	095b      	lsrs	r3, r3, #5
 8000550:	2001      	movs	r0, #1
 8000552:	fa00 f202 	lsl.w	r2, r0, r2
 8000556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	e000e100 	.word	0xe000e100

0800056c <TIM2_IRQHandler>:




void TIM2_IRQHandler(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	// Clean the interrupt flag.
    TIM2->SR &= ~0x00000001;
 8000570:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000574:	691b      	ldr	r3, [r3, #16]
 8000576:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800057a:	f023 0301 	bic.w	r3, r3, #1
 800057e:	6113      	str	r3, [r2, #16]
	// Raise the software flag.
	Expired = TRUE;
 8000580:	4b03      	ldr	r3, [pc, #12]	@ (8000590 <TIM2_IRQHandler+0x24>)
 8000582:	2201      	movs	r2, #1
 8000584:	701a      	strb	r2, [r3, #0]
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr
 8000590:	20000077 	.word	0x20000077

08000594 <TIMER2_expired>:




BOOL TIMER2_expired(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
	if(Expired)
 8000598:	4b07      	ldr	r3, [pc, #28]	@ (80005b8 <TIMER2_expired+0x24>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d004      	beq.n	80005aa <TIMER2_expired+0x16>
	{
		Expired = FALSE;
 80005a0:	4b05      	ldr	r3, [pc, #20]	@ (80005b8 <TIMER2_expired+0x24>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
		return TRUE;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e000      	b.n	80005ac <TIMER2_expired+0x18>
	}
	else
	{
		return FALSE;
 80005aa:	2300      	movs	r3, #0
	}
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	20000077 	.word	0x20000077

080005bc <TIMER2_init>:




void TIMER2_init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
    // Enable Timer 2 clock (p. 152 in the datasheet).
    RCC->APB1ENR |= 0x00000001;
 80005c0:	4b0b      	ldr	r3, [pc, #44]	@ (80005f0 <TIMER2_init+0x34>)
 80005c2:	69db      	ldr	r3, [r3, #28]
 80005c4:	4a0a      	ldr	r2, [pc, #40]	@ (80005f0 <TIMER2_init+0x34>)
 80005c6:	f043 0301 	orr.w	r3, r3, #1
 80005ca:	61d3      	str	r3, [r2, #28]
    // Set the frequency of Timer 2.
    // Assuming a clock source of 8 MHz (see pp. 127 and 133 in the datasheet),
    // this will set the timer to tick at a rate of 1 Hz.
    TIM2->ARR = 8000000;
 80005cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d0:	4a08      	ldr	r2, [pc, #32]	@ (80005f4 <TIMER2_init+0x38>)
 80005d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Enable the Timer 2 interrupt.
    TIM2->DIER = 0x00000001;
 80005d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005d8:	2201      	movs	r2, #1
 80005da:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 80005dc:	201c      	movs	r0, #28
 80005de:	f7ff ffa7 	bl	8000530 <__NVIC_EnableIRQ>
    // Enable Timer 2.
    TIM2->CR1 = 0x00000001;
 80005e2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e6:	2201      	movs	r2, #1
 80005e8:	601a      	str	r2, [r3, #0]
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	007a1200 	.word	0x007a1200

080005f8 <__NVIC_EnableIRQ>:
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000606:	2b00      	cmp	r3, #0
 8000608:	db0b      	blt.n	8000622 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f003 021f 	and.w	r2, r3, #31
 8000610:	4907      	ldr	r1, [pc, #28]	@ (8000630 <__NVIC_EnableIRQ+0x38>)
 8000612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000616:	095b      	lsrs	r3, r3, #5
 8000618:	2001      	movs	r0, #1
 800061a:	fa00 f202 	lsl.w	r2, r0, r2
 800061e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	e000e100 	.word	0xe000e100

08000634 <print>:




void print(char *p_format, ...)
{
 8000634:	b40f      	push	{r0, r1, r2, r3}
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 800063c:	f107 0314 	add.w	r3, r7, #20
 8000640:	607b      	str	r3, [r7, #4]
	(void)vsprintf(A_Tx_Buffer, p_format, p_variables);
 8000642:	687a      	ldr	r2, [r7, #4]
 8000644:	6939      	ldr	r1, [r7, #16]
 8000646:	4806      	ldr	r0, [pc, #24]	@ (8000660 <print+0x2c>)
 8000648:	f000 f89a 	bl	8000780 <vsiprintf>
    USART2_print(A_Tx_Buffer);
 800064c:	4804      	ldr	r0, [pc, #16]	@ (8000660 <print+0x2c>)
 800064e:	f000 f837 	bl	80006c0 <USART2_print>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800065c:	b004      	add	sp, #16
 800065e:	4770      	bx	lr
 8000660:	20000078 	.word	0x20000078

08000664 <USART2_init>:




void USART2_init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet).
    RCC->AHBENR |= 0x00020000;
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <USART2_init+0x54>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a12      	ldr	r2, [pc, #72]	@ (80006b8 <USART2_init+0x54>)
 800066e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000672:	6153      	str	r3, [r2, #20]
    // Enable USART2 clock.
    RCC->APB1ENR |= 0x00020000;
 8000674:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <USART2_init+0x54>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	4a0f      	ldr	r2, [pc, #60]	@ (80006b8 <USART2_init+0x54>)
 800067a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800067e:	61d3      	str	r3, [r2, #28]
    // Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
    GPIOA->MODER |= 0x000000A0;
 8000680:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800068a:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800068e:	6013      	str	r3, [r2, #0]
    // AFR[0] is the same as AFRL in the reference manual (p. 241),
    // and AFR[1] is the same as AFRH in the reference manual (p. 242).
    GPIOA->AFR[0] |= 0x00007700;
 8000690:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800069a:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800069e:	6213      	str	r3, [r2, #32]
    USART2->BRR = 833;  // 8 MHz / 9600 baud rate.
 80006a0:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <USART2_init+0x58>)
 80006a2:	f240 3241 	movw	r2, #833	@ 0x341
 80006a6:	60da      	str	r2, [r3, #12]
    // Enable USART2 and its RX and TX functionality.
    // Also enable the RX interrupt.
    USART2->CR1 = 0x0000002D;
 80006a8:	4b04      	ldr	r3, [pc, #16]	@ (80006bc <USART2_init+0x58>)
 80006aa:	222d      	movs	r2, #45	@ 0x2d
 80006ac:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART2_IRQn);
 80006ae:	2026      	movs	r0, #38	@ 0x26
 80006b0:	f7ff ffa2 	bl	80005f8 <__NVIC_EnableIRQ>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	40021000 	.word	0x40021000
 80006bc:	40004400 	.word	0x40004400

080006c0 <USART2_print>:




void USART2_print(const char *p_data)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	while(*p_data != '\0')
 80006c8:	e00d      	b.n	80006e6 <USART2_print+0x26>
	{
		USART2->TDR = *p_data;
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <USART2_print+0x3c>)
 80006d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_data++;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3301      	adds	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));
 80006d8:	bf00      	nop
 80006da:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <USART2_print+0x3c>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d0f9      	beq.n	80006da <USART2_print+0x1a>
	while(*p_data != '\0')
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d1ed      	bne.n	80006ca <USART2_print+0xa>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40004400 	.word	0x40004400

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	@ (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000704:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	@ (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	@ (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	@ (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	@ (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	@ (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072e:	f000 f831 	bl	8000794 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fda5 	bl	8000280 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000744:	08001188 	.word	0x08001188
  ldr r2, =_sbss
 8000748:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 800074c:	20000244 	.word	0x20000244

08000750 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_2_IRQHandler>
	...

08000754 <_vsiprintf_r>:
 8000754:	b500      	push	{lr}
 8000756:	b09b      	sub	sp, #108	@ 0x6c
 8000758:	9100      	str	r1, [sp, #0]
 800075a:	9104      	str	r1, [sp, #16]
 800075c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000760:	9105      	str	r1, [sp, #20]
 8000762:	9102      	str	r1, [sp, #8]
 8000764:	4905      	ldr	r1, [pc, #20]	@ (800077c <_vsiprintf_r+0x28>)
 8000766:	9103      	str	r1, [sp, #12]
 8000768:	4669      	mov	r1, sp
 800076a:	f000 f98d 	bl	8000a88 <_svfiprintf_r>
 800076e:	9b00      	ldr	r3, [sp, #0]
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	b01b      	add	sp, #108	@ 0x6c
 8000776:	f85d fb04 	ldr.w	pc, [sp], #4
 800077a:	bf00      	nop
 800077c:	ffff0208 	.word	0xffff0208

08000780 <vsiprintf>:
 8000780:	4613      	mov	r3, r2
 8000782:	460a      	mov	r2, r1
 8000784:	4601      	mov	r1, r0
 8000786:	4802      	ldr	r0, [pc, #8]	@ (8000790 <vsiprintf+0x10>)
 8000788:	6800      	ldr	r0, [r0, #0]
 800078a:	f7ff bfe3 	b.w	8000754 <_vsiprintf_r>
 800078e:	bf00      	nop
 8000790:	20000000 	.word	0x20000000

08000794 <__libc_init_array>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	4d0d      	ldr	r5, [pc, #52]	@ (80007cc <__libc_init_array+0x38>)
 8000798:	4c0d      	ldr	r4, [pc, #52]	@ (80007d0 <__libc_init_array+0x3c>)
 800079a:	1b64      	subs	r4, r4, r5
 800079c:	10a4      	asrs	r4, r4, #2
 800079e:	2600      	movs	r6, #0
 80007a0:	42a6      	cmp	r6, r4
 80007a2:	d109      	bne.n	80007b8 <__libc_init_array+0x24>
 80007a4:	4d0b      	ldr	r5, [pc, #44]	@ (80007d4 <__libc_init_array+0x40>)
 80007a6:	4c0c      	ldr	r4, [pc, #48]	@ (80007d8 <__libc_init_array+0x44>)
 80007a8:	f000 fc74 	bl	8001094 <_init>
 80007ac:	1b64      	subs	r4, r4, r5
 80007ae:	10a4      	asrs	r4, r4, #2
 80007b0:	2600      	movs	r6, #0
 80007b2:	42a6      	cmp	r6, r4
 80007b4:	d105      	bne.n	80007c2 <__libc_init_array+0x2e>
 80007b6:	bd70      	pop	{r4, r5, r6, pc}
 80007b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80007bc:	4798      	blx	r3
 80007be:	3601      	adds	r6, #1
 80007c0:	e7ee      	b.n	80007a0 <__libc_init_array+0xc>
 80007c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c6:	4798      	blx	r3
 80007c8:	3601      	adds	r6, #1
 80007ca:	e7f2      	b.n	80007b2 <__libc_init_array+0x1e>
 80007cc:	08001180 	.word	0x08001180
 80007d0:	08001180 	.word	0x08001180
 80007d4:	08001180 	.word	0x08001180
 80007d8:	08001184 	.word	0x08001184

080007dc <__retarget_lock_acquire_recursive>:
 80007dc:	4770      	bx	lr

080007de <__retarget_lock_release_recursive>:
 80007de:	4770      	bx	lr

080007e0 <_free_r>:
 80007e0:	b538      	push	{r3, r4, r5, lr}
 80007e2:	4605      	mov	r5, r0
 80007e4:	2900      	cmp	r1, #0
 80007e6:	d041      	beq.n	800086c <_free_r+0x8c>
 80007e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007ec:	1f0c      	subs	r4, r1, #4
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	bfb8      	it	lt
 80007f2:	18e4      	addlt	r4, r4, r3
 80007f4:	f000 f8e0 	bl	80009b8 <__malloc_lock>
 80007f8:	4a1d      	ldr	r2, [pc, #116]	@ (8000870 <_free_r+0x90>)
 80007fa:	6813      	ldr	r3, [r2, #0]
 80007fc:	b933      	cbnz	r3, 800080c <_free_r+0x2c>
 80007fe:	6063      	str	r3, [r4, #4]
 8000800:	6014      	str	r4, [r2, #0]
 8000802:	4628      	mov	r0, r5
 8000804:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000808:	f000 b8dc 	b.w	80009c4 <__malloc_unlock>
 800080c:	42a3      	cmp	r3, r4
 800080e:	d908      	bls.n	8000822 <_free_r+0x42>
 8000810:	6820      	ldr	r0, [r4, #0]
 8000812:	1821      	adds	r1, r4, r0
 8000814:	428b      	cmp	r3, r1
 8000816:	bf01      	itttt	eq
 8000818:	6819      	ldreq	r1, [r3, #0]
 800081a:	685b      	ldreq	r3, [r3, #4]
 800081c:	1809      	addeq	r1, r1, r0
 800081e:	6021      	streq	r1, [r4, #0]
 8000820:	e7ed      	b.n	80007fe <_free_r+0x1e>
 8000822:	461a      	mov	r2, r3
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	b10b      	cbz	r3, 800082c <_free_r+0x4c>
 8000828:	42a3      	cmp	r3, r4
 800082a:	d9fa      	bls.n	8000822 <_free_r+0x42>
 800082c:	6811      	ldr	r1, [r2, #0]
 800082e:	1850      	adds	r0, r2, r1
 8000830:	42a0      	cmp	r0, r4
 8000832:	d10b      	bne.n	800084c <_free_r+0x6c>
 8000834:	6820      	ldr	r0, [r4, #0]
 8000836:	4401      	add	r1, r0
 8000838:	1850      	adds	r0, r2, r1
 800083a:	4283      	cmp	r3, r0
 800083c:	6011      	str	r1, [r2, #0]
 800083e:	d1e0      	bne.n	8000802 <_free_r+0x22>
 8000840:	6818      	ldr	r0, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	6053      	str	r3, [r2, #4]
 8000846:	4408      	add	r0, r1
 8000848:	6010      	str	r0, [r2, #0]
 800084a:	e7da      	b.n	8000802 <_free_r+0x22>
 800084c:	d902      	bls.n	8000854 <_free_r+0x74>
 800084e:	230c      	movs	r3, #12
 8000850:	602b      	str	r3, [r5, #0]
 8000852:	e7d6      	b.n	8000802 <_free_r+0x22>
 8000854:	6820      	ldr	r0, [r4, #0]
 8000856:	1821      	adds	r1, r4, r0
 8000858:	428b      	cmp	r3, r1
 800085a:	bf04      	itt	eq
 800085c:	6819      	ldreq	r1, [r3, #0]
 800085e:	685b      	ldreq	r3, [r3, #4]
 8000860:	6063      	str	r3, [r4, #4]
 8000862:	bf04      	itt	eq
 8000864:	1809      	addeq	r1, r1, r0
 8000866:	6021      	streq	r1, [r4, #0]
 8000868:	6054      	str	r4, [r2, #4]
 800086a:	e7ca      	b.n	8000802 <_free_r+0x22>
 800086c:	bd38      	pop	{r3, r4, r5, pc}
 800086e:	bf00      	nop
 8000870:	2000023c 	.word	0x2000023c

08000874 <sbrk_aligned>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	4e0f      	ldr	r6, [pc, #60]	@ (80008b4 <sbrk_aligned+0x40>)
 8000878:	460c      	mov	r4, r1
 800087a:	6831      	ldr	r1, [r6, #0]
 800087c:	4605      	mov	r5, r0
 800087e:	b911      	cbnz	r1, 8000886 <sbrk_aligned+0x12>
 8000880:	f000 fba6 	bl	8000fd0 <_sbrk_r>
 8000884:	6030      	str	r0, [r6, #0]
 8000886:	4621      	mov	r1, r4
 8000888:	4628      	mov	r0, r5
 800088a:	f000 fba1 	bl	8000fd0 <_sbrk_r>
 800088e:	1c43      	adds	r3, r0, #1
 8000890:	d103      	bne.n	800089a <sbrk_aligned+0x26>
 8000892:	f04f 34ff 	mov.w	r4, #4294967295
 8000896:	4620      	mov	r0, r4
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	1cc4      	adds	r4, r0, #3
 800089c:	f024 0403 	bic.w	r4, r4, #3
 80008a0:	42a0      	cmp	r0, r4
 80008a2:	d0f8      	beq.n	8000896 <sbrk_aligned+0x22>
 80008a4:	1a21      	subs	r1, r4, r0
 80008a6:	4628      	mov	r0, r5
 80008a8:	f000 fb92 	bl	8000fd0 <_sbrk_r>
 80008ac:	3001      	adds	r0, #1
 80008ae:	d1f2      	bne.n	8000896 <sbrk_aligned+0x22>
 80008b0:	e7ef      	b.n	8000892 <sbrk_aligned+0x1e>
 80008b2:	bf00      	nop
 80008b4:	20000238 	.word	0x20000238

080008b8 <_malloc_r>:
 80008b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80008bc:	1ccd      	adds	r5, r1, #3
 80008be:	f025 0503 	bic.w	r5, r5, #3
 80008c2:	3508      	adds	r5, #8
 80008c4:	2d0c      	cmp	r5, #12
 80008c6:	bf38      	it	cc
 80008c8:	250c      	movcc	r5, #12
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	4606      	mov	r6, r0
 80008ce:	db01      	blt.n	80008d4 <_malloc_r+0x1c>
 80008d0:	42a9      	cmp	r1, r5
 80008d2:	d904      	bls.n	80008de <_malloc_r+0x26>
 80008d4:	230c      	movs	r3, #12
 80008d6:	6033      	str	r3, [r6, #0]
 80008d8:	2000      	movs	r0, #0
 80008da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80009b4 <_malloc_r+0xfc>
 80008e2:	f000 f869 	bl	80009b8 <__malloc_lock>
 80008e6:	f8d8 3000 	ldr.w	r3, [r8]
 80008ea:	461c      	mov	r4, r3
 80008ec:	bb44      	cbnz	r4, 8000940 <_malloc_r+0x88>
 80008ee:	4629      	mov	r1, r5
 80008f0:	4630      	mov	r0, r6
 80008f2:	f7ff ffbf 	bl	8000874 <sbrk_aligned>
 80008f6:	1c43      	adds	r3, r0, #1
 80008f8:	4604      	mov	r4, r0
 80008fa:	d158      	bne.n	80009ae <_malloc_r+0xf6>
 80008fc:	f8d8 4000 	ldr.w	r4, [r8]
 8000900:	4627      	mov	r7, r4
 8000902:	2f00      	cmp	r7, #0
 8000904:	d143      	bne.n	800098e <_malloc_r+0xd6>
 8000906:	2c00      	cmp	r4, #0
 8000908:	d04b      	beq.n	80009a2 <_malloc_r+0xea>
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	4639      	mov	r1, r7
 800090e:	4630      	mov	r0, r6
 8000910:	eb04 0903 	add.w	r9, r4, r3
 8000914:	f000 fb5c 	bl	8000fd0 <_sbrk_r>
 8000918:	4581      	cmp	r9, r0
 800091a:	d142      	bne.n	80009a2 <_malloc_r+0xea>
 800091c:	6821      	ldr	r1, [r4, #0]
 800091e:	1a6d      	subs	r5, r5, r1
 8000920:	4629      	mov	r1, r5
 8000922:	4630      	mov	r0, r6
 8000924:	f7ff ffa6 	bl	8000874 <sbrk_aligned>
 8000928:	3001      	adds	r0, #1
 800092a:	d03a      	beq.n	80009a2 <_malloc_r+0xea>
 800092c:	6823      	ldr	r3, [r4, #0]
 800092e:	442b      	add	r3, r5
 8000930:	6023      	str	r3, [r4, #0]
 8000932:	f8d8 3000 	ldr.w	r3, [r8]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	bb62      	cbnz	r2, 8000994 <_malloc_r+0xdc>
 800093a:	f8c8 7000 	str.w	r7, [r8]
 800093e:	e00f      	b.n	8000960 <_malloc_r+0xa8>
 8000940:	6822      	ldr	r2, [r4, #0]
 8000942:	1b52      	subs	r2, r2, r5
 8000944:	d420      	bmi.n	8000988 <_malloc_r+0xd0>
 8000946:	2a0b      	cmp	r2, #11
 8000948:	d917      	bls.n	800097a <_malloc_r+0xc2>
 800094a:	1961      	adds	r1, r4, r5
 800094c:	42a3      	cmp	r3, r4
 800094e:	6025      	str	r5, [r4, #0]
 8000950:	bf18      	it	ne
 8000952:	6059      	strne	r1, [r3, #4]
 8000954:	6863      	ldr	r3, [r4, #4]
 8000956:	bf08      	it	eq
 8000958:	f8c8 1000 	streq.w	r1, [r8]
 800095c:	5162      	str	r2, [r4, r5]
 800095e:	604b      	str	r3, [r1, #4]
 8000960:	4630      	mov	r0, r6
 8000962:	f000 f82f 	bl	80009c4 <__malloc_unlock>
 8000966:	f104 000b 	add.w	r0, r4, #11
 800096a:	1d23      	adds	r3, r4, #4
 800096c:	f020 0007 	bic.w	r0, r0, #7
 8000970:	1ac2      	subs	r2, r0, r3
 8000972:	bf1c      	itt	ne
 8000974:	1a1b      	subne	r3, r3, r0
 8000976:	50a3      	strne	r3, [r4, r2]
 8000978:	e7af      	b.n	80008da <_malloc_r+0x22>
 800097a:	6862      	ldr	r2, [r4, #4]
 800097c:	42a3      	cmp	r3, r4
 800097e:	bf0c      	ite	eq
 8000980:	f8c8 2000 	streq.w	r2, [r8]
 8000984:	605a      	strne	r2, [r3, #4]
 8000986:	e7eb      	b.n	8000960 <_malloc_r+0xa8>
 8000988:	4623      	mov	r3, r4
 800098a:	6864      	ldr	r4, [r4, #4]
 800098c:	e7ae      	b.n	80008ec <_malloc_r+0x34>
 800098e:	463c      	mov	r4, r7
 8000990:	687f      	ldr	r7, [r7, #4]
 8000992:	e7b6      	b.n	8000902 <_malloc_r+0x4a>
 8000994:	461a      	mov	r2, r3
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	42a3      	cmp	r3, r4
 800099a:	d1fb      	bne.n	8000994 <_malloc_r+0xdc>
 800099c:	2300      	movs	r3, #0
 800099e:	6053      	str	r3, [r2, #4]
 80009a0:	e7de      	b.n	8000960 <_malloc_r+0xa8>
 80009a2:	230c      	movs	r3, #12
 80009a4:	6033      	str	r3, [r6, #0]
 80009a6:	4630      	mov	r0, r6
 80009a8:	f000 f80c 	bl	80009c4 <__malloc_unlock>
 80009ac:	e794      	b.n	80008d8 <_malloc_r+0x20>
 80009ae:	6005      	str	r5, [r0, #0]
 80009b0:	e7d6      	b.n	8000960 <_malloc_r+0xa8>
 80009b2:	bf00      	nop
 80009b4:	2000023c 	.word	0x2000023c

080009b8 <__malloc_lock>:
 80009b8:	4801      	ldr	r0, [pc, #4]	@ (80009c0 <__malloc_lock+0x8>)
 80009ba:	f7ff bf0f 	b.w	80007dc <__retarget_lock_acquire_recursive>
 80009be:	bf00      	nop
 80009c0:	20000234 	.word	0x20000234

080009c4 <__malloc_unlock>:
 80009c4:	4801      	ldr	r0, [pc, #4]	@ (80009cc <__malloc_unlock+0x8>)
 80009c6:	f7ff bf0a 	b.w	80007de <__retarget_lock_release_recursive>
 80009ca:	bf00      	nop
 80009cc:	20000234 	.word	0x20000234

080009d0 <__ssputs_r>:
 80009d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d4:	688e      	ldr	r6, [r1, #8]
 80009d6:	461f      	mov	r7, r3
 80009d8:	42be      	cmp	r6, r7
 80009da:	680b      	ldr	r3, [r1, #0]
 80009dc:	4682      	mov	sl, r0
 80009de:	460c      	mov	r4, r1
 80009e0:	4690      	mov	r8, r2
 80009e2:	d82d      	bhi.n	8000a40 <__ssputs_r+0x70>
 80009e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009e8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009ec:	d026      	beq.n	8000a3c <__ssputs_r+0x6c>
 80009ee:	6965      	ldr	r5, [r4, #20]
 80009f0:	6909      	ldr	r1, [r1, #16]
 80009f2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009f6:	eba3 0901 	sub.w	r9, r3, r1
 80009fa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009fe:	1c7b      	adds	r3, r7, #1
 8000a00:	444b      	add	r3, r9
 8000a02:	106d      	asrs	r5, r5, #1
 8000a04:	429d      	cmp	r5, r3
 8000a06:	bf38      	it	cc
 8000a08:	461d      	movcc	r5, r3
 8000a0a:	0553      	lsls	r3, r2, #21
 8000a0c:	d527      	bpl.n	8000a5e <__ssputs_r+0x8e>
 8000a0e:	4629      	mov	r1, r5
 8000a10:	f7ff ff52 	bl	80008b8 <_malloc_r>
 8000a14:	4606      	mov	r6, r0
 8000a16:	b360      	cbz	r0, 8000a72 <__ssputs_r+0xa2>
 8000a18:	6921      	ldr	r1, [r4, #16]
 8000a1a:	464a      	mov	r2, r9
 8000a1c:	f000 fae8 	bl	8000ff0 <memcpy>
 8000a20:	89a3      	ldrh	r3, [r4, #12]
 8000a22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a2a:	81a3      	strh	r3, [r4, #12]
 8000a2c:	6126      	str	r6, [r4, #16]
 8000a2e:	6165      	str	r5, [r4, #20]
 8000a30:	444e      	add	r6, r9
 8000a32:	eba5 0509 	sub.w	r5, r5, r9
 8000a36:	6026      	str	r6, [r4, #0]
 8000a38:	60a5      	str	r5, [r4, #8]
 8000a3a:	463e      	mov	r6, r7
 8000a3c:	42be      	cmp	r6, r7
 8000a3e:	d900      	bls.n	8000a42 <__ssputs_r+0x72>
 8000a40:	463e      	mov	r6, r7
 8000a42:	6820      	ldr	r0, [r4, #0]
 8000a44:	4632      	mov	r2, r6
 8000a46:	4641      	mov	r1, r8
 8000a48:	f000 faa8 	bl	8000f9c <memmove>
 8000a4c:	68a3      	ldr	r3, [r4, #8]
 8000a4e:	1b9b      	subs	r3, r3, r6
 8000a50:	60a3      	str	r3, [r4, #8]
 8000a52:	6823      	ldr	r3, [r4, #0]
 8000a54:	4433      	add	r3, r6
 8000a56:	6023      	str	r3, [r4, #0]
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a5e:	462a      	mov	r2, r5
 8000a60:	f000 fad4 	bl	800100c <_realloc_r>
 8000a64:	4606      	mov	r6, r0
 8000a66:	2800      	cmp	r0, #0
 8000a68:	d1e0      	bne.n	8000a2c <__ssputs_r+0x5c>
 8000a6a:	6921      	ldr	r1, [r4, #16]
 8000a6c:	4650      	mov	r0, sl
 8000a6e:	f7ff feb7 	bl	80007e0 <_free_r>
 8000a72:	230c      	movs	r3, #12
 8000a74:	f8ca 3000 	str.w	r3, [sl]
 8000a78:	89a3      	ldrh	r3, [r4, #12]
 8000a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a7e:	81a3      	strh	r3, [r4, #12]
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	e7e9      	b.n	8000a5a <__ssputs_r+0x8a>
	...

08000a88 <_svfiprintf_r>:
 8000a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a8c:	4698      	mov	r8, r3
 8000a8e:	898b      	ldrh	r3, [r1, #12]
 8000a90:	061b      	lsls	r3, r3, #24
 8000a92:	b09d      	sub	sp, #116	@ 0x74
 8000a94:	4607      	mov	r7, r0
 8000a96:	460d      	mov	r5, r1
 8000a98:	4614      	mov	r4, r2
 8000a9a:	d510      	bpl.n	8000abe <_svfiprintf_r+0x36>
 8000a9c:	690b      	ldr	r3, [r1, #16]
 8000a9e:	b973      	cbnz	r3, 8000abe <_svfiprintf_r+0x36>
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	f7ff ff09 	bl	80008b8 <_malloc_r>
 8000aa6:	6028      	str	r0, [r5, #0]
 8000aa8:	6128      	str	r0, [r5, #16]
 8000aaa:	b930      	cbnz	r0, 8000aba <_svfiprintf_r+0x32>
 8000aac:	230c      	movs	r3, #12
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab4:	b01d      	add	sp, #116	@ 0x74
 8000ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aba:	2340      	movs	r3, #64	@ 0x40
 8000abc:	616b      	str	r3, [r5, #20]
 8000abe:	2300      	movs	r3, #0
 8000ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000ac2:	2320      	movs	r3, #32
 8000ac4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000ac8:	f8cd 800c 	str.w	r8, [sp, #12]
 8000acc:	2330      	movs	r3, #48	@ 0x30
 8000ace:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c6c <_svfiprintf_r+0x1e4>
 8000ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000ad6:	f04f 0901 	mov.w	r9, #1
 8000ada:	4623      	mov	r3, r4
 8000adc:	469a      	mov	sl, r3
 8000ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ae2:	b10a      	cbz	r2, 8000ae8 <_svfiprintf_r+0x60>
 8000ae4:	2a25      	cmp	r2, #37	@ 0x25
 8000ae6:	d1f9      	bne.n	8000adc <_svfiprintf_r+0x54>
 8000ae8:	ebba 0b04 	subs.w	fp, sl, r4
 8000aec:	d00b      	beq.n	8000b06 <_svfiprintf_r+0x7e>
 8000aee:	465b      	mov	r3, fp
 8000af0:	4622      	mov	r2, r4
 8000af2:	4629      	mov	r1, r5
 8000af4:	4638      	mov	r0, r7
 8000af6:	f7ff ff6b 	bl	80009d0 <__ssputs_r>
 8000afa:	3001      	adds	r0, #1
 8000afc:	f000 80a7 	beq.w	8000c4e <_svfiprintf_r+0x1c6>
 8000b00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000b02:	445a      	add	r2, fp
 8000b04:	9209      	str	r2, [sp, #36]	@ 0x24
 8000b06:	f89a 3000 	ldrb.w	r3, [sl]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	f000 809f 	beq.w	8000c4e <_svfiprintf_r+0x1c6>
 8000b10:	2300      	movs	r3, #0
 8000b12:	f04f 32ff 	mov.w	r2, #4294967295
 8000b16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b1a:	f10a 0a01 	add.w	sl, sl, #1
 8000b1e:	9304      	str	r3, [sp, #16]
 8000b20:	9307      	str	r3, [sp, #28]
 8000b22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000b26:	931a      	str	r3, [sp, #104]	@ 0x68
 8000b28:	4654      	mov	r4, sl
 8000b2a:	2205      	movs	r2, #5
 8000b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b30:	484e      	ldr	r0, [pc, #312]	@ (8000c6c <_svfiprintf_r+0x1e4>)
 8000b32:	f7ff fb55 	bl	80001e0 <memchr>
 8000b36:	9a04      	ldr	r2, [sp, #16]
 8000b38:	b9d8      	cbnz	r0, 8000b72 <_svfiprintf_r+0xea>
 8000b3a:	06d0      	lsls	r0, r2, #27
 8000b3c:	bf44      	itt	mi
 8000b3e:	2320      	movmi	r3, #32
 8000b40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b44:	0711      	lsls	r1, r2, #28
 8000b46:	bf44      	itt	mi
 8000b48:	232b      	movmi	r3, #43	@ 0x2b
 8000b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b4e:	f89a 3000 	ldrb.w	r3, [sl]
 8000b52:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b54:	d015      	beq.n	8000b82 <_svfiprintf_r+0xfa>
 8000b56:	9a07      	ldr	r2, [sp, #28]
 8000b58:	4654      	mov	r4, sl
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	f04f 0c0a 	mov.w	ip, #10
 8000b60:	4621      	mov	r1, r4
 8000b62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b66:	3b30      	subs	r3, #48	@ 0x30
 8000b68:	2b09      	cmp	r3, #9
 8000b6a:	d94b      	bls.n	8000c04 <_svfiprintf_r+0x17c>
 8000b6c:	b1b0      	cbz	r0, 8000b9c <_svfiprintf_r+0x114>
 8000b6e:	9207      	str	r2, [sp, #28]
 8000b70:	e014      	b.n	8000b9c <_svfiprintf_r+0x114>
 8000b72:	eba0 0308 	sub.w	r3, r0, r8
 8000b76:	fa09 f303 	lsl.w	r3, r9, r3
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	9304      	str	r3, [sp, #16]
 8000b7e:	46a2      	mov	sl, r4
 8000b80:	e7d2      	b.n	8000b28 <_svfiprintf_r+0xa0>
 8000b82:	9b03      	ldr	r3, [sp, #12]
 8000b84:	1d19      	adds	r1, r3, #4
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	9103      	str	r1, [sp, #12]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	bfbb      	ittet	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	f042 0202 	orrlt.w	r2, r2, #2
 8000b94:	9307      	strge	r3, [sp, #28]
 8000b96:	9307      	strlt	r3, [sp, #28]
 8000b98:	bfb8      	it	lt
 8000b9a:	9204      	strlt	r2, [sp, #16]
 8000b9c:	7823      	ldrb	r3, [r4, #0]
 8000b9e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ba0:	d10a      	bne.n	8000bb8 <_svfiprintf_r+0x130>
 8000ba2:	7863      	ldrb	r3, [r4, #1]
 8000ba4:	2b2a      	cmp	r3, #42	@ 0x2a
 8000ba6:	d132      	bne.n	8000c0e <_svfiprintf_r+0x186>
 8000ba8:	9b03      	ldr	r3, [sp, #12]
 8000baa:	1d1a      	adds	r2, r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	9203      	str	r2, [sp, #12]
 8000bb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000bb4:	3402      	adds	r4, #2
 8000bb6:	9305      	str	r3, [sp, #20]
 8000bb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c7c <_svfiprintf_r+0x1f4>
 8000bbc:	7821      	ldrb	r1, [r4, #0]
 8000bbe:	2203      	movs	r2, #3
 8000bc0:	4650      	mov	r0, sl
 8000bc2:	f7ff fb0d 	bl	80001e0 <memchr>
 8000bc6:	b138      	cbz	r0, 8000bd8 <_svfiprintf_r+0x150>
 8000bc8:	9b04      	ldr	r3, [sp, #16]
 8000bca:	eba0 000a 	sub.w	r0, r0, sl
 8000bce:	2240      	movs	r2, #64	@ 0x40
 8000bd0:	4082      	lsls	r2, r0
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	3401      	adds	r4, #1
 8000bd6:	9304      	str	r3, [sp, #16]
 8000bd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000bdc:	4824      	ldr	r0, [pc, #144]	@ (8000c70 <_svfiprintf_r+0x1e8>)
 8000bde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000be2:	2206      	movs	r2, #6
 8000be4:	f7ff fafc 	bl	80001e0 <memchr>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d036      	beq.n	8000c5a <_svfiprintf_r+0x1d2>
 8000bec:	4b21      	ldr	r3, [pc, #132]	@ (8000c74 <_svfiprintf_r+0x1ec>)
 8000bee:	bb1b      	cbnz	r3, 8000c38 <_svfiprintf_r+0x1b0>
 8000bf0:	9b03      	ldr	r3, [sp, #12]
 8000bf2:	3307      	adds	r3, #7
 8000bf4:	f023 0307 	bic.w	r3, r3, #7
 8000bf8:	3308      	adds	r3, #8
 8000bfa:	9303      	str	r3, [sp, #12]
 8000bfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bfe:	4433      	add	r3, r6
 8000c00:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c02:	e76a      	b.n	8000ada <_svfiprintf_r+0x52>
 8000c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c08:	460c      	mov	r4, r1
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	e7a8      	b.n	8000b60 <_svfiprintf_r+0xd8>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	3401      	adds	r4, #1
 8000c12:	9305      	str	r3, [sp, #20]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f04f 0c0a 	mov.w	ip, #10
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c20:	3a30      	subs	r2, #48	@ 0x30
 8000c22:	2a09      	cmp	r2, #9
 8000c24:	d903      	bls.n	8000c2e <_svfiprintf_r+0x1a6>
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0c6      	beq.n	8000bb8 <_svfiprintf_r+0x130>
 8000c2a:	9105      	str	r1, [sp, #20]
 8000c2c:	e7c4      	b.n	8000bb8 <_svfiprintf_r+0x130>
 8000c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c32:	4604      	mov	r4, r0
 8000c34:	2301      	movs	r3, #1
 8000c36:	e7f0      	b.n	8000c1a <_svfiprintf_r+0x192>
 8000c38:	ab03      	add	r3, sp, #12
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	462a      	mov	r2, r5
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <_svfiprintf_r+0x1f0>)
 8000c40:	a904      	add	r1, sp, #16
 8000c42:	4638      	mov	r0, r7
 8000c44:	f3af 8000 	nop.w
 8000c48:	1c42      	adds	r2, r0, #1
 8000c4a:	4606      	mov	r6, r0
 8000c4c:	d1d6      	bne.n	8000bfc <_svfiprintf_r+0x174>
 8000c4e:	89ab      	ldrh	r3, [r5, #12]
 8000c50:	065b      	lsls	r3, r3, #25
 8000c52:	f53f af2d 	bmi.w	8000ab0 <_svfiprintf_r+0x28>
 8000c56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c58:	e72c      	b.n	8000ab4 <_svfiprintf_r+0x2c>
 8000c5a:	ab03      	add	r3, sp, #12
 8000c5c:	9300      	str	r3, [sp, #0]
 8000c5e:	462a      	mov	r2, r5
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <_svfiprintf_r+0x1f0>)
 8000c62:	a904      	add	r1, sp, #16
 8000c64:	4638      	mov	r0, r7
 8000c66:	f000 f879 	bl	8000d5c <_printf_i>
 8000c6a:	e7ed      	b.n	8000c48 <_svfiprintf_r+0x1c0>
 8000c6c:	08001145 	.word	0x08001145
 8000c70:	0800114f 	.word	0x0800114f
 8000c74:	00000000 	.word	0x00000000
 8000c78:	080009d1 	.word	0x080009d1
 8000c7c:	0800114b 	.word	0x0800114b

08000c80 <_printf_common>:
 8000c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c84:	4616      	mov	r6, r2
 8000c86:	4698      	mov	r8, r3
 8000c88:	688a      	ldr	r2, [r1, #8]
 8000c8a:	690b      	ldr	r3, [r1, #16]
 8000c8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c90:	4293      	cmp	r3, r2
 8000c92:	bfb8      	it	lt
 8000c94:	4613      	movlt	r3, r2
 8000c96:	6033      	str	r3, [r6, #0]
 8000c98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c9c:	4607      	mov	r7, r0
 8000c9e:	460c      	mov	r4, r1
 8000ca0:	b10a      	cbz	r2, 8000ca6 <_printf_common+0x26>
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	6033      	str	r3, [r6, #0]
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	0699      	lsls	r1, r3, #26
 8000caa:	bf42      	ittt	mi
 8000cac:	6833      	ldrmi	r3, [r6, #0]
 8000cae:	3302      	addmi	r3, #2
 8000cb0:	6033      	strmi	r3, [r6, #0]
 8000cb2:	6825      	ldr	r5, [r4, #0]
 8000cb4:	f015 0506 	ands.w	r5, r5, #6
 8000cb8:	d106      	bne.n	8000cc8 <_printf_common+0x48>
 8000cba:	f104 0a19 	add.w	sl, r4, #25
 8000cbe:	68e3      	ldr	r3, [r4, #12]
 8000cc0:	6832      	ldr	r2, [r6, #0]
 8000cc2:	1a9b      	subs	r3, r3, r2
 8000cc4:	42ab      	cmp	r3, r5
 8000cc6:	dc26      	bgt.n	8000d16 <_printf_common+0x96>
 8000cc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ccc:	6822      	ldr	r2, [r4, #0]
 8000cce:	3b00      	subs	r3, #0
 8000cd0:	bf18      	it	ne
 8000cd2:	2301      	movne	r3, #1
 8000cd4:	0692      	lsls	r2, r2, #26
 8000cd6:	d42b      	bmi.n	8000d30 <_printf_common+0xb0>
 8000cd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000cdc:	4641      	mov	r1, r8
 8000cde:	4638      	mov	r0, r7
 8000ce0:	47c8      	blx	r9
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	d01e      	beq.n	8000d24 <_printf_common+0xa4>
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	6922      	ldr	r2, [r4, #16]
 8000cea:	f003 0306 	and.w	r3, r3, #6
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf02      	ittt	eq
 8000cf2:	68e5      	ldreq	r5, [r4, #12]
 8000cf4:	6833      	ldreq	r3, [r6, #0]
 8000cf6:	1aed      	subeq	r5, r5, r3
 8000cf8:	68a3      	ldr	r3, [r4, #8]
 8000cfa:	bf0c      	ite	eq
 8000cfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d00:	2500      	movne	r5, #0
 8000d02:	4293      	cmp	r3, r2
 8000d04:	bfc4      	itt	gt
 8000d06:	1a9b      	subgt	r3, r3, r2
 8000d08:	18ed      	addgt	r5, r5, r3
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	341a      	adds	r4, #26
 8000d0e:	42b5      	cmp	r5, r6
 8000d10:	d11a      	bne.n	8000d48 <_printf_common+0xc8>
 8000d12:	2000      	movs	r0, #0
 8000d14:	e008      	b.n	8000d28 <_printf_common+0xa8>
 8000d16:	2301      	movs	r3, #1
 8000d18:	4652      	mov	r2, sl
 8000d1a:	4641      	mov	r1, r8
 8000d1c:	4638      	mov	r0, r7
 8000d1e:	47c8      	blx	r9
 8000d20:	3001      	adds	r0, #1
 8000d22:	d103      	bne.n	8000d2c <_printf_common+0xac>
 8000d24:	f04f 30ff 	mov.w	r0, #4294967295
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	3501      	adds	r5, #1
 8000d2e:	e7c6      	b.n	8000cbe <_printf_common+0x3e>
 8000d30:	18e1      	adds	r1, r4, r3
 8000d32:	1c5a      	adds	r2, r3, #1
 8000d34:	2030      	movs	r0, #48	@ 0x30
 8000d36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d3a:	4422      	add	r2, r4
 8000d3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d44:	3302      	adds	r3, #2
 8000d46:	e7c7      	b.n	8000cd8 <_printf_common+0x58>
 8000d48:	2301      	movs	r3, #1
 8000d4a:	4622      	mov	r2, r4
 8000d4c:	4641      	mov	r1, r8
 8000d4e:	4638      	mov	r0, r7
 8000d50:	47c8      	blx	r9
 8000d52:	3001      	adds	r0, #1
 8000d54:	d0e6      	beq.n	8000d24 <_printf_common+0xa4>
 8000d56:	3601      	adds	r6, #1
 8000d58:	e7d9      	b.n	8000d0e <_printf_common+0x8e>
	...

08000d5c <_printf_i>:
 8000d5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d60:	7e0f      	ldrb	r7, [r1, #24]
 8000d62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d64:	2f78      	cmp	r7, #120	@ 0x78
 8000d66:	4691      	mov	r9, r2
 8000d68:	4680      	mov	r8, r0
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d72:	d807      	bhi.n	8000d84 <_printf_i+0x28>
 8000d74:	2f62      	cmp	r7, #98	@ 0x62
 8000d76:	d80a      	bhi.n	8000d8e <_printf_i+0x32>
 8000d78:	2f00      	cmp	r7, #0
 8000d7a:	f000 80d2 	beq.w	8000f22 <_printf_i+0x1c6>
 8000d7e:	2f58      	cmp	r7, #88	@ 0x58
 8000d80:	f000 80b9 	beq.w	8000ef6 <_printf_i+0x19a>
 8000d84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d8c:	e03a      	b.n	8000e04 <_printf_i+0xa8>
 8000d8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d92:	2b15      	cmp	r3, #21
 8000d94:	d8f6      	bhi.n	8000d84 <_printf_i+0x28>
 8000d96:	a101      	add	r1, pc, #4	@ (adr r1, 8000d9c <_printf_i+0x40>)
 8000d98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d9c:	08000df5 	.word	0x08000df5
 8000da0:	08000e09 	.word	0x08000e09
 8000da4:	08000d85 	.word	0x08000d85
 8000da8:	08000d85 	.word	0x08000d85
 8000dac:	08000d85 	.word	0x08000d85
 8000db0:	08000d85 	.word	0x08000d85
 8000db4:	08000e09 	.word	0x08000e09
 8000db8:	08000d85 	.word	0x08000d85
 8000dbc:	08000d85 	.word	0x08000d85
 8000dc0:	08000d85 	.word	0x08000d85
 8000dc4:	08000d85 	.word	0x08000d85
 8000dc8:	08000f09 	.word	0x08000f09
 8000dcc:	08000e33 	.word	0x08000e33
 8000dd0:	08000ec3 	.word	0x08000ec3
 8000dd4:	08000d85 	.word	0x08000d85
 8000dd8:	08000d85 	.word	0x08000d85
 8000ddc:	08000f2b 	.word	0x08000f2b
 8000de0:	08000d85 	.word	0x08000d85
 8000de4:	08000e33 	.word	0x08000e33
 8000de8:	08000d85 	.word	0x08000d85
 8000dec:	08000d85 	.word	0x08000d85
 8000df0:	08000ecb 	.word	0x08000ecb
 8000df4:	6833      	ldr	r3, [r6, #0]
 8000df6:	1d1a      	adds	r2, r3, #4
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6032      	str	r2, [r6, #0]
 8000dfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e04:	2301      	movs	r3, #1
 8000e06:	e09d      	b.n	8000f44 <_printf_i+0x1e8>
 8000e08:	6833      	ldr	r3, [r6, #0]
 8000e0a:	6820      	ldr	r0, [r4, #0]
 8000e0c:	1d19      	adds	r1, r3, #4
 8000e0e:	6031      	str	r1, [r6, #0]
 8000e10:	0606      	lsls	r6, r0, #24
 8000e12:	d501      	bpl.n	8000e18 <_printf_i+0xbc>
 8000e14:	681d      	ldr	r5, [r3, #0]
 8000e16:	e003      	b.n	8000e20 <_printf_i+0xc4>
 8000e18:	0645      	lsls	r5, r0, #25
 8000e1a:	d5fb      	bpl.n	8000e14 <_printf_i+0xb8>
 8000e1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e20:	2d00      	cmp	r5, #0
 8000e22:	da03      	bge.n	8000e2c <_printf_i+0xd0>
 8000e24:	232d      	movs	r3, #45	@ 0x2d
 8000e26:	426d      	negs	r5, r5
 8000e28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e2c:	4859      	ldr	r0, [pc, #356]	@ (8000f94 <_printf_i+0x238>)
 8000e2e:	230a      	movs	r3, #10
 8000e30:	e011      	b.n	8000e56 <_printf_i+0xfa>
 8000e32:	6821      	ldr	r1, [r4, #0]
 8000e34:	6833      	ldr	r3, [r6, #0]
 8000e36:	0608      	lsls	r0, r1, #24
 8000e38:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e3c:	d402      	bmi.n	8000e44 <_printf_i+0xe8>
 8000e3e:	0649      	lsls	r1, r1, #25
 8000e40:	bf48      	it	mi
 8000e42:	b2ad      	uxthmi	r5, r5
 8000e44:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e46:	4853      	ldr	r0, [pc, #332]	@ (8000f94 <_printf_i+0x238>)
 8000e48:	6033      	str	r3, [r6, #0]
 8000e4a:	bf14      	ite	ne
 8000e4c:	230a      	movne	r3, #10
 8000e4e:	2308      	moveq	r3, #8
 8000e50:	2100      	movs	r1, #0
 8000e52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e56:	6866      	ldr	r6, [r4, #4]
 8000e58:	60a6      	str	r6, [r4, #8]
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	bfa2      	ittt	ge
 8000e5e:	6821      	ldrge	r1, [r4, #0]
 8000e60:	f021 0104 	bicge.w	r1, r1, #4
 8000e64:	6021      	strge	r1, [r4, #0]
 8000e66:	b90d      	cbnz	r5, 8000e6c <_printf_i+0x110>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d04b      	beq.n	8000f04 <_printf_i+0x1a8>
 8000e6c:	4616      	mov	r6, r2
 8000e6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e72:	fb03 5711 	mls	r7, r3, r1, r5
 8000e76:	5dc7      	ldrb	r7, [r0, r7]
 8000e78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e7c:	462f      	mov	r7, r5
 8000e7e:	42bb      	cmp	r3, r7
 8000e80:	460d      	mov	r5, r1
 8000e82:	d9f4      	bls.n	8000e6e <_printf_i+0x112>
 8000e84:	2b08      	cmp	r3, #8
 8000e86:	d10b      	bne.n	8000ea0 <_printf_i+0x144>
 8000e88:	6823      	ldr	r3, [r4, #0]
 8000e8a:	07df      	lsls	r7, r3, #31
 8000e8c:	d508      	bpl.n	8000ea0 <_printf_i+0x144>
 8000e8e:	6923      	ldr	r3, [r4, #16]
 8000e90:	6861      	ldr	r1, [r4, #4]
 8000e92:	4299      	cmp	r1, r3
 8000e94:	bfde      	ittt	le
 8000e96:	2330      	movle	r3, #48	@ 0x30
 8000e98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000ea0:	1b92      	subs	r2, r2, r6
 8000ea2:	6122      	str	r2, [r4, #16]
 8000ea4:	f8cd a000 	str.w	sl, [sp]
 8000ea8:	464b      	mov	r3, r9
 8000eaa:	aa03      	add	r2, sp, #12
 8000eac:	4621      	mov	r1, r4
 8000eae:	4640      	mov	r0, r8
 8000eb0:	f7ff fee6 	bl	8000c80 <_printf_common>
 8000eb4:	3001      	adds	r0, #1
 8000eb6:	d14a      	bne.n	8000f4e <_printf_i+0x1f2>
 8000eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ebc:	b004      	add	sp, #16
 8000ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6023      	str	r3, [r4, #0]
 8000eca:	4833      	ldr	r0, [pc, #204]	@ (8000f98 <_printf_i+0x23c>)
 8000ecc:	2778      	movs	r7, #120	@ 0x78
 8000ece:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	6831      	ldr	r1, [r6, #0]
 8000ed6:	061f      	lsls	r7, r3, #24
 8000ed8:	f851 5b04 	ldr.w	r5, [r1], #4
 8000edc:	d402      	bmi.n	8000ee4 <_printf_i+0x188>
 8000ede:	065f      	lsls	r7, r3, #25
 8000ee0:	bf48      	it	mi
 8000ee2:	b2ad      	uxthmi	r5, r5
 8000ee4:	6031      	str	r1, [r6, #0]
 8000ee6:	07d9      	lsls	r1, r3, #31
 8000ee8:	bf44      	itt	mi
 8000eea:	f043 0320 	orrmi.w	r3, r3, #32
 8000eee:	6023      	strmi	r3, [r4, #0]
 8000ef0:	b11d      	cbz	r5, 8000efa <_printf_i+0x19e>
 8000ef2:	2310      	movs	r3, #16
 8000ef4:	e7ac      	b.n	8000e50 <_printf_i+0xf4>
 8000ef6:	4827      	ldr	r0, [pc, #156]	@ (8000f94 <_printf_i+0x238>)
 8000ef8:	e7e9      	b.n	8000ece <_printf_i+0x172>
 8000efa:	6823      	ldr	r3, [r4, #0]
 8000efc:	f023 0320 	bic.w	r3, r3, #32
 8000f00:	6023      	str	r3, [r4, #0]
 8000f02:	e7f6      	b.n	8000ef2 <_printf_i+0x196>
 8000f04:	4616      	mov	r6, r2
 8000f06:	e7bd      	b.n	8000e84 <_printf_i+0x128>
 8000f08:	6833      	ldr	r3, [r6, #0]
 8000f0a:	6825      	ldr	r5, [r4, #0]
 8000f0c:	6961      	ldr	r1, [r4, #20]
 8000f0e:	1d18      	adds	r0, r3, #4
 8000f10:	6030      	str	r0, [r6, #0]
 8000f12:	062e      	lsls	r6, r5, #24
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	d501      	bpl.n	8000f1c <_printf_i+0x1c0>
 8000f18:	6019      	str	r1, [r3, #0]
 8000f1a:	e002      	b.n	8000f22 <_printf_i+0x1c6>
 8000f1c:	0668      	lsls	r0, r5, #25
 8000f1e:	d5fb      	bpl.n	8000f18 <_printf_i+0x1bc>
 8000f20:	8019      	strh	r1, [r3, #0]
 8000f22:	2300      	movs	r3, #0
 8000f24:	6123      	str	r3, [r4, #16]
 8000f26:	4616      	mov	r6, r2
 8000f28:	e7bc      	b.n	8000ea4 <_printf_i+0x148>
 8000f2a:	6833      	ldr	r3, [r6, #0]
 8000f2c:	1d1a      	adds	r2, r3, #4
 8000f2e:	6032      	str	r2, [r6, #0]
 8000f30:	681e      	ldr	r6, [r3, #0]
 8000f32:	6862      	ldr	r2, [r4, #4]
 8000f34:	2100      	movs	r1, #0
 8000f36:	4630      	mov	r0, r6
 8000f38:	f7ff f952 	bl	80001e0 <memchr>
 8000f3c:	b108      	cbz	r0, 8000f42 <_printf_i+0x1e6>
 8000f3e:	1b80      	subs	r0, r0, r6
 8000f40:	6060      	str	r0, [r4, #4]
 8000f42:	6863      	ldr	r3, [r4, #4]
 8000f44:	6123      	str	r3, [r4, #16]
 8000f46:	2300      	movs	r3, #0
 8000f48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f4c:	e7aa      	b.n	8000ea4 <_printf_i+0x148>
 8000f4e:	6923      	ldr	r3, [r4, #16]
 8000f50:	4632      	mov	r2, r6
 8000f52:	4649      	mov	r1, r9
 8000f54:	4640      	mov	r0, r8
 8000f56:	47d0      	blx	sl
 8000f58:	3001      	adds	r0, #1
 8000f5a:	d0ad      	beq.n	8000eb8 <_printf_i+0x15c>
 8000f5c:	6823      	ldr	r3, [r4, #0]
 8000f5e:	079b      	lsls	r3, r3, #30
 8000f60:	d413      	bmi.n	8000f8a <_printf_i+0x22e>
 8000f62:	68e0      	ldr	r0, [r4, #12]
 8000f64:	9b03      	ldr	r3, [sp, #12]
 8000f66:	4298      	cmp	r0, r3
 8000f68:	bfb8      	it	lt
 8000f6a:	4618      	movlt	r0, r3
 8000f6c:	e7a6      	b.n	8000ebc <_printf_i+0x160>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4632      	mov	r2, r6
 8000f72:	4649      	mov	r1, r9
 8000f74:	4640      	mov	r0, r8
 8000f76:	47d0      	blx	sl
 8000f78:	3001      	adds	r0, #1
 8000f7a:	d09d      	beq.n	8000eb8 <_printf_i+0x15c>
 8000f7c:	3501      	adds	r5, #1
 8000f7e:	68e3      	ldr	r3, [r4, #12]
 8000f80:	9903      	ldr	r1, [sp, #12]
 8000f82:	1a5b      	subs	r3, r3, r1
 8000f84:	42ab      	cmp	r3, r5
 8000f86:	dcf2      	bgt.n	8000f6e <_printf_i+0x212>
 8000f88:	e7eb      	b.n	8000f62 <_printf_i+0x206>
 8000f8a:	2500      	movs	r5, #0
 8000f8c:	f104 0619 	add.w	r6, r4, #25
 8000f90:	e7f5      	b.n	8000f7e <_printf_i+0x222>
 8000f92:	bf00      	nop
 8000f94:	08001156 	.word	0x08001156
 8000f98:	08001167 	.word	0x08001167

08000f9c <memmove>:
 8000f9c:	4288      	cmp	r0, r1
 8000f9e:	b510      	push	{r4, lr}
 8000fa0:	eb01 0402 	add.w	r4, r1, r2
 8000fa4:	d902      	bls.n	8000fac <memmove+0x10>
 8000fa6:	4284      	cmp	r4, r0
 8000fa8:	4623      	mov	r3, r4
 8000faa:	d807      	bhi.n	8000fbc <memmove+0x20>
 8000fac:	1e43      	subs	r3, r0, #1
 8000fae:	42a1      	cmp	r1, r4
 8000fb0:	d008      	beq.n	8000fc4 <memmove+0x28>
 8000fb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000fb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000fba:	e7f8      	b.n	8000fae <memmove+0x12>
 8000fbc:	4402      	add	r2, r0
 8000fbe:	4601      	mov	r1, r0
 8000fc0:	428a      	cmp	r2, r1
 8000fc2:	d100      	bne.n	8000fc6 <memmove+0x2a>
 8000fc4:	bd10      	pop	{r4, pc}
 8000fc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000fca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000fce:	e7f7      	b.n	8000fc0 <memmove+0x24>

08000fd0 <_sbrk_r>:
 8000fd0:	b538      	push	{r3, r4, r5, lr}
 8000fd2:	4d06      	ldr	r5, [pc, #24]	@ (8000fec <_sbrk_r+0x1c>)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4604      	mov	r4, r0
 8000fd8:	4608      	mov	r0, r1
 8000fda:	602b      	str	r3, [r5, #0]
 8000fdc:	f000 f84c 	bl	8001078 <_sbrk>
 8000fe0:	1c43      	adds	r3, r0, #1
 8000fe2:	d102      	bne.n	8000fea <_sbrk_r+0x1a>
 8000fe4:	682b      	ldr	r3, [r5, #0]
 8000fe6:	b103      	cbz	r3, 8000fea <_sbrk_r+0x1a>
 8000fe8:	6023      	str	r3, [r4, #0]
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	20000230 	.word	0x20000230

08000ff0 <memcpy>:
 8000ff0:	440a      	add	r2, r1
 8000ff2:	4291      	cmp	r1, r2
 8000ff4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ff8:	d100      	bne.n	8000ffc <memcpy+0xc>
 8000ffa:	4770      	bx	lr
 8000ffc:	b510      	push	{r4, lr}
 8000ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001006:	4291      	cmp	r1, r2
 8001008:	d1f9      	bne.n	8000ffe <memcpy+0xe>
 800100a:	bd10      	pop	{r4, pc}

0800100c <_realloc_r>:
 800100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001010:	4680      	mov	r8, r0
 8001012:	4615      	mov	r5, r2
 8001014:	460c      	mov	r4, r1
 8001016:	b921      	cbnz	r1, 8001022 <_realloc_r+0x16>
 8001018:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800101c:	4611      	mov	r1, r2
 800101e:	f7ff bc4b 	b.w	80008b8 <_malloc_r>
 8001022:	b92a      	cbnz	r2, 8001030 <_realloc_r+0x24>
 8001024:	f7ff fbdc 	bl	80007e0 <_free_r>
 8001028:	2400      	movs	r4, #0
 800102a:	4620      	mov	r0, r4
 800102c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001030:	f000 f81a 	bl	8001068 <_malloc_usable_size_r>
 8001034:	4285      	cmp	r5, r0
 8001036:	4606      	mov	r6, r0
 8001038:	d802      	bhi.n	8001040 <_realloc_r+0x34>
 800103a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800103e:	d8f4      	bhi.n	800102a <_realloc_r+0x1e>
 8001040:	4629      	mov	r1, r5
 8001042:	4640      	mov	r0, r8
 8001044:	f7ff fc38 	bl	80008b8 <_malloc_r>
 8001048:	4607      	mov	r7, r0
 800104a:	2800      	cmp	r0, #0
 800104c:	d0ec      	beq.n	8001028 <_realloc_r+0x1c>
 800104e:	42b5      	cmp	r5, r6
 8001050:	462a      	mov	r2, r5
 8001052:	4621      	mov	r1, r4
 8001054:	bf28      	it	cs
 8001056:	4632      	movcs	r2, r6
 8001058:	f7ff ffca 	bl	8000ff0 <memcpy>
 800105c:	4621      	mov	r1, r4
 800105e:	4640      	mov	r0, r8
 8001060:	f7ff fbbe 	bl	80007e0 <_free_r>
 8001064:	463c      	mov	r4, r7
 8001066:	e7e0      	b.n	800102a <_realloc_r+0x1e>

08001068 <_malloc_usable_size_r>:
 8001068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800106c:	1f18      	subs	r0, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	bfbc      	itt	lt
 8001072:	580b      	ldrlt	r3, [r1, r0]
 8001074:	18c0      	addlt	r0, r0, r3
 8001076:	4770      	bx	lr

08001078 <_sbrk>:
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <_sbrk+0x14>)
 800107a:	6811      	ldr	r1, [r2, #0]
 800107c:	4603      	mov	r3, r0
 800107e:	b909      	cbnz	r1, 8001084 <_sbrk+0xc>
 8001080:	4903      	ldr	r1, [pc, #12]	@ (8001090 <_sbrk+0x18>)
 8001082:	6011      	str	r1, [r2, #0]
 8001084:	6810      	ldr	r0, [r2, #0]
 8001086:	4403      	add	r3, r0
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	4770      	bx	lr
 800108c:	20000240 	.word	0x20000240
 8001090:	20000248 	.word	0x20000248

08001094 <_init>:
 8001094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001096:	bf00      	nop
 8001098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109a:	bc08      	pop	{r3}
 800109c:	469e      	mov	lr, r3
 800109e:	4770      	bx	lr

080010a0 <_fini>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr

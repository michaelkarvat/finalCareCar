
prints.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08000f1c  08000f1c  00001f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000fc8  08000fc8  00002054  2**0
                  CONTENTS
  4 .ARM          00000008  08000fc8  08000fc8  00001fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000fd0  08000fd0  00002054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000fd0  08000fd0  00001fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000fd4  08000fd4  00001fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08000fd8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000054  0800102c  00002054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  0800102c  000022c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011a4  00000000  00000000  00002084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052e  00000000  00000000  00003228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000f0  00000000  00000000  00003758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000a0  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001860d  00000000  00000000  000038e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001642  00000000  00000000  0001bef5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000868a3  00000000  00000000  0001d537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a3dda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007e0  00000000  00000000  000a3e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000a4600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f04 	.word	0x08000f04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08000f04 	.word	0x08000f04

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include "usart1.h"  // The new code (PA9/PA10 @ 115200)
#include "usart2.h"  // Your existing debug code
#include "types.h"

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b090      	sub	sp, #64	@ 0x40
 8000284:	af00      	add	r7, sp, #0
    // 1) Init debug USART2 (PC connection).
    USART2_init();
 8000286:	f000 f91d 	bl	80004c4 <USART2_init>
    print("USART2 (PC) initialized.\n");
 800028a:	480e      	ldr	r0, [pc, #56]	@ (80002c4 <main+0x44>)
 800028c:	f000 f902 	bl	8000494 <print>

    // 2) Init USART1 for SIMCom (PA9/PA10, 115200).
    USART1_init();
 8000290:	f000 f840 	bl	8000314 <USART1_init>
    print("USART1 (SIMCom) initialized at 115200.\n");
 8000294:	480c      	ldr	r0, [pc, #48]	@ (80002c8 <main+0x48>)
 8000296:	f000 f8fd 	bl	8000494 <print>

    // 3) Send basic "AT" command to the SIMCom.
    USART1_print("AT+blah\r\n");
 800029a:	480c      	ldr	r0, [pc, #48]	@ (80002cc <main+0x4c>)
 800029c:	f000 f88a 	bl	80003b4 <USART1_print>
    print("Sent 'AT' to SIMCom.\n");
 80002a0:	480b      	ldr	r0, [pc, #44]	@ (80002d0 <main+0x50>)
 80002a2:	f000 f8f7 	bl	8000494 <print>

    // 4) Main loop
    while (1)
    {
        // If the SIMCom sends a line ending in '\n', forward it to the PC.
        if (USART1_commandReceived())
 80002a6:	f000 f863 	bl	8000370 <USART1_commandReceived>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d0fa      	beq.n	80002a6 <main+0x26>
        {
            char response[64];
            USART1_getCommand(response);
 80002b0:	463b      	mov	r3, r7
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f870 	bl	8000398 <USART1_getCommand>
            print("SIMCom => %s\n", response);
 80002b8:	463b      	mov	r3, r7
 80002ba:	4619      	mov	r1, r3
 80002bc:	4805      	ldr	r0, [pc, #20]	@ (80002d4 <main+0x54>)
 80002be:	f000 f8e9 	bl	8000494 <print>
        if (USART1_commandReceived())
 80002c2:	e7f0      	b.n	80002a6 <main+0x26>
 80002c4:	08000f1c 	.word	0x08000f1c
 80002c8:	08000f38 	.word	0x08000f38
 80002cc:	08000f60 	.word	0x08000f60
 80002d0:	08000f6c 	.word	0x08000f6c
 80002d4:	08000f84 	.word	0x08000f84

080002d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	db0b      	blt.n	8000302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f003 021f 	and.w	r2, r3, #31
 80002f0:	4907      	ldr	r1, [pc, #28]	@ (8000310 <__NVIC_EnableIRQ+0x38>)
 80002f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f6:	095b      	lsrs	r3, r3, #5
 80002f8:	2001      	movs	r0, #1
 80002fa:	fa00 f202 	lsl.w	r2, r0, r2
 80002fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000302:	bf00      	nop
 8000304:	370c      	adds	r7, #12
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	e000e100 	.word	0xe000e100

08000314 <USART1_init>:

// --------------------------------------------------------------------------
// Public Functions
// --------------------------------------------------------------------------
void USART1_init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    // 1) Enable GPIOA clock (bit 17 => 0x00020000).
    RCC->AHBENR |= 0x00020000;
 8000318:	4b13      	ldr	r3, [pc, #76]	@ (8000368 <USART1_init+0x54>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a12      	ldr	r2, [pc, #72]	@ (8000368 <USART1_init+0x54>)
 800031e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000322:	6153      	str	r3, [r2, #20]

    // 2) Enable USART1 clock on APB2 (bit 14 => 0x00004000).
    RCC->APB2ENR |= 0x00004000;
 8000324:	4b10      	ldr	r3, [pc, #64]	@ (8000368 <USART1_init+0x54>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a0f      	ldr	r2, [pc, #60]	@ (8000368 <USART1_init+0x54>)
 800032a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800032e:	6193      	str	r3, [r2, #24]

    // 3) Configure PA9 (TX) and PA10 (RX) as alternate function (AF) pins.
    //    "10" in MODER => AF mode.
    //    Bits for PA9 are [19:18], PA10 are [21:20].
    //    That corresponds to 0x2 << 18 and 0x2 << 20 => combined 0x00280000.
    GPIOA->MODER |= 0x00280000;
 8000330:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800033a:	f443 1320 	orr.w	r3, r3, #2621440	@ 0x280000
 800033e:	6013      	str	r3, [r2, #0]

    // 4) Configure the AFR[1] for PA9 and PA10 to AF7 => 0x770.
    //    Pin9 => bits [7:4], pin10 => bits [11:8].
    GPIOA->AFR[1] |= 0x00000770;
 8000340:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000346:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800034a:	f443 63ee 	orr.w	r3, r3, #1904	@ 0x770
 800034e:	6253      	str	r3, [r2, #36]	@ 0x24



    // 5) Set baud rate to 115200 at 8MHz => BRR = 1111 in decimal
    //    (the same as 0x0457 in hex).
    USART1->BRR = 69;  // decimal representation
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <USART1_init+0x58>)
 8000352:	2245      	movs	r2, #69	@ 0x45
 8000354:	60da      	str	r2, [r3, #12]

    // 6) Enable USART1, Rx, Tx, and Rx interrupt => CR1 = 0x2D
    //    bit0 (UE)=1, bit2 (RE)=1, bit3 (TE)=1, bit5 (RXNEIE)=1
    USART1->CR1 = 0x0000002D;
 8000356:	4b05      	ldr	r3, [pc, #20]	@ (800036c <USART1_init+0x58>)
 8000358:	222d      	movs	r2, #45	@ 0x2d
 800035a:	601a      	str	r2, [r3, #0]

    // 7) Enable the NVIC interrupt for USART1 (default is USART1_IRQn).
    //    The function name is below: USART1_EXTI25_IRQHandler.
    NVIC_EnableIRQ(USART1_IRQn);
 800035c:	2025      	movs	r0, #37	@ 0x25
 800035e:	f7ff ffbb 	bl	80002d8 <__NVIC_EnableIRQ>
}
 8000362:	bf00      	nop
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	40021000 	.word	0x40021000
 800036c:	40013800 	.word	0x40013800

08000370 <USART1_commandReceived>:

BOOL USART1_commandReceived(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
    if (Command_Received)
 8000374:	4b07      	ldr	r3, [pc, #28]	@ (8000394 <USART1_commandReceived+0x24>)
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d004      	beq.n	8000386 <USART1_commandReceived+0x16>
    {
        Command_Received = FALSE;
 800037c:	4b05      	ldr	r3, [pc, #20]	@ (8000394 <USART1_commandReceived+0x24>)
 800037e:	2200      	movs	r2, #0
 8000380:	701a      	strb	r2, [r3, #0]
        return TRUE;
 8000382:	2301      	movs	r3, #1
 8000384:	e000      	b.n	8000388 <USART1_commandReceived+0x18>
    }
    else
    {
        return FALSE;
 8000386:	2300      	movs	r3, #0
    }
}
 8000388:	4618      	mov	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	200000f0 	.word	0x200000f0

08000398 <USART1_getCommand>:

void USART1_getCommand(char *p_command)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
    // Same as your code: just copy from A_Rx_Buffer to p_command.
    strcpy(p_command, A_Rx_Buffer);
 80003a0:	4903      	ldr	r1, [pc, #12]	@ (80003b0 <USART1_getCommand+0x18>)
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f000 f94c 	bl	8000640 <strcpy>
}
 80003a8:	bf00      	nop
 80003aa:	3708      	adds	r7, #8
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000070 	.word	0x20000070

080003b4 <USART1_print>:
    USART1->TDR = c;
    while (!(USART1->ISR & 0x00000080)); // Wait for TXE=1 (bit 7 in ISR)
}

void USART1_print(const char *p_data)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
    while (*p_data != '\0')
 80003bc:	e00d      	b.n	80003da <USART1_print+0x26>
    {
        USART1->TDR = *p_data;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	781a      	ldrb	r2, [r3, #0]
 80003c2:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <USART1_print+0x3c>)
 80003c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_data++;
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3301      	adds	r3, #1
 80003ca:	607b      	str	r3, [r7, #4]
        while (!(USART1->ISR & 0x00000080));
 80003cc:	bf00      	nop
 80003ce:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <USART1_print+0x3c>)
 80003d0:	69db      	ldr	r3, [r3, #28]
 80003d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d0f9      	beq.n	80003ce <USART1_print+0x1a>
    while (*p_data != '\0')
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1ed      	bne.n	80003be <USART1_print+0xa>
    }
}
 80003e2:	bf00      	nop
 80003e4:	bf00      	nop
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	40013800 	.word	0x40013800

080003f4 <USART1_EXTI25_IRQHandler>:
 * We'll do the same style for USART1. The real default name in the
 * STM32F3 vector table might be 'USART1_IRQHandler'.
 * Adjust to match your startup file if needed.
 */
void USART1_EXTI25_IRQHandler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b083      	sub	sp, #12
 80003f8:	af00      	add	r7, sp, #0
    // Reading RDR clears the RXNE interrupt flag.
    char rx_byte = (char)(USART1->RDR & 0xFF);
 80003fa:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <USART1_EXTI25_IRQHandler+0x50>)
 80003fc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80003fe:	b29b      	uxth	r3, r3
 8000400:	71fb      	strb	r3, [r7, #7]

    // If the user (SIMCom) ended with '\n', we have a complete command.
    if (rx_byte == '\n')
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2b0a      	cmp	r3, #10
 8000406:	d10a      	bne.n	800041e <USART1_EXTI25_IRQHandler+0x2a>
    {
        Command_Received = TRUE;
 8000408:	4b0f      	ldr	r3, [pc, #60]	@ (8000448 <USART1_EXTI25_IRQHandler+0x54>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
        *P_Loc_In_Rx_Buffer = '\0';
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <USART1_EXTI25_IRQHandler+0x58>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
        P_Loc_In_Rx_Buffer = A_Rx_Buffer;
 8000416:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <USART1_EXTI25_IRQHandler+0x58>)
 8000418:	4a0d      	ldr	r2, [pc, #52]	@ (8000450 <USART1_EXTI25_IRQHandler+0x5c>)
 800041a:	601a      	str	r2, [r3, #0]
        return;
 800041c:	e00d      	b.n	800043a <USART1_EXTI25_IRQHandler+0x46>
    }

    // Store the byte in the RX buffer
    *P_Loc_In_Rx_Buffer = rx_byte;
 800041e:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <USART1_EXTI25_IRQHandler+0x58>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	701a      	strb	r2, [r3, #0]

    // If we’re not at the end, advance pointer
    if (P_Loc_In_Rx_Buffer < P_End_Of_Rx_Buffer)
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <USART1_EXTI25_IRQHandler+0x58>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a0a      	ldr	r2, [pc, #40]	@ (8000454 <USART1_EXTI25_IRQHandler+0x60>)
 800042c:	4293      	cmp	r3, r2
 800042e:	d204      	bcs.n	800043a <USART1_EXTI25_IRQHandler+0x46>
    {
        P_Loc_In_Rx_Buffer++;
 8000430:	4b06      	ldr	r3, [pc, #24]	@ (800044c <USART1_EXTI25_IRQHandler+0x58>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	3301      	adds	r3, #1
 8000436:	4a05      	ldr	r2, [pc, #20]	@ (800044c <USART1_EXTI25_IRQHandler+0x58>)
 8000438:	6013      	str	r3, [r2, #0]
    }
    // If buffer is full, no overflow handling here (same as your code).
}
 800043a:	370c      	adds	r7, #12
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	40013800 	.word	0x40013800
 8000448:	200000f0 	.word	0x200000f0
 800044c:	20000000 	.word	0x20000000
 8000450:	20000070 	.word	0x20000070
 8000454:	200000ef 	.word	0x200000ef

08000458 <__NVIC_EnableIRQ>:
{
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	2b00      	cmp	r3, #0
 8000468:	db0b      	blt.n	8000482 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800046a:	79fb      	ldrb	r3, [r7, #7]
 800046c:	f003 021f 	and.w	r2, r3, #31
 8000470:	4907      	ldr	r1, [pc, #28]	@ (8000490 <__NVIC_EnableIRQ+0x38>)
 8000472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000476:	095b      	lsrs	r3, r3, #5
 8000478:	2001      	movs	r0, #1
 800047a:	fa00 f202 	lsl.w	r2, r0, r2
 800047e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000482:	bf00      	nop
 8000484:	370c      	adds	r7, #12
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	e000e100 	.word	0xe000e100

08000494 <print>:




void print(char *p_format, ...)
{
 8000494:	b40f      	push	{r0, r1, r2, r3}
 8000496:	b580      	push	{r7, lr}
 8000498:	b082      	sub	sp, #8
 800049a:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 800049c:	f107 0314 	add.w	r3, r7, #20
 80004a0:	607b      	str	r3, [r7, #4]
	(void)vsprintf(A_Tx_Buffer, p_format, p_variables);
 80004a2:	687a      	ldr	r2, [r7, #4]
 80004a4:	6939      	ldr	r1, [r7, #16]
 80004a6:	4806      	ldr	r0, [pc, #24]	@ (80004c0 <print+0x2c>)
 80004a8:	f000 f89a 	bl	80005e0 <vsiprintf>
    USART2_print(A_Tx_Buffer);
 80004ac:	4804      	ldr	r0, [pc, #16]	@ (80004c0 <print+0x2c>)
 80004ae:	f000 f837 	bl	8000520 <USART2_print>
}
 80004b2:	bf00      	nop
 80004b4:	3708      	adds	r7, #8
 80004b6:	46bd      	mov	sp, r7
 80004b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004bc:	b004      	add	sp, #16
 80004be:	4770      	bx	lr
 80004c0:	200000f4 	.word	0x200000f4

080004c4 <USART2_init>:




void USART2_init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet).
    RCC->AHBENR |= 0x00020000;
 80004c8:	4b13      	ldr	r3, [pc, #76]	@ (8000518 <USART2_init+0x54>)
 80004ca:	695b      	ldr	r3, [r3, #20]
 80004cc:	4a12      	ldr	r2, [pc, #72]	@ (8000518 <USART2_init+0x54>)
 80004ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004d2:	6153      	str	r3, [r2, #20]
    // Enable USART2 clock.
    RCC->APB1ENR |= 0x00020000;
 80004d4:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <USART2_init+0x54>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000518 <USART2_init+0x54>)
 80004da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004de:	61d3      	str	r3, [r2, #28]
    // Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
    GPIOA->MODER |= 0x000000A0;
 80004e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004ea:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80004ee:	6013      	str	r3, [r2, #0]
    // AFR[0] is the same as AFRL in the reference manual (p. 241),
    // and AFR[1] is the same as AFRH in the reference manual (p. 242).
    GPIOA->AFR[0] |= 0x00007700;
 80004f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004f4:	6a1b      	ldr	r3, [r3, #32]
 80004f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004fa:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80004fe:	6213      	str	r3, [r2, #32]
    USART2->BRR = 69;  // 8 MHz / 9600 baud rate.
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <USART2_init+0x58>)
 8000502:	2245      	movs	r2, #69	@ 0x45
 8000504:	60da      	str	r2, [r3, #12]
    // Enable USART2 and its RX and TX functionality.
    // Also enable the RX interrupt.
    USART2->CR1 = 0x0000002D;
 8000506:	4b05      	ldr	r3, [pc, #20]	@ (800051c <USART2_init+0x58>)
 8000508:	222d      	movs	r2, #45	@ 0x2d
 800050a:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART2_IRQn);
 800050c:	2026      	movs	r0, #38	@ 0x26
 800050e:	f7ff ffa3 	bl	8000458 <__NVIC_EnableIRQ>
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40021000 	.word	0x40021000
 800051c:	40004400 	.word	0x40004400

08000520 <USART2_print>:




void USART2_print(const char *p_data)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	while(*p_data != '\0')
 8000528:	e00d      	b.n	8000546 <USART2_print+0x26>
	{
		USART2->TDR = *p_data;
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <USART2_print+0x3c>)
 8000530:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_data++;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3301      	adds	r3, #1
 8000536:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));
 8000538:	bf00      	nop
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <USART2_print+0x3c>)
 800053c:	69db      	ldr	r3, [r3, #28]
 800053e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000542:	2b00      	cmp	r3, #0
 8000544:	d0f9      	beq.n	800053a <USART2_print+0x1a>
	while(*p_data != '\0')
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ed      	bne.n	800052a <USART2_print+0xa>
	}
}
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	40004400 	.word	0x40004400

08000560 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000560:	480d      	ldr	r0, [pc, #52]	@ (8000598 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000562:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000564:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000568:	480c      	ldr	r0, [pc, #48]	@ (800059c <LoopForever+0x6>)
  ldr r1, =_edata
 800056a:	490d      	ldr	r1, [pc, #52]	@ (80005a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800056c:	4a0d      	ldr	r2, [pc, #52]	@ (80005a4 <LoopForever+0xe>)
  movs r3, #0
 800056e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000570:	e002      	b.n	8000578 <LoopCopyDataInit>

08000572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000576:	3304      	adds	r3, #4

08000578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800057a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800057c:	d3f9      	bcc.n	8000572 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800057e:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000580:	4c0a      	ldr	r4, [pc, #40]	@ (80005ac <LoopForever+0x16>)
  movs r3, #0
 8000582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000584:	e001      	b.n	800058a <LoopFillZerobss>

08000586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000588:	3204      	adds	r2, #4

0800058a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800058a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800058c:	d3fb      	bcc.n	8000586 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800058e:	f000 f831 	bl	80005f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000592:	f7ff fe75 	bl	8000280 <main>

08000596 <LoopForever>:

LoopForever:
    b LoopForever
 8000596:	e7fe      	b.n	8000596 <LoopForever>
  ldr   r0, =_estack
 8000598:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800059c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a0:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80005a4:	08000fd8 	.word	0x08000fd8
  ldr r2, =_sbss
 80005a8:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80005ac:	200002c0 	.word	0x200002c0

080005b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005b0:	e7fe      	b.n	80005b0 <ADC1_2_IRQHandler>
	...

080005b4 <_vsiprintf_r>:
 80005b4:	b500      	push	{lr}
 80005b6:	b09b      	sub	sp, #108	@ 0x6c
 80005b8:	9100      	str	r1, [sp, #0]
 80005ba:	9104      	str	r1, [sp, #16]
 80005bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80005c0:	9105      	str	r1, [sp, #20]
 80005c2:	9102      	str	r1, [sp, #8]
 80005c4:	4905      	ldr	r1, [pc, #20]	@ (80005dc <_vsiprintf_r+0x28>)
 80005c6:	9103      	str	r1, [sp, #12]
 80005c8:	4669      	mov	r1, sp
 80005ca:	f000 f995 	bl	80008f8 <_svfiprintf_r>
 80005ce:	9b00      	ldr	r3, [sp, #0]
 80005d0:	2200      	movs	r2, #0
 80005d2:	701a      	strb	r2, [r3, #0]
 80005d4:	b01b      	add	sp, #108	@ 0x6c
 80005d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80005da:	bf00      	nop
 80005dc:	ffff0208 	.word	0xffff0208

080005e0 <vsiprintf>:
 80005e0:	4613      	mov	r3, r2
 80005e2:	460a      	mov	r2, r1
 80005e4:	4601      	mov	r1, r0
 80005e6:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <vsiprintf+0x10>)
 80005e8:	6800      	ldr	r0, [r0, #0]
 80005ea:	f7ff bfe3 	b.w	80005b4 <_vsiprintf_r>
 80005ee:	bf00      	nop
 80005f0:	20000004 	.word	0x20000004

080005f4 <__libc_init_array>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	4d0d      	ldr	r5, [pc, #52]	@ (800062c <__libc_init_array+0x38>)
 80005f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000630 <__libc_init_array+0x3c>)
 80005fa:	1b64      	subs	r4, r4, r5
 80005fc:	10a4      	asrs	r4, r4, #2
 80005fe:	2600      	movs	r6, #0
 8000600:	42a6      	cmp	r6, r4
 8000602:	d109      	bne.n	8000618 <__libc_init_array+0x24>
 8000604:	4d0b      	ldr	r5, [pc, #44]	@ (8000634 <__libc_init_array+0x40>)
 8000606:	4c0c      	ldr	r4, [pc, #48]	@ (8000638 <__libc_init_array+0x44>)
 8000608:	f000 fc7c 	bl	8000f04 <_init>
 800060c:	1b64      	subs	r4, r4, r5
 800060e:	10a4      	asrs	r4, r4, #2
 8000610:	2600      	movs	r6, #0
 8000612:	42a6      	cmp	r6, r4
 8000614:	d105      	bne.n	8000622 <__libc_init_array+0x2e>
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f855 3b04 	ldr.w	r3, [r5], #4
 800061c:	4798      	blx	r3
 800061e:	3601      	adds	r6, #1
 8000620:	e7ee      	b.n	8000600 <__libc_init_array+0xc>
 8000622:	f855 3b04 	ldr.w	r3, [r5], #4
 8000626:	4798      	blx	r3
 8000628:	3601      	adds	r6, #1
 800062a:	e7f2      	b.n	8000612 <__libc_init_array+0x1e>
 800062c:	08000fd0 	.word	0x08000fd0
 8000630:	08000fd0 	.word	0x08000fd0
 8000634:	08000fd0 	.word	0x08000fd0
 8000638:	08000fd4 	.word	0x08000fd4

0800063c <__retarget_lock_acquire_recursive>:
 800063c:	4770      	bx	lr

0800063e <__retarget_lock_release_recursive>:
 800063e:	4770      	bx	lr

08000640 <strcpy>:
 8000640:	4603      	mov	r3, r0
 8000642:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000646:	f803 2b01 	strb.w	r2, [r3], #1
 800064a:	2a00      	cmp	r2, #0
 800064c:	d1f9      	bne.n	8000642 <strcpy+0x2>
 800064e:	4770      	bx	lr

08000650 <_free_r>:
 8000650:	b538      	push	{r3, r4, r5, lr}
 8000652:	4605      	mov	r5, r0
 8000654:	2900      	cmp	r1, #0
 8000656:	d041      	beq.n	80006dc <_free_r+0x8c>
 8000658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800065c:	1f0c      	subs	r4, r1, #4
 800065e:	2b00      	cmp	r3, #0
 8000660:	bfb8      	it	lt
 8000662:	18e4      	addlt	r4, r4, r3
 8000664:	f000 f8e0 	bl	8000828 <__malloc_lock>
 8000668:	4a1d      	ldr	r2, [pc, #116]	@ (80006e0 <_free_r+0x90>)
 800066a:	6813      	ldr	r3, [r2, #0]
 800066c:	b933      	cbnz	r3, 800067c <_free_r+0x2c>
 800066e:	6063      	str	r3, [r4, #4]
 8000670:	6014      	str	r4, [r2, #0]
 8000672:	4628      	mov	r0, r5
 8000674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000678:	f000 b8dc 	b.w	8000834 <__malloc_unlock>
 800067c:	42a3      	cmp	r3, r4
 800067e:	d908      	bls.n	8000692 <_free_r+0x42>
 8000680:	6820      	ldr	r0, [r4, #0]
 8000682:	1821      	adds	r1, r4, r0
 8000684:	428b      	cmp	r3, r1
 8000686:	bf01      	itttt	eq
 8000688:	6819      	ldreq	r1, [r3, #0]
 800068a:	685b      	ldreq	r3, [r3, #4]
 800068c:	1809      	addeq	r1, r1, r0
 800068e:	6021      	streq	r1, [r4, #0]
 8000690:	e7ed      	b.n	800066e <_free_r+0x1e>
 8000692:	461a      	mov	r2, r3
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	b10b      	cbz	r3, 800069c <_free_r+0x4c>
 8000698:	42a3      	cmp	r3, r4
 800069a:	d9fa      	bls.n	8000692 <_free_r+0x42>
 800069c:	6811      	ldr	r1, [r2, #0]
 800069e:	1850      	adds	r0, r2, r1
 80006a0:	42a0      	cmp	r0, r4
 80006a2:	d10b      	bne.n	80006bc <_free_r+0x6c>
 80006a4:	6820      	ldr	r0, [r4, #0]
 80006a6:	4401      	add	r1, r0
 80006a8:	1850      	adds	r0, r2, r1
 80006aa:	4283      	cmp	r3, r0
 80006ac:	6011      	str	r1, [r2, #0]
 80006ae:	d1e0      	bne.n	8000672 <_free_r+0x22>
 80006b0:	6818      	ldr	r0, [r3, #0]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	6053      	str	r3, [r2, #4]
 80006b6:	4408      	add	r0, r1
 80006b8:	6010      	str	r0, [r2, #0]
 80006ba:	e7da      	b.n	8000672 <_free_r+0x22>
 80006bc:	d902      	bls.n	80006c4 <_free_r+0x74>
 80006be:	230c      	movs	r3, #12
 80006c0:	602b      	str	r3, [r5, #0]
 80006c2:	e7d6      	b.n	8000672 <_free_r+0x22>
 80006c4:	6820      	ldr	r0, [r4, #0]
 80006c6:	1821      	adds	r1, r4, r0
 80006c8:	428b      	cmp	r3, r1
 80006ca:	bf04      	itt	eq
 80006cc:	6819      	ldreq	r1, [r3, #0]
 80006ce:	685b      	ldreq	r3, [r3, #4]
 80006d0:	6063      	str	r3, [r4, #4]
 80006d2:	bf04      	itt	eq
 80006d4:	1809      	addeq	r1, r1, r0
 80006d6:	6021      	streq	r1, [r4, #0]
 80006d8:	6054      	str	r4, [r2, #4]
 80006da:	e7ca      	b.n	8000672 <_free_r+0x22>
 80006dc:	bd38      	pop	{r3, r4, r5, pc}
 80006de:	bf00      	nop
 80006e0:	200002b8 	.word	0x200002b8

080006e4 <sbrk_aligned>:
 80006e4:	b570      	push	{r4, r5, r6, lr}
 80006e6:	4e0f      	ldr	r6, [pc, #60]	@ (8000724 <sbrk_aligned+0x40>)
 80006e8:	460c      	mov	r4, r1
 80006ea:	6831      	ldr	r1, [r6, #0]
 80006ec:	4605      	mov	r5, r0
 80006ee:	b911      	cbnz	r1, 80006f6 <sbrk_aligned+0x12>
 80006f0:	f000 fba6 	bl	8000e40 <_sbrk_r>
 80006f4:	6030      	str	r0, [r6, #0]
 80006f6:	4621      	mov	r1, r4
 80006f8:	4628      	mov	r0, r5
 80006fa:	f000 fba1 	bl	8000e40 <_sbrk_r>
 80006fe:	1c43      	adds	r3, r0, #1
 8000700:	d103      	bne.n	800070a <sbrk_aligned+0x26>
 8000702:	f04f 34ff 	mov.w	r4, #4294967295
 8000706:	4620      	mov	r0, r4
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	1cc4      	adds	r4, r0, #3
 800070c:	f024 0403 	bic.w	r4, r4, #3
 8000710:	42a0      	cmp	r0, r4
 8000712:	d0f8      	beq.n	8000706 <sbrk_aligned+0x22>
 8000714:	1a21      	subs	r1, r4, r0
 8000716:	4628      	mov	r0, r5
 8000718:	f000 fb92 	bl	8000e40 <_sbrk_r>
 800071c:	3001      	adds	r0, #1
 800071e:	d1f2      	bne.n	8000706 <sbrk_aligned+0x22>
 8000720:	e7ef      	b.n	8000702 <sbrk_aligned+0x1e>
 8000722:	bf00      	nop
 8000724:	200002b4 	.word	0x200002b4

08000728 <_malloc_r>:
 8000728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800072c:	1ccd      	adds	r5, r1, #3
 800072e:	f025 0503 	bic.w	r5, r5, #3
 8000732:	3508      	adds	r5, #8
 8000734:	2d0c      	cmp	r5, #12
 8000736:	bf38      	it	cc
 8000738:	250c      	movcc	r5, #12
 800073a:	2d00      	cmp	r5, #0
 800073c:	4606      	mov	r6, r0
 800073e:	db01      	blt.n	8000744 <_malloc_r+0x1c>
 8000740:	42a9      	cmp	r1, r5
 8000742:	d904      	bls.n	800074e <_malloc_r+0x26>
 8000744:	230c      	movs	r3, #12
 8000746:	6033      	str	r3, [r6, #0]
 8000748:	2000      	movs	r0, #0
 800074a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800074e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000824 <_malloc_r+0xfc>
 8000752:	f000 f869 	bl	8000828 <__malloc_lock>
 8000756:	f8d8 3000 	ldr.w	r3, [r8]
 800075a:	461c      	mov	r4, r3
 800075c:	bb44      	cbnz	r4, 80007b0 <_malloc_r+0x88>
 800075e:	4629      	mov	r1, r5
 8000760:	4630      	mov	r0, r6
 8000762:	f7ff ffbf 	bl	80006e4 <sbrk_aligned>
 8000766:	1c43      	adds	r3, r0, #1
 8000768:	4604      	mov	r4, r0
 800076a:	d158      	bne.n	800081e <_malloc_r+0xf6>
 800076c:	f8d8 4000 	ldr.w	r4, [r8]
 8000770:	4627      	mov	r7, r4
 8000772:	2f00      	cmp	r7, #0
 8000774:	d143      	bne.n	80007fe <_malloc_r+0xd6>
 8000776:	2c00      	cmp	r4, #0
 8000778:	d04b      	beq.n	8000812 <_malloc_r+0xea>
 800077a:	6823      	ldr	r3, [r4, #0]
 800077c:	4639      	mov	r1, r7
 800077e:	4630      	mov	r0, r6
 8000780:	eb04 0903 	add.w	r9, r4, r3
 8000784:	f000 fb5c 	bl	8000e40 <_sbrk_r>
 8000788:	4581      	cmp	r9, r0
 800078a:	d142      	bne.n	8000812 <_malloc_r+0xea>
 800078c:	6821      	ldr	r1, [r4, #0]
 800078e:	1a6d      	subs	r5, r5, r1
 8000790:	4629      	mov	r1, r5
 8000792:	4630      	mov	r0, r6
 8000794:	f7ff ffa6 	bl	80006e4 <sbrk_aligned>
 8000798:	3001      	adds	r0, #1
 800079a:	d03a      	beq.n	8000812 <_malloc_r+0xea>
 800079c:	6823      	ldr	r3, [r4, #0]
 800079e:	442b      	add	r3, r5
 80007a0:	6023      	str	r3, [r4, #0]
 80007a2:	f8d8 3000 	ldr.w	r3, [r8]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	bb62      	cbnz	r2, 8000804 <_malloc_r+0xdc>
 80007aa:	f8c8 7000 	str.w	r7, [r8]
 80007ae:	e00f      	b.n	80007d0 <_malloc_r+0xa8>
 80007b0:	6822      	ldr	r2, [r4, #0]
 80007b2:	1b52      	subs	r2, r2, r5
 80007b4:	d420      	bmi.n	80007f8 <_malloc_r+0xd0>
 80007b6:	2a0b      	cmp	r2, #11
 80007b8:	d917      	bls.n	80007ea <_malloc_r+0xc2>
 80007ba:	1961      	adds	r1, r4, r5
 80007bc:	42a3      	cmp	r3, r4
 80007be:	6025      	str	r5, [r4, #0]
 80007c0:	bf18      	it	ne
 80007c2:	6059      	strne	r1, [r3, #4]
 80007c4:	6863      	ldr	r3, [r4, #4]
 80007c6:	bf08      	it	eq
 80007c8:	f8c8 1000 	streq.w	r1, [r8]
 80007cc:	5162      	str	r2, [r4, r5]
 80007ce:	604b      	str	r3, [r1, #4]
 80007d0:	4630      	mov	r0, r6
 80007d2:	f000 f82f 	bl	8000834 <__malloc_unlock>
 80007d6:	f104 000b 	add.w	r0, r4, #11
 80007da:	1d23      	adds	r3, r4, #4
 80007dc:	f020 0007 	bic.w	r0, r0, #7
 80007e0:	1ac2      	subs	r2, r0, r3
 80007e2:	bf1c      	itt	ne
 80007e4:	1a1b      	subne	r3, r3, r0
 80007e6:	50a3      	strne	r3, [r4, r2]
 80007e8:	e7af      	b.n	800074a <_malloc_r+0x22>
 80007ea:	6862      	ldr	r2, [r4, #4]
 80007ec:	42a3      	cmp	r3, r4
 80007ee:	bf0c      	ite	eq
 80007f0:	f8c8 2000 	streq.w	r2, [r8]
 80007f4:	605a      	strne	r2, [r3, #4]
 80007f6:	e7eb      	b.n	80007d0 <_malloc_r+0xa8>
 80007f8:	4623      	mov	r3, r4
 80007fa:	6864      	ldr	r4, [r4, #4]
 80007fc:	e7ae      	b.n	800075c <_malloc_r+0x34>
 80007fe:	463c      	mov	r4, r7
 8000800:	687f      	ldr	r7, [r7, #4]
 8000802:	e7b6      	b.n	8000772 <_malloc_r+0x4a>
 8000804:	461a      	mov	r2, r3
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	42a3      	cmp	r3, r4
 800080a:	d1fb      	bne.n	8000804 <_malloc_r+0xdc>
 800080c:	2300      	movs	r3, #0
 800080e:	6053      	str	r3, [r2, #4]
 8000810:	e7de      	b.n	80007d0 <_malloc_r+0xa8>
 8000812:	230c      	movs	r3, #12
 8000814:	6033      	str	r3, [r6, #0]
 8000816:	4630      	mov	r0, r6
 8000818:	f000 f80c 	bl	8000834 <__malloc_unlock>
 800081c:	e794      	b.n	8000748 <_malloc_r+0x20>
 800081e:	6005      	str	r5, [r0, #0]
 8000820:	e7d6      	b.n	80007d0 <_malloc_r+0xa8>
 8000822:	bf00      	nop
 8000824:	200002b8 	.word	0x200002b8

08000828 <__malloc_lock>:
 8000828:	4801      	ldr	r0, [pc, #4]	@ (8000830 <__malloc_lock+0x8>)
 800082a:	f7ff bf07 	b.w	800063c <__retarget_lock_acquire_recursive>
 800082e:	bf00      	nop
 8000830:	200002b0 	.word	0x200002b0

08000834 <__malloc_unlock>:
 8000834:	4801      	ldr	r0, [pc, #4]	@ (800083c <__malloc_unlock+0x8>)
 8000836:	f7ff bf02 	b.w	800063e <__retarget_lock_release_recursive>
 800083a:	bf00      	nop
 800083c:	200002b0 	.word	0x200002b0

08000840 <__ssputs_r>:
 8000840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000844:	688e      	ldr	r6, [r1, #8]
 8000846:	461f      	mov	r7, r3
 8000848:	42be      	cmp	r6, r7
 800084a:	680b      	ldr	r3, [r1, #0]
 800084c:	4682      	mov	sl, r0
 800084e:	460c      	mov	r4, r1
 8000850:	4690      	mov	r8, r2
 8000852:	d82d      	bhi.n	80008b0 <__ssputs_r+0x70>
 8000854:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000858:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800085c:	d026      	beq.n	80008ac <__ssputs_r+0x6c>
 800085e:	6965      	ldr	r5, [r4, #20]
 8000860:	6909      	ldr	r1, [r1, #16]
 8000862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000866:	eba3 0901 	sub.w	r9, r3, r1
 800086a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800086e:	1c7b      	adds	r3, r7, #1
 8000870:	444b      	add	r3, r9
 8000872:	106d      	asrs	r5, r5, #1
 8000874:	429d      	cmp	r5, r3
 8000876:	bf38      	it	cc
 8000878:	461d      	movcc	r5, r3
 800087a:	0553      	lsls	r3, r2, #21
 800087c:	d527      	bpl.n	80008ce <__ssputs_r+0x8e>
 800087e:	4629      	mov	r1, r5
 8000880:	f7ff ff52 	bl	8000728 <_malloc_r>
 8000884:	4606      	mov	r6, r0
 8000886:	b360      	cbz	r0, 80008e2 <__ssputs_r+0xa2>
 8000888:	6921      	ldr	r1, [r4, #16]
 800088a:	464a      	mov	r2, r9
 800088c:	f000 fae8 	bl	8000e60 <memcpy>
 8000890:	89a3      	ldrh	r3, [r4, #12]
 8000892:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089a:	81a3      	strh	r3, [r4, #12]
 800089c:	6126      	str	r6, [r4, #16]
 800089e:	6165      	str	r5, [r4, #20]
 80008a0:	444e      	add	r6, r9
 80008a2:	eba5 0509 	sub.w	r5, r5, r9
 80008a6:	6026      	str	r6, [r4, #0]
 80008a8:	60a5      	str	r5, [r4, #8]
 80008aa:	463e      	mov	r6, r7
 80008ac:	42be      	cmp	r6, r7
 80008ae:	d900      	bls.n	80008b2 <__ssputs_r+0x72>
 80008b0:	463e      	mov	r6, r7
 80008b2:	6820      	ldr	r0, [r4, #0]
 80008b4:	4632      	mov	r2, r6
 80008b6:	4641      	mov	r1, r8
 80008b8:	f000 faa8 	bl	8000e0c <memmove>
 80008bc:	68a3      	ldr	r3, [r4, #8]
 80008be:	1b9b      	subs	r3, r3, r6
 80008c0:	60a3      	str	r3, [r4, #8]
 80008c2:	6823      	ldr	r3, [r4, #0]
 80008c4:	4433      	add	r3, r6
 80008c6:	6023      	str	r3, [r4, #0]
 80008c8:	2000      	movs	r0, #0
 80008ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ce:	462a      	mov	r2, r5
 80008d0:	f000 fad4 	bl	8000e7c <_realloc_r>
 80008d4:	4606      	mov	r6, r0
 80008d6:	2800      	cmp	r0, #0
 80008d8:	d1e0      	bne.n	800089c <__ssputs_r+0x5c>
 80008da:	6921      	ldr	r1, [r4, #16]
 80008dc:	4650      	mov	r0, sl
 80008de:	f7ff feb7 	bl	8000650 <_free_r>
 80008e2:	230c      	movs	r3, #12
 80008e4:	f8ca 3000 	str.w	r3, [sl]
 80008e8:	89a3      	ldrh	r3, [r4, #12]
 80008ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008ee:	81a3      	strh	r3, [r4, #12]
 80008f0:	f04f 30ff 	mov.w	r0, #4294967295
 80008f4:	e7e9      	b.n	80008ca <__ssputs_r+0x8a>
	...

080008f8 <_svfiprintf_r>:
 80008f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008fc:	4698      	mov	r8, r3
 80008fe:	898b      	ldrh	r3, [r1, #12]
 8000900:	061b      	lsls	r3, r3, #24
 8000902:	b09d      	sub	sp, #116	@ 0x74
 8000904:	4607      	mov	r7, r0
 8000906:	460d      	mov	r5, r1
 8000908:	4614      	mov	r4, r2
 800090a:	d510      	bpl.n	800092e <_svfiprintf_r+0x36>
 800090c:	690b      	ldr	r3, [r1, #16]
 800090e:	b973      	cbnz	r3, 800092e <_svfiprintf_r+0x36>
 8000910:	2140      	movs	r1, #64	@ 0x40
 8000912:	f7ff ff09 	bl	8000728 <_malloc_r>
 8000916:	6028      	str	r0, [r5, #0]
 8000918:	6128      	str	r0, [r5, #16]
 800091a:	b930      	cbnz	r0, 800092a <_svfiprintf_r+0x32>
 800091c:	230c      	movs	r3, #12
 800091e:	603b      	str	r3, [r7, #0]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	b01d      	add	sp, #116	@ 0x74
 8000926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800092a:	2340      	movs	r3, #64	@ 0x40
 800092c:	616b      	str	r3, [r5, #20]
 800092e:	2300      	movs	r3, #0
 8000930:	9309      	str	r3, [sp, #36]	@ 0x24
 8000932:	2320      	movs	r3, #32
 8000934:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000938:	f8cd 800c 	str.w	r8, [sp, #12]
 800093c:	2330      	movs	r3, #48	@ 0x30
 800093e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000adc <_svfiprintf_r+0x1e4>
 8000942:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000946:	f04f 0901 	mov.w	r9, #1
 800094a:	4623      	mov	r3, r4
 800094c:	469a      	mov	sl, r3
 800094e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000952:	b10a      	cbz	r2, 8000958 <_svfiprintf_r+0x60>
 8000954:	2a25      	cmp	r2, #37	@ 0x25
 8000956:	d1f9      	bne.n	800094c <_svfiprintf_r+0x54>
 8000958:	ebba 0b04 	subs.w	fp, sl, r4
 800095c:	d00b      	beq.n	8000976 <_svfiprintf_r+0x7e>
 800095e:	465b      	mov	r3, fp
 8000960:	4622      	mov	r2, r4
 8000962:	4629      	mov	r1, r5
 8000964:	4638      	mov	r0, r7
 8000966:	f7ff ff6b 	bl	8000840 <__ssputs_r>
 800096a:	3001      	adds	r0, #1
 800096c:	f000 80a7 	beq.w	8000abe <_svfiprintf_r+0x1c6>
 8000970:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000972:	445a      	add	r2, fp
 8000974:	9209      	str	r2, [sp, #36]	@ 0x24
 8000976:	f89a 3000 	ldrb.w	r3, [sl]
 800097a:	2b00      	cmp	r3, #0
 800097c:	f000 809f 	beq.w	8000abe <_svfiprintf_r+0x1c6>
 8000980:	2300      	movs	r3, #0
 8000982:	f04f 32ff 	mov.w	r2, #4294967295
 8000986:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800098a:	f10a 0a01 	add.w	sl, sl, #1
 800098e:	9304      	str	r3, [sp, #16]
 8000990:	9307      	str	r3, [sp, #28]
 8000992:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000996:	931a      	str	r3, [sp, #104]	@ 0x68
 8000998:	4654      	mov	r4, sl
 800099a:	2205      	movs	r2, #5
 800099c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80009a0:	484e      	ldr	r0, [pc, #312]	@ (8000adc <_svfiprintf_r+0x1e4>)
 80009a2:	f7ff fc1d 	bl	80001e0 <memchr>
 80009a6:	9a04      	ldr	r2, [sp, #16]
 80009a8:	b9d8      	cbnz	r0, 80009e2 <_svfiprintf_r+0xea>
 80009aa:	06d0      	lsls	r0, r2, #27
 80009ac:	bf44      	itt	mi
 80009ae:	2320      	movmi	r3, #32
 80009b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009b4:	0711      	lsls	r1, r2, #28
 80009b6:	bf44      	itt	mi
 80009b8:	232b      	movmi	r3, #43	@ 0x2b
 80009ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80009be:	f89a 3000 	ldrb.w	r3, [sl]
 80009c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80009c4:	d015      	beq.n	80009f2 <_svfiprintf_r+0xfa>
 80009c6:	9a07      	ldr	r2, [sp, #28]
 80009c8:	4654      	mov	r4, sl
 80009ca:	2000      	movs	r0, #0
 80009cc:	f04f 0c0a 	mov.w	ip, #10
 80009d0:	4621      	mov	r1, r4
 80009d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009d6:	3b30      	subs	r3, #48	@ 0x30
 80009d8:	2b09      	cmp	r3, #9
 80009da:	d94b      	bls.n	8000a74 <_svfiprintf_r+0x17c>
 80009dc:	b1b0      	cbz	r0, 8000a0c <_svfiprintf_r+0x114>
 80009de:	9207      	str	r2, [sp, #28]
 80009e0:	e014      	b.n	8000a0c <_svfiprintf_r+0x114>
 80009e2:	eba0 0308 	sub.w	r3, r0, r8
 80009e6:	fa09 f303 	lsl.w	r3, r9, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	9304      	str	r3, [sp, #16]
 80009ee:	46a2      	mov	sl, r4
 80009f0:	e7d2      	b.n	8000998 <_svfiprintf_r+0xa0>
 80009f2:	9b03      	ldr	r3, [sp, #12]
 80009f4:	1d19      	adds	r1, r3, #4
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	9103      	str	r1, [sp, #12]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bfbb      	ittet	lt
 80009fe:	425b      	neglt	r3, r3
 8000a00:	f042 0202 	orrlt.w	r2, r2, #2
 8000a04:	9307      	strge	r3, [sp, #28]
 8000a06:	9307      	strlt	r3, [sp, #28]
 8000a08:	bfb8      	it	lt
 8000a0a:	9204      	strlt	r2, [sp, #16]
 8000a0c:	7823      	ldrb	r3, [r4, #0]
 8000a0e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a10:	d10a      	bne.n	8000a28 <_svfiprintf_r+0x130>
 8000a12:	7863      	ldrb	r3, [r4, #1]
 8000a14:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a16:	d132      	bne.n	8000a7e <_svfiprintf_r+0x186>
 8000a18:	9b03      	ldr	r3, [sp, #12]
 8000a1a:	1d1a      	adds	r2, r3, #4
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	9203      	str	r2, [sp, #12]
 8000a20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a24:	3402      	adds	r4, #2
 8000a26:	9305      	str	r3, [sp, #20]
 8000a28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000aec <_svfiprintf_r+0x1f4>
 8000a2c:	7821      	ldrb	r1, [r4, #0]
 8000a2e:	2203      	movs	r2, #3
 8000a30:	4650      	mov	r0, sl
 8000a32:	f7ff fbd5 	bl	80001e0 <memchr>
 8000a36:	b138      	cbz	r0, 8000a48 <_svfiprintf_r+0x150>
 8000a38:	9b04      	ldr	r3, [sp, #16]
 8000a3a:	eba0 000a 	sub.w	r0, r0, sl
 8000a3e:	2240      	movs	r2, #64	@ 0x40
 8000a40:	4082      	lsls	r2, r0
 8000a42:	4313      	orrs	r3, r2
 8000a44:	3401      	adds	r4, #1
 8000a46:	9304      	str	r3, [sp, #16]
 8000a48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a4c:	4824      	ldr	r0, [pc, #144]	@ (8000ae0 <_svfiprintf_r+0x1e8>)
 8000a4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a52:	2206      	movs	r2, #6
 8000a54:	f7ff fbc4 	bl	80001e0 <memchr>
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d036      	beq.n	8000aca <_svfiprintf_r+0x1d2>
 8000a5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <_svfiprintf_r+0x1ec>)
 8000a5e:	bb1b      	cbnz	r3, 8000aa8 <_svfiprintf_r+0x1b0>
 8000a60:	9b03      	ldr	r3, [sp, #12]
 8000a62:	3307      	adds	r3, #7
 8000a64:	f023 0307 	bic.w	r3, r3, #7
 8000a68:	3308      	adds	r3, #8
 8000a6a:	9303      	str	r3, [sp, #12]
 8000a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a6e:	4433      	add	r3, r6
 8000a70:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a72:	e76a      	b.n	800094a <_svfiprintf_r+0x52>
 8000a74:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a78:	460c      	mov	r4, r1
 8000a7a:	2001      	movs	r0, #1
 8000a7c:	e7a8      	b.n	80009d0 <_svfiprintf_r+0xd8>
 8000a7e:	2300      	movs	r3, #0
 8000a80:	3401      	adds	r4, #1
 8000a82:	9305      	str	r3, [sp, #20]
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 0c0a 	mov.w	ip, #10
 8000a8a:	4620      	mov	r0, r4
 8000a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a90:	3a30      	subs	r2, #48	@ 0x30
 8000a92:	2a09      	cmp	r2, #9
 8000a94:	d903      	bls.n	8000a9e <_svfiprintf_r+0x1a6>
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d0c6      	beq.n	8000a28 <_svfiprintf_r+0x130>
 8000a9a:	9105      	str	r1, [sp, #20]
 8000a9c:	e7c4      	b.n	8000a28 <_svfiprintf_r+0x130>
 8000a9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e7f0      	b.n	8000a8a <_svfiprintf_r+0x192>
 8000aa8:	ab03      	add	r3, sp, #12
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	462a      	mov	r2, r5
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <_svfiprintf_r+0x1f0>)
 8000ab0:	a904      	add	r1, sp, #16
 8000ab2:	4638      	mov	r0, r7
 8000ab4:	f3af 8000 	nop.w
 8000ab8:	1c42      	adds	r2, r0, #1
 8000aba:	4606      	mov	r6, r0
 8000abc:	d1d6      	bne.n	8000a6c <_svfiprintf_r+0x174>
 8000abe:	89ab      	ldrh	r3, [r5, #12]
 8000ac0:	065b      	lsls	r3, r3, #25
 8000ac2:	f53f af2d 	bmi.w	8000920 <_svfiprintf_r+0x28>
 8000ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ac8:	e72c      	b.n	8000924 <_svfiprintf_r+0x2c>
 8000aca:	ab03      	add	r3, sp, #12
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	462a      	mov	r2, r5
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <_svfiprintf_r+0x1f0>)
 8000ad2:	a904      	add	r1, sp, #16
 8000ad4:	4638      	mov	r0, r7
 8000ad6:	f000 f879 	bl	8000bcc <_printf_i>
 8000ada:	e7ed      	b.n	8000ab8 <_svfiprintf_r+0x1c0>
 8000adc:	08000f92 	.word	0x08000f92
 8000ae0:	08000f9c 	.word	0x08000f9c
 8000ae4:	00000000 	.word	0x00000000
 8000ae8:	08000841 	.word	0x08000841
 8000aec:	08000f98 	.word	0x08000f98

08000af0 <_printf_common>:
 8000af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af4:	4616      	mov	r6, r2
 8000af6:	4698      	mov	r8, r3
 8000af8:	688a      	ldr	r2, [r1, #8]
 8000afa:	690b      	ldr	r3, [r1, #16]
 8000afc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b00:	4293      	cmp	r3, r2
 8000b02:	bfb8      	it	lt
 8000b04:	4613      	movlt	r3, r2
 8000b06:	6033      	str	r3, [r6, #0]
 8000b08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b0c:	4607      	mov	r7, r0
 8000b0e:	460c      	mov	r4, r1
 8000b10:	b10a      	cbz	r2, 8000b16 <_printf_common+0x26>
 8000b12:	3301      	adds	r3, #1
 8000b14:	6033      	str	r3, [r6, #0]
 8000b16:	6823      	ldr	r3, [r4, #0]
 8000b18:	0699      	lsls	r1, r3, #26
 8000b1a:	bf42      	ittt	mi
 8000b1c:	6833      	ldrmi	r3, [r6, #0]
 8000b1e:	3302      	addmi	r3, #2
 8000b20:	6033      	strmi	r3, [r6, #0]
 8000b22:	6825      	ldr	r5, [r4, #0]
 8000b24:	f015 0506 	ands.w	r5, r5, #6
 8000b28:	d106      	bne.n	8000b38 <_printf_common+0x48>
 8000b2a:	f104 0a19 	add.w	sl, r4, #25
 8000b2e:	68e3      	ldr	r3, [r4, #12]
 8000b30:	6832      	ldr	r2, [r6, #0]
 8000b32:	1a9b      	subs	r3, r3, r2
 8000b34:	42ab      	cmp	r3, r5
 8000b36:	dc26      	bgt.n	8000b86 <_printf_common+0x96>
 8000b38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000b3c:	6822      	ldr	r2, [r4, #0]
 8000b3e:	3b00      	subs	r3, #0
 8000b40:	bf18      	it	ne
 8000b42:	2301      	movne	r3, #1
 8000b44:	0692      	lsls	r2, r2, #26
 8000b46:	d42b      	bmi.n	8000ba0 <_printf_common+0xb0>
 8000b48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000b4c:	4641      	mov	r1, r8
 8000b4e:	4638      	mov	r0, r7
 8000b50:	47c8      	blx	r9
 8000b52:	3001      	adds	r0, #1
 8000b54:	d01e      	beq.n	8000b94 <_printf_common+0xa4>
 8000b56:	6823      	ldr	r3, [r4, #0]
 8000b58:	6922      	ldr	r2, [r4, #16]
 8000b5a:	f003 0306 	and.w	r3, r3, #6
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf02      	ittt	eq
 8000b62:	68e5      	ldreq	r5, [r4, #12]
 8000b64:	6833      	ldreq	r3, [r6, #0]
 8000b66:	1aed      	subeq	r5, r5, r3
 8000b68:	68a3      	ldr	r3, [r4, #8]
 8000b6a:	bf0c      	ite	eq
 8000b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000b70:	2500      	movne	r5, #0
 8000b72:	4293      	cmp	r3, r2
 8000b74:	bfc4      	itt	gt
 8000b76:	1a9b      	subgt	r3, r3, r2
 8000b78:	18ed      	addgt	r5, r5, r3
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	341a      	adds	r4, #26
 8000b7e:	42b5      	cmp	r5, r6
 8000b80:	d11a      	bne.n	8000bb8 <_printf_common+0xc8>
 8000b82:	2000      	movs	r0, #0
 8000b84:	e008      	b.n	8000b98 <_printf_common+0xa8>
 8000b86:	2301      	movs	r3, #1
 8000b88:	4652      	mov	r2, sl
 8000b8a:	4641      	mov	r1, r8
 8000b8c:	4638      	mov	r0, r7
 8000b8e:	47c8      	blx	r9
 8000b90:	3001      	adds	r0, #1
 8000b92:	d103      	bne.n	8000b9c <_printf_common+0xac>
 8000b94:	f04f 30ff 	mov.w	r0, #4294967295
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	3501      	adds	r5, #1
 8000b9e:	e7c6      	b.n	8000b2e <_printf_common+0x3e>
 8000ba0:	18e1      	adds	r1, r4, r3
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	2030      	movs	r0, #48	@ 0x30
 8000ba6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000baa:	4422      	add	r2, r4
 8000bac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000bb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000bb4:	3302      	adds	r3, #2
 8000bb6:	e7c7      	b.n	8000b48 <_printf_common+0x58>
 8000bb8:	2301      	movs	r3, #1
 8000bba:	4622      	mov	r2, r4
 8000bbc:	4641      	mov	r1, r8
 8000bbe:	4638      	mov	r0, r7
 8000bc0:	47c8      	blx	r9
 8000bc2:	3001      	adds	r0, #1
 8000bc4:	d0e6      	beq.n	8000b94 <_printf_common+0xa4>
 8000bc6:	3601      	adds	r6, #1
 8000bc8:	e7d9      	b.n	8000b7e <_printf_common+0x8e>
	...

08000bcc <_printf_i>:
 8000bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	7e0f      	ldrb	r7, [r1, #24]
 8000bd2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000bd4:	2f78      	cmp	r7, #120	@ 0x78
 8000bd6:	4691      	mov	r9, r2
 8000bd8:	4680      	mov	r8, r0
 8000bda:	460c      	mov	r4, r1
 8000bdc:	469a      	mov	sl, r3
 8000bde:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000be2:	d807      	bhi.n	8000bf4 <_printf_i+0x28>
 8000be4:	2f62      	cmp	r7, #98	@ 0x62
 8000be6:	d80a      	bhi.n	8000bfe <_printf_i+0x32>
 8000be8:	2f00      	cmp	r7, #0
 8000bea:	f000 80d2 	beq.w	8000d92 <_printf_i+0x1c6>
 8000bee:	2f58      	cmp	r7, #88	@ 0x58
 8000bf0:	f000 80b9 	beq.w	8000d66 <_printf_i+0x19a>
 8000bf4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000bf8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000bfc:	e03a      	b.n	8000c74 <_printf_i+0xa8>
 8000bfe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c02:	2b15      	cmp	r3, #21
 8000c04:	d8f6      	bhi.n	8000bf4 <_printf_i+0x28>
 8000c06:	a101      	add	r1, pc, #4	@ (adr r1, 8000c0c <_printf_i+0x40>)
 8000c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c0c:	08000c65 	.word	0x08000c65
 8000c10:	08000c79 	.word	0x08000c79
 8000c14:	08000bf5 	.word	0x08000bf5
 8000c18:	08000bf5 	.word	0x08000bf5
 8000c1c:	08000bf5 	.word	0x08000bf5
 8000c20:	08000bf5 	.word	0x08000bf5
 8000c24:	08000c79 	.word	0x08000c79
 8000c28:	08000bf5 	.word	0x08000bf5
 8000c2c:	08000bf5 	.word	0x08000bf5
 8000c30:	08000bf5 	.word	0x08000bf5
 8000c34:	08000bf5 	.word	0x08000bf5
 8000c38:	08000d79 	.word	0x08000d79
 8000c3c:	08000ca3 	.word	0x08000ca3
 8000c40:	08000d33 	.word	0x08000d33
 8000c44:	08000bf5 	.word	0x08000bf5
 8000c48:	08000bf5 	.word	0x08000bf5
 8000c4c:	08000d9b 	.word	0x08000d9b
 8000c50:	08000bf5 	.word	0x08000bf5
 8000c54:	08000ca3 	.word	0x08000ca3
 8000c58:	08000bf5 	.word	0x08000bf5
 8000c5c:	08000bf5 	.word	0x08000bf5
 8000c60:	08000d3b 	.word	0x08000d3b
 8000c64:	6833      	ldr	r3, [r6, #0]
 8000c66:	1d1a      	adds	r2, r3, #4
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	6032      	str	r2, [r6, #0]
 8000c6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000c74:	2301      	movs	r3, #1
 8000c76:	e09d      	b.n	8000db4 <_printf_i+0x1e8>
 8000c78:	6833      	ldr	r3, [r6, #0]
 8000c7a:	6820      	ldr	r0, [r4, #0]
 8000c7c:	1d19      	adds	r1, r3, #4
 8000c7e:	6031      	str	r1, [r6, #0]
 8000c80:	0606      	lsls	r6, r0, #24
 8000c82:	d501      	bpl.n	8000c88 <_printf_i+0xbc>
 8000c84:	681d      	ldr	r5, [r3, #0]
 8000c86:	e003      	b.n	8000c90 <_printf_i+0xc4>
 8000c88:	0645      	lsls	r5, r0, #25
 8000c8a:	d5fb      	bpl.n	8000c84 <_printf_i+0xb8>
 8000c8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c90:	2d00      	cmp	r5, #0
 8000c92:	da03      	bge.n	8000c9c <_printf_i+0xd0>
 8000c94:	232d      	movs	r3, #45	@ 0x2d
 8000c96:	426d      	negs	r5, r5
 8000c98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000c9c:	4859      	ldr	r0, [pc, #356]	@ (8000e04 <_printf_i+0x238>)
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	e011      	b.n	8000cc6 <_printf_i+0xfa>
 8000ca2:	6821      	ldr	r1, [r4, #0]
 8000ca4:	6833      	ldr	r3, [r6, #0]
 8000ca6:	0608      	lsls	r0, r1, #24
 8000ca8:	f853 5b04 	ldr.w	r5, [r3], #4
 8000cac:	d402      	bmi.n	8000cb4 <_printf_i+0xe8>
 8000cae:	0649      	lsls	r1, r1, #25
 8000cb0:	bf48      	it	mi
 8000cb2:	b2ad      	uxthmi	r5, r5
 8000cb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8000cb6:	4853      	ldr	r0, [pc, #332]	@ (8000e04 <_printf_i+0x238>)
 8000cb8:	6033      	str	r3, [r6, #0]
 8000cba:	bf14      	ite	ne
 8000cbc:	230a      	movne	r3, #10
 8000cbe:	2308      	moveq	r3, #8
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000cc6:	6866      	ldr	r6, [r4, #4]
 8000cc8:	60a6      	str	r6, [r4, #8]
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	bfa2      	ittt	ge
 8000cce:	6821      	ldrge	r1, [r4, #0]
 8000cd0:	f021 0104 	bicge.w	r1, r1, #4
 8000cd4:	6021      	strge	r1, [r4, #0]
 8000cd6:	b90d      	cbnz	r5, 8000cdc <_printf_i+0x110>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d04b      	beq.n	8000d74 <_printf_i+0x1a8>
 8000cdc:	4616      	mov	r6, r2
 8000cde:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ce2:	fb03 5711 	mls	r7, r3, r1, r5
 8000ce6:	5dc7      	ldrb	r7, [r0, r7]
 8000ce8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000cec:	462f      	mov	r7, r5
 8000cee:	42bb      	cmp	r3, r7
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	d9f4      	bls.n	8000cde <_printf_i+0x112>
 8000cf4:	2b08      	cmp	r3, #8
 8000cf6:	d10b      	bne.n	8000d10 <_printf_i+0x144>
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	07df      	lsls	r7, r3, #31
 8000cfc:	d508      	bpl.n	8000d10 <_printf_i+0x144>
 8000cfe:	6923      	ldr	r3, [r4, #16]
 8000d00:	6861      	ldr	r1, [r4, #4]
 8000d02:	4299      	cmp	r1, r3
 8000d04:	bfde      	ittt	le
 8000d06:	2330      	movle	r3, #48	@ 0x30
 8000d08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000d10:	1b92      	subs	r2, r2, r6
 8000d12:	6122      	str	r2, [r4, #16]
 8000d14:	f8cd a000 	str.w	sl, [sp]
 8000d18:	464b      	mov	r3, r9
 8000d1a:	aa03      	add	r2, sp, #12
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	4640      	mov	r0, r8
 8000d20:	f7ff fee6 	bl	8000af0 <_printf_common>
 8000d24:	3001      	adds	r0, #1
 8000d26:	d14a      	bne.n	8000dbe <_printf_i+0x1f2>
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	b004      	add	sp, #16
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	6023      	str	r3, [r4, #0]
 8000d3a:	4833      	ldr	r0, [pc, #204]	@ (8000e08 <_printf_i+0x23c>)
 8000d3c:	2778      	movs	r7, #120	@ 0x78
 8000d3e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	6831      	ldr	r1, [r6, #0]
 8000d46:	061f      	lsls	r7, r3, #24
 8000d48:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d4c:	d402      	bmi.n	8000d54 <_printf_i+0x188>
 8000d4e:	065f      	lsls	r7, r3, #25
 8000d50:	bf48      	it	mi
 8000d52:	b2ad      	uxthmi	r5, r5
 8000d54:	6031      	str	r1, [r6, #0]
 8000d56:	07d9      	lsls	r1, r3, #31
 8000d58:	bf44      	itt	mi
 8000d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8000d5e:	6023      	strmi	r3, [r4, #0]
 8000d60:	b11d      	cbz	r5, 8000d6a <_printf_i+0x19e>
 8000d62:	2310      	movs	r3, #16
 8000d64:	e7ac      	b.n	8000cc0 <_printf_i+0xf4>
 8000d66:	4827      	ldr	r0, [pc, #156]	@ (8000e04 <_printf_i+0x238>)
 8000d68:	e7e9      	b.n	8000d3e <_printf_i+0x172>
 8000d6a:	6823      	ldr	r3, [r4, #0]
 8000d6c:	f023 0320 	bic.w	r3, r3, #32
 8000d70:	6023      	str	r3, [r4, #0]
 8000d72:	e7f6      	b.n	8000d62 <_printf_i+0x196>
 8000d74:	4616      	mov	r6, r2
 8000d76:	e7bd      	b.n	8000cf4 <_printf_i+0x128>
 8000d78:	6833      	ldr	r3, [r6, #0]
 8000d7a:	6825      	ldr	r5, [r4, #0]
 8000d7c:	6961      	ldr	r1, [r4, #20]
 8000d7e:	1d18      	adds	r0, r3, #4
 8000d80:	6030      	str	r0, [r6, #0]
 8000d82:	062e      	lsls	r6, r5, #24
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	d501      	bpl.n	8000d8c <_printf_i+0x1c0>
 8000d88:	6019      	str	r1, [r3, #0]
 8000d8a:	e002      	b.n	8000d92 <_printf_i+0x1c6>
 8000d8c:	0668      	lsls	r0, r5, #25
 8000d8e:	d5fb      	bpl.n	8000d88 <_printf_i+0x1bc>
 8000d90:	8019      	strh	r1, [r3, #0]
 8000d92:	2300      	movs	r3, #0
 8000d94:	6123      	str	r3, [r4, #16]
 8000d96:	4616      	mov	r6, r2
 8000d98:	e7bc      	b.n	8000d14 <_printf_i+0x148>
 8000d9a:	6833      	ldr	r3, [r6, #0]
 8000d9c:	1d1a      	adds	r2, r3, #4
 8000d9e:	6032      	str	r2, [r6, #0]
 8000da0:	681e      	ldr	r6, [r3, #0]
 8000da2:	6862      	ldr	r2, [r4, #4]
 8000da4:	2100      	movs	r1, #0
 8000da6:	4630      	mov	r0, r6
 8000da8:	f7ff fa1a 	bl	80001e0 <memchr>
 8000dac:	b108      	cbz	r0, 8000db2 <_printf_i+0x1e6>
 8000dae:	1b80      	subs	r0, r0, r6
 8000db0:	6060      	str	r0, [r4, #4]
 8000db2:	6863      	ldr	r3, [r4, #4]
 8000db4:	6123      	str	r3, [r4, #16]
 8000db6:	2300      	movs	r3, #0
 8000db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dbc:	e7aa      	b.n	8000d14 <_printf_i+0x148>
 8000dbe:	6923      	ldr	r3, [r4, #16]
 8000dc0:	4632      	mov	r2, r6
 8000dc2:	4649      	mov	r1, r9
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	47d0      	blx	sl
 8000dc8:	3001      	adds	r0, #1
 8000dca:	d0ad      	beq.n	8000d28 <_printf_i+0x15c>
 8000dcc:	6823      	ldr	r3, [r4, #0]
 8000dce:	079b      	lsls	r3, r3, #30
 8000dd0:	d413      	bmi.n	8000dfa <_printf_i+0x22e>
 8000dd2:	68e0      	ldr	r0, [r4, #12]
 8000dd4:	9b03      	ldr	r3, [sp, #12]
 8000dd6:	4298      	cmp	r0, r3
 8000dd8:	bfb8      	it	lt
 8000dda:	4618      	movlt	r0, r3
 8000ddc:	e7a6      	b.n	8000d2c <_printf_i+0x160>
 8000dde:	2301      	movs	r3, #1
 8000de0:	4632      	mov	r2, r6
 8000de2:	4649      	mov	r1, r9
 8000de4:	4640      	mov	r0, r8
 8000de6:	47d0      	blx	sl
 8000de8:	3001      	adds	r0, #1
 8000dea:	d09d      	beq.n	8000d28 <_printf_i+0x15c>
 8000dec:	3501      	adds	r5, #1
 8000dee:	68e3      	ldr	r3, [r4, #12]
 8000df0:	9903      	ldr	r1, [sp, #12]
 8000df2:	1a5b      	subs	r3, r3, r1
 8000df4:	42ab      	cmp	r3, r5
 8000df6:	dcf2      	bgt.n	8000dde <_printf_i+0x212>
 8000df8:	e7eb      	b.n	8000dd2 <_printf_i+0x206>
 8000dfa:	2500      	movs	r5, #0
 8000dfc:	f104 0619 	add.w	r6, r4, #25
 8000e00:	e7f5      	b.n	8000dee <_printf_i+0x222>
 8000e02:	bf00      	nop
 8000e04:	08000fa3 	.word	0x08000fa3
 8000e08:	08000fb4 	.word	0x08000fb4

08000e0c <memmove>:
 8000e0c:	4288      	cmp	r0, r1
 8000e0e:	b510      	push	{r4, lr}
 8000e10:	eb01 0402 	add.w	r4, r1, r2
 8000e14:	d902      	bls.n	8000e1c <memmove+0x10>
 8000e16:	4284      	cmp	r4, r0
 8000e18:	4623      	mov	r3, r4
 8000e1a:	d807      	bhi.n	8000e2c <memmove+0x20>
 8000e1c:	1e43      	subs	r3, r0, #1
 8000e1e:	42a1      	cmp	r1, r4
 8000e20:	d008      	beq.n	8000e34 <memmove+0x28>
 8000e22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e2a:	e7f8      	b.n	8000e1e <memmove+0x12>
 8000e2c:	4402      	add	r2, r0
 8000e2e:	4601      	mov	r1, r0
 8000e30:	428a      	cmp	r2, r1
 8000e32:	d100      	bne.n	8000e36 <memmove+0x2a>
 8000e34:	bd10      	pop	{r4, pc}
 8000e36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000e3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000e3e:	e7f7      	b.n	8000e30 <memmove+0x24>

08000e40 <_sbrk_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4d06      	ldr	r5, [pc, #24]	@ (8000e5c <_sbrk_r+0x1c>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	4604      	mov	r4, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	602b      	str	r3, [r5, #0]
 8000e4c:	f000 f84c 	bl	8000ee8 <_sbrk>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	d102      	bne.n	8000e5a <_sbrk_r+0x1a>
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	b103      	cbz	r3, 8000e5a <_sbrk_r+0x1a>
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	200002ac 	.word	0x200002ac

08000e60 <memcpy>:
 8000e60:	440a      	add	r2, r1
 8000e62:	4291      	cmp	r1, r2
 8000e64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e68:	d100      	bne.n	8000e6c <memcpy+0xc>
 8000e6a:	4770      	bx	lr
 8000e6c:	b510      	push	{r4, lr}
 8000e6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e76:	4291      	cmp	r1, r2
 8000e78:	d1f9      	bne.n	8000e6e <memcpy+0xe>
 8000e7a:	bd10      	pop	{r4, pc}

08000e7c <_realloc_r>:
 8000e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e80:	4680      	mov	r8, r0
 8000e82:	4615      	mov	r5, r2
 8000e84:	460c      	mov	r4, r1
 8000e86:	b921      	cbnz	r1, 8000e92 <_realloc_r+0x16>
 8000e88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	f7ff bc4b 	b.w	8000728 <_malloc_r>
 8000e92:	b92a      	cbnz	r2, 8000ea0 <_realloc_r+0x24>
 8000e94:	f7ff fbdc 	bl	8000650 <_free_r>
 8000e98:	2400      	movs	r4, #0
 8000e9a:	4620      	mov	r0, r4
 8000e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ea0:	f000 f81a 	bl	8000ed8 <_malloc_usable_size_r>
 8000ea4:	4285      	cmp	r5, r0
 8000ea6:	4606      	mov	r6, r0
 8000ea8:	d802      	bhi.n	8000eb0 <_realloc_r+0x34>
 8000eaa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000eae:	d8f4      	bhi.n	8000e9a <_realloc_r+0x1e>
 8000eb0:	4629      	mov	r1, r5
 8000eb2:	4640      	mov	r0, r8
 8000eb4:	f7ff fc38 	bl	8000728 <_malloc_r>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d0ec      	beq.n	8000e98 <_realloc_r+0x1c>
 8000ebe:	42b5      	cmp	r5, r6
 8000ec0:	462a      	mov	r2, r5
 8000ec2:	4621      	mov	r1, r4
 8000ec4:	bf28      	it	cs
 8000ec6:	4632      	movcs	r2, r6
 8000ec8:	f7ff ffca 	bl	8000e60 <memcpy>
 8000ecc:	4621      	mov	r1, r4
 8000ece:	4640      	mov	r0, r8
 8000ed0:	f7ff fbbe 	bl	8000650 <_free_r>
 8000ed4:	463c      	mov	r4, r7
 8000ed6:	e7e0      	b.n	8000e9a <_realloc_r+0x1e>

08000ed8 <_malloc_usable_size_r>:
 8000ed8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000edc:	1f18      	subs	r0, r3, #4
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bfbc      	itt	lt
 8000ee2:	580b      	ldrlt	r3, [r1, r0]
 8000ee4:	18c0      	addlt	r0, r0, r3
 8000ee6:	4770      	bx	lr

08000ee8 <_sbrk>:
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <_sbrk+0x14>)
 8000eea:	6811      	ldr	r1, [r2, #0]
 8000eec:	4603      	mov	r3, r0
 8000eee:	b909      	cbnz	r1, 8000ef4 <_sbrk+0xc>
 8000ef0:	4903      	ldr	r1, [pc, #12]	@ (8000f00 <_sbrk+0x18>)
 8000ef2:	6011      	str	r1, [r2, #0]
 8000ef4:	6810      	ldr	r0, [r2, #0]
 8000ef6:	4403      	add	r3, r0
 8000ef8:	6013      	str	r3, [r2, #0]
 8000efa:	4770      	bx	lr
 8000efc:	200002bc 	.word	0x200002bc
 8000f00:	200002c0 	.word	0x200002c0

08000f04 <_init>:
 8000f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f06:	bf00      	nop
 8000f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f0a:	bc08      	pop	{r3}
 8000f0c:	469e      	mov	lr, r3
 8000f0e:	4770      	bx	lr

08000f10 <_fini>:
 8000f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f12:	bf00      	nop
 8000f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f16:	bc08      	pop	{r3}
 8000f18:	469e      	mov	lr, r3
 8000f1a:	4770      	bx	lr

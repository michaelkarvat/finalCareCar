
prints.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dfc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08000f9c  08000f9c  00001f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001000  08001000  00003054  2**0
                  CONTENTS
  4 .ARM          00000008  08001000  08001000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001008  08001008  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001008  08001008  00002008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800100c  0800100c  0000200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08001010  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000054  08001064  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  08001064  000032c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000019f8  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000073f  00000000  00000000  00004a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000140  00000000  00000000  000051c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000d3  00000000  00000000  00005300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000187b6  00000000  00000000  000053d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000225c  00000000  00000000  0001db89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000869e2  00000000  00000000  0001fde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a67c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000858  00000000  00000000  000a680c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000a7064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f84 	.word	0x08000f84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08000f84 	.word	0x08000f84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <EXTI15_10_IRQHandler>:




void EXTI15_10_IRQHandler(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    // Reset the interrupt request flag.
	EXTI->PR |= 0x00002000;
 8000284:	4b06      	ldr	r3, [pc, #24]	@ (80002a0 <EXTI15_10_IRQHandler+0x20>)
 8000286:	695b      	ldr	r3, [r3, #20]
 8000288:	4a05      	ldr	r2, [pc, #20]	@ (80002a0 <EXTI15_10_IRQHandler+0x20>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800028e:	6153      	str	r3, [r2, #20]
    Pressed = TRUE;
 8000290:	4b04      	ldr	r3, [pc, #16]	@ (80002a4 <EXTI15_10_IRQHandler+0x24>)
 8000292:	2201      	movs	r2, #1
 8000294:	601a      	str	r2, [r3, #0]
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40010400 	.word	0x40010400
 80002a4:	20000070 	.word	0x20000070

080002a8 <hx711_gpio_init>:
{
    while(count--);
}

void hx711_gpio_init(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
    // Enable GPIOB clock (bit 18 in AHBENR)
    RCC->AHBENR |= (1 << 18);
 80002ac:	4b0e      	ldr	r3, [pc, #56]	@ (80002e8 <hx711_gpio_init+0x40>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a0d      	ldr	r2, [pc, #52]	@ (80002e8 <hx711_gpio_init+0x40>)
 80002b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002b6:	6153      	str	r3, [r2, #20]
    // Configure PB0 as output (for PD_SCK)
    GPIOB->MODER &= ~(3 << (0*2));
 80002b8:	4b0c      	ldr	r3, [pc, #48]	@ (80002ec <hx711_gpio_init+0x44>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a0b      	ldr	r2, [pc, #44]	@ (80002ec <hx711_gpio_init+0x44>)
 80002be:	f023 0303 	bic.w	r3, r3, #3
 80002c2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (1 << (0*2));
 80002c4:	4b09      	ldr	r3, [pc, #36]	@ (80002ec <hx711_gpio_init+0x44>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a08      	ldr	r2, [pc, #32]	@ (80002ec <hx711_gpio_init+0x44>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
    // Configure PB1 as input (for DOUT)
    GPIOB->MODER &= ~(3 << (1*2));
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <hx711_gpio_init+0x44>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a05      	ldr	r2, [pc, #20]	@ (80002ec <hx711_gpio_init+0x44>)
 80002d6:	f023 030c 	bic.w	r3, r3, #12
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40021000 	.word	0x40021000
 80002ec:	48000400 	.word	0x48000400

080002f0 <HX711_Read>:

unsigned long HX711_Read(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
    unsigned long count = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	607b      	str	r3, [r7, #4]
    uint8_t i;

    // Wait until DOUT goes LOW (data ready)
    while((GPIOB->IDR & HX711_DOUT_PIN) != 0);
 80002fa:	bf00      	nop
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <HX711_Read+0x88>)
 80002fe:	691b      	ldr	r3, [r3, #16]
 8000300:	f003 0302 	and.w	r3, r3, #2
 8000304:	2b00      	cmp	r3, #0
 8000306:	d1f9      	bne.n	80002fc <HX711_Read+0xc>

    // Read 24 bits from HX711
    for(i = 0; i < 24; i++)
 8000308:	2300      	movs	r3, #0
 800030a:	70fb      	strb	r3, [r7, #3]
 800030c:	e01a      	b.n	8000344 <HX711_Read+0x54>
    {
        // PD_SCK high: start bit reading
        GPIOB->ODR |= HX711_PD_SCK_PIN;
 800030e:	4b1a      	ldr	r3, [pc, #104]	@ (8000378 <HX711_Read+0x88>)
 8000310:	695b      	ldr	r3, [r3, #20]
 8000312:	4a19      	ldr	r2, [pc, #100]	@ (8000378 <HX711_Read+0x88>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6153      	str	r3, [r2, #20]
        //hx711_delay(10);

        count = count << 1;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	607b      	str	r3, [r7, #4]

        // PD_SCK low: complete the clock cycle
        GPIOB->ODR &= ~HX711_PD_SCK_PIN;
 8000320:	4b15      	ldr	r3, [pc, #84]	@ (8000378 <HX711_Read+0x88>)
 8000322:	695b      	ldr	r3, [r3, #20]
 8000324:	4a14      	ldr	r2, [pc, #80]	@ (8000378 <HX711_Read+0x88>)
 8000326:	f023 0301 	bic.w	r3, r3, #1
 800032a:	6153      	str	r3, [r2, #20]
        //hx711_delay(10);

        // If DOUT is high, set the least-significant bit
        if(GPIOB->IDR & HX711_DOUT_PIN)
 800032c:	4b12      	ldr	r3, [pc, #72]	@ (8000378 <HX711_Read+0x88>)
 800032e:	691b      	ldr	r3, [r3, #16]
 8000330:	f003 0302 	and.w	r3, r3, #2
 8000334:	2b00      	cmp	r3, #0
 8000336:	d002      	beq.n	800033e <HX711_Read+0x4e>
        {
            count++;
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3301      	adds	r3, #1
 800033c:	607b      	str	r3, [r7, #4]
    for(i = 0; i < 24; i++)
 800033e:	78fb      	ldrb	r3, [r7, #3]
 8000340:	3301      	adds	r3, #1
 8000342:	70fb      	strb	r3, [r7, #3]
 8000344:	78fb      	ldrb	r3, [r7, #3]
 8000346:	2b17      	cmp	r3, #23
 8000348:	d9e1      	bls.n	800030e <HX711_Read+0x1e>
        }
    }

    // Send one extra pulse to set gain/channel (25 pulses = Channel A, gain = 128)
    GPIOB->ODR |= HX711_PD_SCK_PIN;
 800034a:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <HX711_Read+0x88>)
 800034c:	695b      	ldr	r3, [r3, #20]
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <HX711_Read+0x88>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6153      	str	r3, [r2, #20]
    //hx711_delay(10);
    GPIOB->ODR &= ~HX711_PD_SCK_PIN;
 8000356:	4b08      	ldr	r3, [pc, #32]	@ (8000378 <HX711_Read+0x88>)
 8000358:	695b      	ldr	r3, [r3, #20]
 800035a:	4a07      	ldr	r2, [pc, #28]	@ (8000378 <HX711_Read+0x88>)
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	6153      	str	r3, [r2, #20]
    //hx711_delay(10);

    // Convert 24-bit two's complement to proper value
    count ^= 0x800000;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f483 0300 	eor.w	r3, r3, #8388608	@ 0x800000
 8000368:	607b      	str	r3, [r7, #4]

    return count;
 800036a:	687b      	ldr	r3, [r7, #4]
}
 800036c:	4618      	mov	r0, r3
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	48000400 	.word	0x48000400

0800037c <main>:
#include <stdio.h>


/* =================== Main Code =================== */
int main(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
    USART2_init();
 8000382:	f000 f8b3 	bl	80004ec <USART2_init>
    TIMER2_init();
 8000386:	f000 f85d 	bl	8000444 <TIMER2_init>
    hx711_gpio_init();
 800038a:	f7ff ff8d 	bl	80002a8 <hx711_gpio_init>

    print("HX711 interface starting...\r\n");
 800038e:	4808      	ldr	r0, [pc, #32]	@ (80003b0 <main+0x34>)
 8000390:	f000 f894 	bl	80004bc <print>

    while(1)
    {
        // Use Timer2 to trigger the HX711 read periodically (every 1 second)
        if(TIMER2_expired())
 8000394:	f000 f842 	bl	800041c <TIMER2_expired>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0fa      	beq.n	8000394 <main+0x18>
        {
            unsigned long data = HX711_Read();
 800039e:	f7ff ffa7 	bl	80002f0 <HX711_Read>
 80003a2:	6078      	str	r0, [r7, #4]
            print("Weight: %lu\r\n", data);
 80003a4:	6879      	ldr	r1, [r7, #4]
 80003a6:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <main+0x38>)
 80003a8:	f000 f888 	bl	80004bc <print>
        if(TIMER2_expired())
 80003ac:	e7f2      	b.n	8000394 <main+0x18>
 80003ae:	bf00      	nop
 80003b0:	08000f9c 	.word	0x08000f9c
 80003b4:	08000fbc 	.word	0x08000fbc

080003b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	4603      	mov	r3, r0
 80003c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	db0b      	blt.n	80003e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	f003 021f 	and.w	r2, r3, #31
 80003d0:	4907      	ldr	r1, [pc, #28]	@ (80003f0 <__NVIC_EnableIRQ+0x38>)
 80003d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003d6:	095b      	lsrs	r3, r3, #5
 80003d8:	2001      	movs	r0, #1
 80003da:	fa00 f202 	lsl.w	r2, r0, r2
 80003de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003e2:	bf00      	nop
 80003e4:	370c      	adds	r7, #12
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e100 	.word	0xe000e100

080003f4 <TIM2_IRQHandler>:




void TIM2_IRQHandler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	// Clean the interrupt flag.
    TIM2->SR &= ~0x00000001;
 80003f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000402:	f023 0301 	bic.w	r3, r3, #1
 8000406:	6113      	str	r3, [r2, #16]
	// Raise the software flag.
	Expired = TRUE;
 8000408:	4b03      	ldr	r3, [pc, #12]	@ (8000418 <TIM2_IRQHandler+0x24>)
 800040a:	2201      	movs	r2, #1
 800040c:	701a      	strb	r2, [r3, #0]
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	20000074 	.word	0x20000074

0800041c <TIMER2_expired>:




BOOL TIMER2_expired(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
	if(Expired)
 8000420:	4b07      	ldr	r3, [pc, #28]	@ (8000440 <TIMER2_expired+0x24>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d004      	beq.n	8000432 <TIMER2_expired+0x16>
	{
		Expired = FALSE;
 8000428:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <TIMER2_expired+0x24>)
 800042a:	2200      	movs	r2, #0
 800042c:	701a      	strb	r2, [r3, #0]
		return TRUE;
 800042e:	2301      	movs	r3, #1
 8000430:	e000      	b.n	8000434 <TIMER2_expired+0x18>
	}
	else
	{
		return FALSE;
 8000432:	2300      	movs	r3, #0
	}
}
 8000434:	4618      	mov	r0, r3
 8000436:	46bd      	mov	sp, r7
 8000438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000074 	.word	0x20000074

08000444 <TIMER2_init>:




void TIMER2_init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	af00      	add	r7, sp, #0
    // Enable Timer 2 clock (p. 152 in the datasheet).
    RCC->APB1ENR |= 0x00000001;
 8000448:	4b0b      	ldr	r3, [pc, #44]	@ (8000478 <TIMER2_init+0x34>)
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <TIMER2_init+0x34>)
 800044e:	f043 0301 	orr.w	r3, r3, #1
 8000452:	61d3      	str	r3, [r2, #28]
    // Set the frequency of Timer 2.
    // Assuming a clock source of 8 MHz (see pp. 127 and 133 in the datasheet),
    // this will set the timer to tick at a rate of 1 Hz.
    TIM2->ARR = 8000000;
 8000454:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000458:	4a08      	ldr	r2, [pc, #32]	@ (800047c <TIMER2_init+0x38>)
 800045a:	62da      	str	r2, [r3, #44]	@ 0x2c
    // Enable the Timer 2 interrupt.
    TIM2->DIER = 0x00000001;
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	2201      	movs	r2, #1
 8000462:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(TIM2_IRQn);
 8000464:	201c      	movs	r0, #28
 8000466:	f7ff ffa7 	bl	80003b8 <__NVIC_EnableIRQ>
    // Enable Timer 2.
    TIM2->CR1 = 0x00000001;
 800046a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046e:	2201      	movs	r2, #1
 8000470:	601a      	str	r2, [r3, #0]
}
 8000472:	bf00      	nop
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	007a1200 	.word	0x007a1200

08000480 <__NVIC_EnableIRQ>:
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048e:	2b00      	cmp	r3, #0
 8000490:	db0b      	blt.n	80004aa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f003 021f 	and.w	r2, r3, #31
 8000498:	4907      	ldr	r1, [pc, #28]	@ (80004b8 <__NVIC_EnableIRQ+0x38>)
 800049a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800049e:	095b      	lsrs	r3, r3, #5
 80004a0:	2001      	movs	r0, #1
 80004a2:	fa00 f202 	lsl.w	r2, r0, r2
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000e100 	.word	0xe000e100

080004bc <print>:




void print(char *p_format, ...)
{
 80004bc:	b40f      	push	{r0, r1, r2, r3}
 80004be:	b580      	push	{r7, lr}
 80004c0:	b082      	sub	sp, #8
 80004c2:	af00      	add	r7, sp, #0
	va_list p_variables;
	va_start(p_variables, p_format);
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	607b      	str	r3, [r7, #4]
	(void)vsprintf(A_Tx_Buffer, p_format, p_variables);
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	6939      	ldr	r1, [r7, #16]
 80004ce:	4806      	ldr	r0, [pc, #24]	@ (80004e8 <print+0x2c>)
 80004d0:	f000 f8ce 	bl	8000670 <vsiprintf>
    USART2_print(A_Tx_Buffer);
 80004d4:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <print+0x2c>)
 80004d6:	f000 f86b 	bl	80005b0 <USART2_print>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80004e4:	b004      	add	sp, #16
 80004e6:	4770      	bx	lr
 80004e8:	200000f8 	.word	0x200000f8

080004ec <USART2_init>:




void USART2_init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
    // Enable GPIOA clock (p. 148 in the datasheet).
    RCC->AHBENR |= 0x00020000;
 80004f0:	4b13      	ldr	r3, [pc, #76]	@ (8000540 <USART2_init+0x54>)
 80004f2:	695b      	ldr	r3, [r3, #20]
 80004f4:	4a12      	ldr	r2, [pc, #72]	@ (8000540 <USART2_init+0x54>)
 80004f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004fa:	6153      	str	r3, [r2, #20]
    // Enable USART2 clock.
    RCC->APB1ENR |= 0x00020000;
 80004fc:	4b10      	ldr	r3, [pc, #64]	@ (8000540 <USART2_init+0x54>)
 80004fe:	69db      	ldr	r3, [r3, #28]
 8000500:	4a0f      	ldr	r2, [pc, #60]	@ (8000540 <USART2_init+0x54>)
 8000502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000506:	61d3      	str	r3, [r2, #28]
    // Configure GPIOA pins 2 and 3 as alternate function 7, which is USART2.
    GPIOA->MODER |= 0x000000A0;
 8000508:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000512:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000516:	6013      	str	r3, [r2, #0]
    // AFR[0] is the same as AFRL in the reference manual (p. 241),
    // and AFR[1] is the same as AFRH in the reference manual (p. 242).
    GPIOA->AFR[0] |= 0x00007700;
 8000518:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800051c:	6a1b      	ldr	r3, [r3, #32]
 800051e:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000522:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8000526:	6213      	str	r3, [r2, #32]
    USART2->BRR = 833;  // 8 MHz / 9600 baud rate.
 8000528:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <USART2_init+0x58>)
 800052a:	f240 3241 	movw	r2, #833	@ 0x341
 800052e:	60da      	str	r2, [r3, #12]
    // Enable USART2 and its RX and TX functionality.
    // Also enable the RX interrupt.
    USART2->CR1 = 0x0000002D;
 8000530:	4b04      	ldr	r3, [pc, #16]	@ (8000544 <USART2_init+0x58>)
 8000532:	222d      	movs	r2, #45	@ 0x2d
 8000534:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(USART2_IRQn);
 8000536:	2026      	movs	r0, #38	@ 0x26
 8000538:	f7ff ffa2 	bl	8000480 <__NVIC_EnableIRQ>
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40021000 	.word	0x40021000
 8000544:	40004400 	.word	0x40004400

08000548 <USART2_EXTI26_IRQHandler>:




void USART2_EXTI26_IRQHandler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
	char rx_byte;

	// Read the received byte into the buffer.
	// This also clears the interrupt request flag.
    rx_byte = USART2->RDR;
 800054e:	4b13      	ldr	r3, [pc, #76]	@ (800059c <USART2_EXTI26_IRQHandler+0x54>)
 8000550:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000552:	b29b      	uxth	r3, r3
 8000554:	71fb      	strb	r3, [r7, #7]

    // If the user entered '\n', a whole command has been received.
    if(rx_byte == '\n')
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b0a      	cmp	r3, #10
 800055a:	d10a      	bne.n	8000572 <USART2_EXTI26_IRQHandler+0x2a>
    {
    	Command_Received = TRUE;
 800055c:	4b10      	ldr	r3, [pc, #64]	@ (80005a0 <USART2_EXTI26_IRQHandler+0x58>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
    	*P_Loc_In_Rx_Buffer = '\0';
 8000562:	4b10      	ldr	r3, [pc, #64]	@ (80005a4 <USART2_EXTI26_IRQHandler+0x5c>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	2200      	movs	r2, #0
 8000568:	701a      	strb	r2, [r3, #0]
    	P_Loc_In_Rx_Buffer = A_Rx_Buffer;
 800056a:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <USART2_EXTI26_IRQHandler+0x5c>)
 800056c:	4a0e      	ldr	r2, [pc, #56]	@ (80005a8 <USART2_EXTI26_IRQHandler+0x60>)
 800056e:	601a      	str	r2, [r3, #0]
    	return;
 8000570:	e00f      	b.n	8000592 <USART2_EXTI26_IRQHandler+0x4a>
    }

    *P_Loc_In_Rx_Buffer = rx_byte;
 8000572:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <USART2_EXTI26_IRQHandler+0x5c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	79fa      	ldrb	r2, [r7, #7]
 8000578:	701a      	strb	r2, [r3, #0]
    // If the buffer is full, we don't advance the pointer.
    if(P_Loc_In_Rx_Buffer >= P_End_Of_Rx_Buffer)
 800057a:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <USART2_EXTI26_IRQHandler+0x5c>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a0b      	ldr	r2, [pc, #44]	@ (80005ac <USART2_EXTI26_IRQHandler+0x64>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d205      	bcs.n	8000590 <USART2_EXTI26_IRQHandler+0x48>
    {
    	return;
    }
    P_Loc_In_Rx_Buffer++;
 8000584:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <USART2_EXTI26_IRQHandler+0x5c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a06      	ldr	r2, [pc, #24]	@ (80005a4 <USART2_EXTI26_IRQHandler+0x5c>)
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	e000      	b.n	8000592 <USART2_EXTI26_IRQHandler+0x4a>
    	return;
 8000590:	bf00      	nop
}
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr
 800059c:	40004400 	.word	0x40004400
 80005a0:	20000178 	.word	0x20000178
 80005a4:	20000000 	.word	0x20000000
 80005a8:	20000078 	.word	0x20000078
 80005ac:	20000177 	.word	0x20000177

080005b0 <USART2_print>:




void USART2_print(const char *p_data)
{
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	while(*p_data != '\0')
 80005b8:	e00d      	b.n	80005d6 <USART2_print+0x26>
	{
		USART2->TDR = *p_data;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <USART2_print+0x3c>)
 80005c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        p_data++;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	3301      	adds	r3, #1
 80005c6:	607b      	str	r3, [r7, #4]
        while(!(USART2->ISR & 0x00000080));
 80005c8:	bf00      	nop
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <USART2_print+0x3c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <USART2_print+0x1a>
	while(*p_data != '\0')
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d1ed      	bne.n	80005ba <USART2_print+0xa>
	}
}
 80005de:	bf00      	nop
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr
 80005ec:	40004400 	.word	0x40004400

080005f0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f0:	480d      	ldr	r0, [pc, #52]	@ (8000628 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005f2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80005f4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f8:	480c      	ldr	r0, [pc, #48]	@ (800062c <LoopForever+0x6>)
  ldr r1, =_edata
 80005fa:	490d      	ldr	r1, [pc, #52]	@ (8000630 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000634 <LoopForever+0xe>)
  movs r3, #0
 80005fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000600:	e002      	b.n	8000608 <LoopCopyDataInit>

08000602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000606:	3304      	adds	r3, #4

08000608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800060a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800060c:	d3f9      	bcc.n	8000602 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060e:	4a0a      	ldr	r2, [pc, #40]	@ (8000638 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000610:	4c0a      	ldr	r4, [pc, #40]	@ (800063c <LoopForever+0x16>)
  movs r3, #0
 8000612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000614:	e001      	b.n	800061a <LoopFillZerobss>

08000616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000618:	3204      	adds	r2, #4

0800061a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800061a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800061c:	d3fb      	bcc.n	8000616 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800061e:	f000 f831 	bl	8000684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000622:	f7ff feab 	bl	800037c <main>

08000626 <LoopForever>:

LoopForever:
    b LoopForever
 8000626:	e7fe      	b.n	8000626 <LoopForever>
  ldr   r0, =_estack
 8000628:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800062c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000630:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8000634:	08001010 	.word	0x08001010
  ldr r2, =_sbss
 8000638:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 800063c:	200002c8 	.word	0x200002c8

08000640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000640:	e7fe      	b.n	8000640 <ADC1_2_IRQHandler>
	...

08000644 <_vsiprintf_r>:
 8000644:	b500      	push	{lr}
 8000646:	b09b      	sub	sp, #108	@ 0x6c
 8000648:	9100      	str	r1, [sp, #0]
 800064a:	9104      	str	r1, [sp, #16]
 800064c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000650:	9105      	str	r1, [sp, #20]
 8000652:	9102      	str	r1, [sp, #8]
 8000654:	4905      	ldr	r1, [pc, #20]	@ (800066c <_vsiprintf_r+0x28>)
 8000656:	9103      	str	r1, [sp, #12]
 8000658:	4669      	mov	r1, sp
 800065a:	f000 f98d 	bl	8000978 <_svfiprintf_r>
 800065e:	9b00      	ldr	r3, [sp, #0]
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
 8000664:	b01b      	add	sp, #108	@ 0x6c
 8000666:	f85d fb04 	ldr.w	pc, [sp], #4
 800066a:	bf00      	nop
 800066c:	ffff0208 	.word	0xffff0208

08000670 <vsiprintf>:
 8000670:	4613      	mov	r3, r2
 8000672:	460a      	mov	r2, r1
 8000674:	4601      	mov	r1, r0
 8000676:	4802      	ldr	r0, [pc, #8]	@ (8000680 <vsiprintf+0x10>)
 8000678:	6800      	ldr	r0, [r0, #0]
 800067a:	f7ff bfe3 	b.w	8000644 <_vsiprintf_r>
 800067e:	bf00      	nop
 8000680:	20000004 	.word	0x20000004

08000684 <__libc_init_array>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4d0d      	ldr	r5, [pc, #52]	@ (80006bc <__libc_init_array+0x38>)
 8000688:	4c0d      	ldr	r4, [pc, #52]	@ (80006c0 <__libc_init_array+0x3c>)
 800068a:	1b64      	subs	r4, r4, r5
 800068c:	10a4      	asrs	r4, r4, #2
 800068e:	2600      	movs	r6, #0
 8000690:	42a6      	cmp	r6, r4
 8000692:	d109      	bne.n	80006a8 <__libc_init_array+0x24>
 8000694:	4d0b      	ldr	r5, [pc, #44]	@ (80006c4 <__libc_init_array+0x40>)
 8000696:	4c0c      	ldr	r4, [pc, #48]	@ (80006c8 <__libc_init_array+0x44>)
 8000698:	f000 fc74 	bl	8000f84 <_init>
 800069c:	1b64      	subs	r4, r4, r5
 800069e:	10a4      	asrs	r4, r4, #2
 80006a0:	2600      	movs	r6, #0
 80006a2:	42a6      	cmp	r6, r4
 80006a4:	d105      	bne.n	80006b2 <__libc_init_array+0x2e>
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ac:	4798      	blx	r3
 80006ae:	3601      	adds	r6, #1
 80006b0:	e7ee      	b.n	8000690 <__libc_init_array+0xc>
 80006b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006b6:	4798      	blx	r3
 80006b8:	3601      	adds	r6, #1
 80006ba:	e7f2      	b.n	80006a2 <__libc_init_array+0x1e>
 80006bc:	08001008 	.word	0x08001008
 80006c0:	08001008 	.word	0x08001008
 80006c4:	08001008 	.word	0x08001008
 80006c8:	0800100c 	.word	0x0800100c

080006cc <__retarget_lock_acquire_recursive>:
 80006cc:	4770      	bx	lr

080006ce <__retarget_lock_release_recursive>:
 80006ce:	4770      	bx	lr

080006d0 <_free_r>:
 80006d0:	b538      	push	{r3, r4, r5, lr}
 80006d2:	4605      	mov	r5, r0
 80006d4:	2900      	cmp	r1, #0
 80006d6:	d041      	beq.n	800075c <_free_r+0x8c>
 80006d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80006dc:	1f0c      	subs	r4, r1, #4
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bfb8      	it	lt
 80006e2:	18e4      	addlt	r4, r4, r3
 80006e4:	f000 f8e0 	bl	80008a8 <__malloc_lock>
 80006e8:	4a1d      	ldr	r2, [pc, #116]	@ (8000760 <_free_r+0x90>)
 80006ea:	6813      	ldr	r3, [r2, #0]
 80006ec:	b933      	cbnz	r3, 80006fc <_free_r+0x2c>
 80006ee:	6063      	str	r3, [r4, #4]
 80006f0:	6014      	str	r4, [r2, #0]
 80006f2:	4628      	mov	r0, r5
 80006f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80006f8:	f000 b8dc 	b.w	80008b4 <__malloc_unlock>
 80006fc:	42a3      	cmp	r3, r4
 80006fe:	d908      	bls.n	8000712 <_free_r+0x42>
 8000700:	6820      	ldr	r0, [r4, #0]
 8000702:	1821      	adds	r1, r4, r0
 8000704:	428b      	cmp	r3, r1
 8000706:	bf01      	itttt	eq
 8000708:	6819      	ldreq	r1, [r3, #0]
 800070a:	685b      	ldreq	r3, [r3, #4]
 800070c:	1809      	addeq	r1, r1, r0
 800070e:	6021      	streq	r1, [r4, #0]
 8000710:	e7ed      	b.n	80006ee <_free_r+0x1e>
 8000712:	461a      	mov	r2, r3
 8000714:	685b      	ldr	r3, [r3, #4]
 8000716:	b10b      	cbz	r3, 800071c <_free_r+0x4c>
 8000718:	42a3      	cmp	r3, r4
 800071a:	d9fa      	bls.n	8000712 <_free_r+0x42>
 800071c:	6811      	ldr	r1, [r2, #0]
 800071e:	1850      	adds	r0, r2, r1
 8000720:	42a0      	cmp	r0, r4
 8000722:	d10b      	bne.n	800073c <_free_r+0x6c>
 8000724:	6820      	ldr	r0, [r4, #0]
 8000726:	4401      	add	r1, r0
 8000728:	1850      	adds	r0, r2, r1
 800072a:	4283      	cmp	r3, r0
 800072c:	6011      	str	r1, [r2, #0]
 800072e:	d1e0      	bne.n	80006f2 <_free_r+0x22>
 8000730:	6818      	ldr	r0, [r3, #0]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	6053      	str	r3, [r2, #4]
 8000736:	4408      	add	r0, r1
 8000738:	6010      	str	r0, [r2, #0]
 800073a:	e7da      	b.n	80006f2 <_free_r+0x22>
 800073c:	d902      	bls.n	8000744 <_free_r+0x74>
 800073e:	230c      	movs	r3, #12
 8000740:	602b      	str	r3, [r5, #0]
 8000742:	e7d6      	b.n	80006f2 <_free_r+0x22>
 8000744:	6820      	ldr	r0, [r4, #0]
 8000746:	1821      	adds	r1, r4, r0
 8000748:	428b      	cmp	r3, r1
 800074a:	bf04      	itt	eq
 800074c:	6819      	ldreq	r1, [r3, #0]
 800074e:	685b      	ldreq	r3, [r3, #4]
 8000750:	6063      	str	r3, [r4, #4]
 8000752:	bf04      	itt	eq
 8000754:	1809      	addeq	r1, r1, r0
 8000756:	6021      	streq	r1, [r4, #0]
 8000758:	6054      	str	r4, [r2, #4]
 800075a:	e7ca      	b.n	80006f2 <_free_r+0x22>
 800075c:	bd38      	pop	{r3, r4, r5, pc}
 800075e:	bf00      	nop
 8000760:	200002c0 	.word	0x200002c0

08000764 <sbrk_aligned>:
 8000764:	b570      	push	{r4, r5, r6, lr}
 8000766:	4e0f      	ldr	r6, [pc, #60]	@ (80007a4 <sbrk_aligned+0x40>)
 8000768:	460c      	mov	r4, r1
 800076a:	6831      	ldr	r1, [r6, #0]
 800076c:	4605      	mov	r5, r0
 800076e:	b911      	cbnz	r1, 8000776 <sbrk_aligned+0x12>
 8000770:	f000 fba6 	bl	8000ec0 <_sbrk_r>
 8000774:	6030      	str	r0, [r6, #0]
 8000776:	4621      	mov	r1, r4
 8000778:	4628      	mov	r0, r5
 800077a:	f000 fba1 	bl	8000ec0 <_sbrk_r>
 800077e:	1c43      	adds	r3, r0, #1
 8000780:	d103      	bne.n	800078a <sbrk_aligned+0x26>
 8000782:	f04f 34ff 	mov.w	r4, #4294967295
 8000786:	4620      	mov	r0, r4
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	1cc4      	adds	r4, r0, #3
 800078c:	f024 0403 	bic.w	r4, r4, #3
 8000790:	42a0      	cmp	r0, r4
 8000792:	d0f8      	beq.n	8000786 <sbrk_aligned+0x22>
 8000794:	1a21      	subs	r1, r4, r0
 8000796:	4628      	mov	r0, r5
 8000798:	f000 fb92 	bl	8000ec0 <_sbrk_r>
 800079c:	3001      	adds	r0, #1
 800079e:	d1f2      	bne.n	8000786 <sbrk_aligned+0x22>
 80007a0:	e7ef      	b.n	8000782 <sbrk_aligned+0x1e>
 80007a2:	bf00      	nop
 80007a4:	200002bc 	.word	0x200002bc

080007a8 <_malloc_r>:
 80007a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007ac:	1ccd      	adds	r5, r1, #3
 80007ae:	f025 0503 	bic.w	r5, r5, #3
 80007b2:	3508      	adds	r5, #8
 80007b4:	2d0c      	cmp	r5, #12
 80007b6:	bf38      	it	cc
 80007b8:	250c      	movcc	r5, #12
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	4606      	mov	r6, r0
 80007be:	db01      	blt.n	80007c4 <_malloc_r+0x1c>
 80007c0:	42a9      	cmp	r1, r5
 80007c2:	d904      	bls.n	80007ce <_malloc_r+0x26>
 80007c4:	230c      	movs	r3, #12
 80007c6:	6033      	str	r3, [r6, #0]
 80007c8:	2000      	movs	r0, #0
 80007ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80008a4 <_malloc_r+0xfc>
 80007d2:	f000 f869 	bl	80008a8 <__malloc_lock>
 80007d6:	f8d8 3000 	ldr.w	r3, [r8]
 80007da:	461c      	mov	r4, r3
 80007dc:	bb44      	cbnz	r4, 8000830 <_malloc_r+0x88>
 80007de:	4629      	mov	r1, r5
 80007e0:	4630      	mov	r0, r6
 80007e2:	f7ff ffbf 	bl	8000764 <sbrk_aligned>
 80007e6:	1c43      	adds	r3, r0, #1
 80007e8:	4604      	mov	r4, r0
 80007ea:	d158      	bne.n	800089e <_malloc_r+0xf6>
 80007ec:	f8d8 4000 	ldr.w	r4, [r8]
 80007f0:	4627      	mov	r7, r4
 80007f2:	2f00      	cmp	r7, #0
 80007f4:	d143      	bne.n	800087e <_malloc_r+0xd6>
 80007f6:	2c00      	cmp	r4, #0
 80007f8:	d04b      	beq.n	8000892 <_malloc_r+0xea>
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	4639      	mov	r1, r7
 80007fe:	4630      	mov	r0, r6
 8000800:	eb04 0903 	add.w	r9, r4, r3
 8000804:	f000 fb5c 	bl	8000ec0 <_sbrk_r>
 8000808:	4581      	cmp	r9, r0
 800080a:	d142      	bne.n	8000892 <_malloc_r+0xea>
 800080c:	6821      	ldr	r1, [r4, #0]
 800080e:	1a6d      	subs	r5, r5, r1
 8000810:	4629      	mov	r1, r5
 8000812:	4630      	mov	r0, r6
 8000814:	f7ff ffa6 	bl	8000764 <sbrk_aligned>
 8000818:	3001      	adds	r0, #1
 800081a:	d03a      	beq.n	8000892 <_malloc_r+0xea>
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	442b      	add	r3, r5
 8000820:	6023      	str	r3, [r4, #0]
 8000822:	f8d8 3000 	ldr.w	r3, [r8]
 8000826:	685a      	ldr	r2, [r3, #4]
 8000828:	bb62      	cbnz	r2, 8000884 <_malloc_r+0xdc>
 800082a:	f8c8 7000 	str.w	r7, [r8]
 800082e:	e00f      	b.n	8000850 <_malloc_r+0xa8>
 8000830:	6822      	ldr	r2, [r4, #0]
 8000832:	1b52      	subs	r2, r2, r5
 8000834:	d420      	bmi.n	8000878 <_malloc_r+0xd0>
 8000836:	2a0b      	cmp	r2, #11
 8000838:	d917      	bls.n	800086a <_malloc_r+0xc2>
 800083a:	1961      	adds	r1, r4, r5
 800083c:	42a3      	cmp	r3, r4
 800083e:	6025      	str	r5, [r4, #0]
 8000840:	bf18      	it	ne
 8000842:	6059      	strne	r1, [r3, #4]
 8000844:	6863      	ldr	r3, [r4, #4]
 8000846:	bf08      	it	eq
 8000848:	f8c8 1000 	streq.w	r1, [r8]
 800084c:	5162      	str	r2, [r4, r5]
 800084e:	604b      	str	r3, [r1, #4]
 8000850:	4630      	mov	r0, r6
 8000852:	f000 f82f 	bl	80008b4 <__malloc_unlock>
 8000856:	f104 000b 	add.w	r0, r4, #11
 800085a:	1d23      	adds	r3, r4, #4
 800085c:	f020 0007 	bic.w	r0, r0, #7
 8000860:	1ac2      	subs	r2, r0, r3
 8000862:	bf1c      	itt	ne
 8000864:	1a1b      	subne	r3, r3, r0
 8000866:	50a3      	strne	r3, [r4, r2]
 8000868:	e7af      	b.n	80007ca <_malloc_r+0x22>
 800086a:	6862      	ldr	r2, [r4, #4]
 800086c:	42a3      	cmp	r3, r4
 800086e:	bf0c      	ite	eq
 8000870:	f8c8 2000 	streq.w	r2, [r8]
 8000874:	605a      	strne	r2, [r3, #4]
 8000876:	e7eb      	b.n	8000850 <_malloc_r+0xa8>
 8000878:	4623      	mov	r3, r4
 800087a:	6864      	ldr	r4, [r4, #4]
 800087c:	e7ae      	b.n	80007dc <_malloc_r+0x34>
 800087e:	463c      	mov	r4, r7
 8000880:	687f      	ldr	r7, [r7, #4]
 8000882:	e7b6      	b.n	80007f2 <_malloc_r+0x4a>
 8000884:	461a      	mov	r2, r3
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	42a3      	cmp	r3, r4
 800088a:	d1fb      	bne.n	8000884 <_malloc_r+0xdc>
 800088c:	2300      	movs	r3, #0
 800088e:	6053      	str	r3, [r2, #4]
 8000890:	e7de      	b.n	8000850 <_malloc_r+0xa8>
 8000892:	230c      	movs	r3, #12
 8000894:	6033      	str	r3, [r6, #0]
 8000896:	4630      	mov	r0, r6
 8000898:	f000 f80c 	bl	80008b4 <__malloc_unlock>
 800089c:	e794      	b.n	80007c8 <_malloc_r+0x20>
 800089e:	6005      	str	r5, [r0, #0]
 80008a0:	e7d6      	b.n	8000850 <_malloc_r+0xa8>
 80008a2:	bf00      	nop
 80008a4:	200002c0 	.word	0x200002c0

080008a8 <__malloc_lock>:
 80008a8:	4801      	ldr	r0, [pc, #4]	@ (80008b0 <__malloc_lock+0x8>)
 80008aa:	f7ff bf0f 	b.w	80006cc <__retarget_lock_acquire_recursive>
 80008ae:	bf00      	nop
 80008b0:	200002b8 	.word	0x200002b8

080008b4 <__malloc_unlock>:
 80008b4:	4801      	ldr	r0, [pc, #4]	@ (80008bc <__malloc_unlock+0x8>)
 80008b6:	f7ff bf0a 	b.w	80006ce <__retarget_lock_release_recursive>
 80008ba:	bf00      	nop
 80008bc:	200002b8 	.word	0x200002b8

080008c0 <__ssputs_r>:
 80008c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c4:	688e      	ldr	r6, [r1, #8]
 80008c6:	461f      	mov	r7, r3
 80008c8:	42be      	cmp	r6, r7
 80008ca:	680b      	ldr	r3, [r1, #0]
 80008cc:	4682      	mov	sl, r0
 80008ce:	460c      	mov	r4, r1
 80008d0:	4690      	mov	r8, r2
 80008d2:	d82d      	bhi.n	8000930 <__ssputs_r+0x70>
 80008d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80008d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80008dc:	d026      	beq.n	800092c <__ssputs_r+0x6c>
 80008de:	6965      	ldr	r5, [r4, #20]
 80008e0:	6909      	ldr	r1, [r1, #16]
 80008e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008e6:	eba3 0901 	sub.w	r9, r3, r1
 80008ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008ee:	1c7b      	adds	r3, r7, #1
 80008f0:	444b      	add	r3, r9
 80008f2:	106d      	asrs	r5, r5, #1
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf38      	it	cc
 80008f8:	461d      	movcc	r5, r3
 80008fa:	0553      	lsls	r3, r2, #21
 80008fc:	d527      	bpl.n	800094e <__ssputs_r+0x8e>
 80008fe:	4629      	mov	r1, r5
 8000900:	f7ff ff52 	bl	80007a8 <_malloc_r>
 8000904:	4606      	mov	r6, r0
 8000906:	b360      	cbz	r0, 8000962 <__ssputs_r+0xa2>
 8000908:	6921      	ldr	r1, [r4, #16]
 800090a:	464a      	mov	r2, r9
 800090c:	f000 fae8 	bl	8000ee0 <memcpy>
 8000910:	89a3      	ldrh	r3, [r4, #12]
 8000912:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000916:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800091a:	81a3      	strh	r3, [r4, #12]
 800091c:	6126      	str	r6, [r4, #16]
 800091e:	6165      	str	r5, [r4, #20]
 8000920:	444e      	add	r6, r9
 8000922:	eba5 0509 	sub.w	r5, r5, r9
 8000926:	6026      	str	r6, [r4, #0]
 8000928:	60a5      	str	r5, [r4, #8]
 800092a:	463e      	mov	r6, r7
 800092c:	42be      	cmp	r6, r7
 800092e:	d900      	bls.n	8000932 <__ssputs_r+0x72>
 8000930:	463e      	mov	r6, r7
 8000932:	6820      	ldr	r0, [r4, #0]
 8000934:	4632      	mov	r2, r6
 8000936:	4641      	mov	r1, r8
 8000938:	f000 faa8 	bl	8000e8c <memmove>
 800093c:	68a3      	ldr	r3, [r4, #8]
 800093e:	1b9b      	subs	r3, r3, r6
 8000940:	60a3      	str	r3, [r4, #8]
 8000942:	6823      	ldr	r3, [r4, #0]
 8000944:	4433      	add	r3, r6
 8000946:	6023      	str	r3, [r4, #0]
 8000948:	2000      	movs	r0, #0
 800094a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094e:	462a      	mov	r2, r5
 8000950:	f000 fad4 	bl	8000efc <_realloc_r>
 8000954:	4606      	mov	r6, r0
 8000956:	2800      	cmp	r0, #0
 8000958:	d1e0      	bne.n	800091c <__ssputs_r+0x5c>
 800095a:	6921      	ldr	r1, [r4, #16]
 800095c:	4650      	mov	r0, sl
 800095e:	f7ff feb7 	bl	80006d0 <_free_r>
 8000962:	230c      	movs	r3, #12
 8000964:	f8ca 3000 	str.w	r3, [sl]
 8000968:	89a3      	ldrh	r3, [r4, #12]
 800096a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096e:	81a3      	strh	r3, [r4, #12]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	e7e9      	b.n	800094a <__ssputs_r+0x8a>
	...

08000978 <_svfiprintf_r>:
 8000978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800097c:	4698      	mov	r8, r3
 800097e:	898b      	ldrh	r3, [r1, #12]
 8000980:	061b      	lsls	r3, r3, #24
 8000982:	b09d      	sub	sp, #116	@ 0x74
 8000984:	4607      	mov	r7, r0
 8000986:	460d      	mov	r5, r1
 8000988:	4614      	mov	r4, r2
 800098a:	d510      	bpl.n	80009ae <_svfiprintf_r+0x36>
 800098c:	690b      	ldr	r3, [r1, #16]
 800098e:	b973      	cbnz	r3, 80009ae <_svfiprintf_r+0x36>
 8000990:	2140      	movs	r1, #64	@ 0x40
 8000992:	f7ff ff09 	bl	80007a8 <_malloc_r>
 8000996:	6028      	str	r0, [r5, #0]
 8000998:	6128      	str	r0, [r5, #16]
 800099a:	b930      	cbnz	r0, 80009aa <_svfiprintf_r+0x32>
 800099c:	230c      	movs	r3, #12
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295
 80009a4:	b01d      	add	sp, #116	@ 0x74
 80009a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009aa:	2340      	movs	r3, #64	@ 0x40
 80009ac:	616b      	str	r3, [r5, #20]
 80009ae:	2300      	movs	r3, #0
 80009b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80009b2:	2320      	movs	r3, #32
 80009b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80009b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80009bc:	2330      	movs	r3, #48	@ 0x30
 80009be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000b5c <_svfiprintf_r+0x1e4>
 80009c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80009c6:	f04f 0901 	mov.w	r9, #1
 80009ca:	4623      	mov	r3, r4
 80009cc:	469a      	mov	sl, r3
 80009ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009d2:	b10a      	cbz	r2, 80009d8 <_svfiprintf_r+0x60>
 80009d4:	2a25      	cmp	r2, #37	@ 0x25
 80009d6:	d1f9      	bne.n	80009cc <_svfiprintf_r+0x54>
 80009d8:	ebba 0b04 	subs.w	fp, sl, r4
 80009dc:	d00b      	beq.n	80009f6 <_svfiprintf_r+0x7e>
 80009de:	465b      	mov	r3, fp
 80009e0:	4622      	mov	r2, r4
 80009e2:	4629      	mov	r1, r5
 80009e4:	4638      	mov	r0, r7
 80009e6:	f7ff ff6b 	bl	80008c0 <__ssputs_r>
 80009ea:	3001      	adds	r0, #1
 80009ec:	f000 80a7 	beq.w	8000b3e <_svfiprintf_r+0x1c6>
 80009f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009f2:	445a      	add	r2, fp
 80009f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80009f6:	f89a 3000 	ldrb.w	r3, [sl]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	f000 809f 	beq.w	8000b3e <_svfiprintf_r+0x1c6>
 8000a00:	2300      	movs	r3, #0
 8000a02:	f04f 32ff 	mov.w	r2, #4294967295
 8000a06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a0a:	f10a 0a01 	add.w	sl, sl, #1
 8000a0e:	9304      	str	r3, [sp, #16]
 8000a10:	9307      	str	r3, [sp, #28]
 8000a12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a16:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a18:	4654      	mov	r4, sl
 8000a1a:	2205      	movs	r2, #5
 8000a1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a20:	484e      	ldr	r0, [pc, #312]	@ (8000b5c <_svfiprintf_r+0x1e4>)
 8000a22:	f7ff fbdd 	bl	80001e0 <memchr>
 8000a26:	9a04      	ldr	r2, [sp, #16]
 8000a28:	b9d8      	cbnz	r0, 8000a62 <_svfiprintf_r+0xea>
 8000a2a:	06d0      	lsls	r0, r2, #27
 8000a2c:	bf44      	itt	mi
 8000a2e:	2320      	movmi	r3, #32
 8000a30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a34:	0711      	lsls	r1, r2, #28
 8000a36:	bf44      	itt	mi
 8000a38:	232b      	movmi	r3, #43	@ 0x2b
 8000a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a3e:	f89a 3000 	ldrb.w	r3, [sl]
 8000a42:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a44:	d015      	beq.n	8000a72 <_svfiprintf_r+0xfa>
 8000a46:	9a07      	ldr	r2, [sp, #28]
 8000a48:	4654      	mov	r4, sl
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f04f 0c0a 	mov.w	ip, #10
 8000a50:	4621      	mov	r1, r4
 8000a52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a56:	3b30      	subs	r3, #48	@ 0x30
 8000a58:	2b09      	cmp	r3, #9
 8000a5a:	d94b      	bls.n	8000af4 <_svfiprintf_r+0x17c>
 8000a5c:	b1b0      	cbz	r0, 8000a8c <_svfiprintf_r+0x114>
 8000a5e:	9207      	str	r2, [sp, #28]
 8000a60:	e014      	b.n	8000a8c <_svfiprintf_r+0x114>
 8000a62:	eba0 0308 	sub.w	r3, r0, r8
 8000a66:	fa09 f303 	lsl.w	r3, r9, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	9304      	str	r3, [sp, #16]
 8000a6e:	46a2      	mov	sl, r4
 8000a70:	e7d2      	b.n	8000a18 <_svfiprintf_r+0xa0>
 8000a72:	9b03      	ldr	r3, [sp, #12]
 8000a74:	1d19      	adds	r1, r3, #4
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	9103      	str	r1, [sp, #12]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	bfbb      	ittet	lt
 8000a7e:	425b      	neglt	r3, r3
 8000a80:	f042 0202 	orrlt.w	r2, r2, #2
 8000a84:	9307      	strge	r3, [sp, #28]
 8000a86:	9307      	strlt	r3, [sp, #28]
 8000a88:	bfb8      	it	lt
 8000a8a:	9204      	strlt	r2, [sp, #16]
 8000a8c:	7823      	ldrb	r3, [r4, #0]
 8000a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a90:	d10a      	bne.n	8000aa8 <_svfiprintf_r+0x130>
 8000a92:	7863      	ldrb	r3, [r4, #1]
 8000a94:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a96:	d132      	bne.n	8000afe <_svfiprintf_r+0x186>
 8000a98:	9b03      	ldr	r3, [sp, #12]
 8000a9a:	1d1a      	adds	r2, r3, #4
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	9203      	str	r2, [sp, #12]
 8000aa0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000aa4:	3402      	adds	r4, #2
 8000aa6:	9305      	str	r3, [sp, #20]
 8000aa8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000b6c <_svfiprintf_r+0x1f4>
 8000aac:	7821      	ldrb	r1, [r4, #0]
 8000aae:	2203      	movs	r2, #3
 8000ab0:	4650      	mov	r0, sl
 8000ab2:	f7ff fb95 	bl	80001e0 <memchr>
 8000ab6:	b138      	cbz	r0, 8000ac8 <_svfiprintf_r+0x150>
 8000ab8:	9b04      	ldr	r3, [sp, #16]
 8000aba:	eba0 000a 	sub.w	r0, r0, sl
 8000abe:	2240      	movs	r2, #64	@ 0x40
 8000ac0:	4082      	lsls	r2, r0
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	3401      	adds	r4, #1
 8000ac6:	9304      	str	r3, [sp, #16]
 8000ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000acc:	4824      	ldr	r0, [pc, #144]	@ (8000b60 <_svfiprintf_r+0x1e8>)
 8000ace:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ad2:	2206      	movs	r2, #6
 8000ad4:	f7ff fb84 	bl	80001e0 <memchr>
 8000ad8:	2800      	cmp	r0, #0
 8000ada:	d036      	beq.n	8000b4a <_svfiprintf_r+0x1d2>
 8000adc:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <_svfiprintf_r+0x1ec>)
 8000ade:	bb1b      	cbnz	r3, 8000b28 <_svfiprintf_r+0x1b0>
 8000ae0:	9b03      	ldr	r3, [sp, #12]
 8000ae2:	3307      	adds	r3, #7
 8000ae4:	f023 0307 	bic.w	r3, r3, #7
 8000ae8:	3308      	adds	r3, #8
 8000aea:	9303      	str	r3, [sp, #12]
 8000aec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000aee:	4433      	add	r3, r6
 8000af0:	9309      	str	r3, [sp, #36]	@ 0x24
 8000af2:	e76a      	b.n	80009ca <_svfiprintf_r+0x52>
 8000af4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000af8:	460c      	mov	r4, r1
 8000afa:	2001      	movs	r0, #1
 8000afc:	e7a8      	b.n	8000a50 <_svfiprintf_r+0xd8>
 8000afe:	2300      	movs	r3, #0
 8000b00:	3401      	adds	r4, #1
 8000b02:	9305      	str	r3, [sp, #20]
 8000b04:	4619      	mov	r1, r3
 8000b06:	f04f 0c0a 	mov.w	ip, #10
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b10:	3a30      	subs	r2, #48	@ 0x30
 8000b12:	2a09      	cmp	r2, #9
 8000b14:	d903      	bls.n	8000b1e <_svfiprintf_r+0x1a6>
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d0c6      	beq.n	8000aa8 <_svfiprintf_r+0x130>
 8000b1a:	9105      	str	r1, [sp, #20]
 8000b1c:	e7c4      	b.n	8000aa8 <_svfiprintf_r+0x130>
 8000b1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b22:	4604      	mov	r4, r0
 8000b24:	2301      	movs	r3, #1
 8000b26:	e7f0      	b.n	8000b0a <_svfiprintf_r+0x192>
 8000b28:	ab03      	add	r3, sp, #12
 8000b2a:	9300      	str	r3, [sp, #0]
 8000b2c:	462a      	mov	r2, r5
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <_svfiprintf_r+0x1f0>)
 8000b30:	a904      	add	r1, sp, #16
 8000b32:	4638      	mov	r0, r7
 8000b34:	f3af 8000 	nop.w
 8000b38:	1c42      	adds	r2, r0, #1
 8000b3a:	4606      	mov	r6, r0
 8000b3c:	d1d6      	bne.n	8000aec <_svfiprintf_r+0x174>
 8000b3e:	89ab      	ldrh	r3, [r5, #12]
 8000b40:	065b      	lsls	r3, r3, #25
 8000b42:	f53f af2d 	bmi.w	80009a0 <_svfiprintf_r+0x28>
 8000b46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b48:	e72c      	b.n	80009a4 <_svfiprintf_r+0x2c>
 8000b4a:	ab03      	add	r3, sp, #12
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	462a      	mov	r2, r5
 8000b50:	4b05      	ldr	r3, [pc, #20]	@ (8000b68 <_svfiprintf_r+0x1f0>)
 8000b52:	a904      	add	r1, sp, #16
 8000b54:	4638      	mov	r0, r7
 8000b56:	f000 f879 	bl	8000c4c <_printf_i>
 8000b5a:	e7ed      	b.n	8000b38 <_svfiprintf_r+0x1c0>
 8000b5c:	08000fca 	.word	0x08000fca
 8000b60:	08000fd4 	.word	0x08000fd4
 8000b64:	00000000 	.word	0x00000000
 8000b68:	080008c1 	.word	0x080008c1
 8000b6c:	08000fd0 	.word	0x08000fd0

08000b70 <_printf_common>:
 8000b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b74:	4616      	mov	r6, r2
 8000b76:	4698      	mov	r8, r3
 8000b78:	688a      	ldr	r2, [r1, #8]
 8000b7a:	690b      	ldr	r3, [r1, #16]
 8000b7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000b80:	4293      	cmp	r3, r2
 8000b82:	bfb8      	it	lt
 8000b84:	4613      	movlt	r3, r2
 8000b86:	6033      	str	r3, [r6, #0]
 8000b88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000b8c:	4607      	mov	r7, r0
 8000b8e:	460c      	mov	r4, r1
 8000b90:	b10a      	cbz	r2, 8000b96 <_printf_common+0x26>
 8000b92:	3301      	adds	r3, #1
 8000b94:	6033      	str	r3, [r6, #0]
 8000b96:	6823      	ldr	r3, [r4, #0]
 8000b98:	0699      	lsls	r1, r3, #26
 8000b9a:	bf42      	ittt	mi
 8000b9c:	6833      	ldrmi	r3, [r6, #0]
 8000b9e:	3302      	addmi	r3, #2
 8000ba0:	6033      	strmi	r3, [r6, #0]
 8000ba2:	6825      	ldr	r5, [r4, #0]
 8000ba4:	f015 0506 	ands.w	r5, r5, #6
 8000ba8:	d106      	bne.n	8000bb8 <_printf_common+0x48>
 8000baa:	f104 0a19 	add.w	sl, r4, #25
 8000bae:	68e3      	ldr	r3, [r4, #12]
 8000bb0:	6832      	ldr	r2, [r6, #0]
 8000bb2:	1a9b      	subs	r3, r3, r2
 8000bb4:	42ab      	cmp	r3, r5
 8000bb6:	dc26      	bgt.n	8000c06 <_printf_common+0x96>
 8000bb8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000bbc:	6822      	ldr	r2, [r4, #0]
 8000bbe:	3b00      	subs	r3, #0
 8000bc0:	bf18      	it	ne
 8000bc2:	2301      	movne	r3, #1
 8000bc4:	0692      	lsls	r2, r2, #26
 8000bc6:	d42b      	bmi.n	8000c20 <_printf_common+0xb0>
 8000bc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000bcc:	4641      	mov	r1, r8
 8000bce:	4638      	mov	r0, r7
 8000bd0:	47c8      	blx	r9
 8000bd2:	3001      	adds	r0, #1
 8000bd4:	d01e      	beq.n	8000c14 <_printf_common+0xa4>
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	6922      	ldr	r2, [r4, #16]
 8000bda:	f003 0306 	and.w	r3, r3, #6
 8000bde:	2b04      	cmp	r3, #4
 8000be0:	bf02      	ittt	eq
 8000be2:	68e5      	ldreq	r5, [r4, #12]
 8000be4:	6833      	ldreq	r3, [r6, #0]
 8000be6:	1aed      	subeq	r5, r5, r3
 8000be8:	68a3      	ldr	r3, [r4, #8]
 8000bea:	bf0c      	ite	eq
 8000bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000bf0:	2500      	movne	r5, #0
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	bfc4      	itt	gt
 8000bf6:	1a9b      	subgt	r3, r3, r2
 8000bf8:	18ed      	addgt	r5, r5, r3
 8000bfa:	2600      	movs	r6, #0
 8000bfc:	341a      	adds	r4, #26
 8000bfe:	42b5      	cmp	r5, r6
 8000c00:	d11a      	bne.n	8000c38 <_printf_common+0xc8>
 8000c02:	2000      	movs	r0, #0
 8000c04:	e008      	b.n	8000c18 <_printf_common+0xa8>
 8000c06:	2301      	movs	r3, #1
 8000c08:	4652      	mov	r2, sl
 8000c0a:	4641      	mov	r1, r8
 8000c0c:	4638      	mov	r0, r7
 8000c0e:	47c8      	blx	r9
 8000c10:	3001      	adds	r0, #1
 8000c12:	d103      	bne.n	8000c1c <_printf_common+0xac>
 8000c14:	f04f 30ff 	mov.w	r0, #4294967295
 8000c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1c:	3501      	adds	r5, #1
 8000c1e:	e7c6      	b.n	8000bae <_printf_common+0x3e>
 8000c20:	18e1      	adds	r1, r4, r3
 8000c22:	1c5a      	adds	r2, r3, #1
 8000c24:	2030      	movs	r0, #48	@ 0x30
 8000c26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000c2a:	4422      	add	r2, r4
 8000c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000c30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000c34:	3302      	adds	r3, #2
 8000c36:	e7c7      	b.n	8000bc8 <_printf_common+0x58>
 8000c38:	2301      	movs	r3, #1
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	4641      	mov	r1, r8
 8000c3e:	4638      	mov	r0, r7
 8000c40:	47c8      	blx	r9
 8000c42:	3001      	adds	r0, #1
 8000c44:	d0e6      	beq.n	8000c14 <_printf_common+0xa4>
 8000c46:	3601      	adds	r6, #1
 8000c48:	e7d9      	b.n	8000bfe <_printf_common+0x8e>
	...

08000c4c <_printf_i>:
 8000c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	7e0f      	ldrb	r7, [r1, #24]
 8000c52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000c54:	2f78      	cmp	r7, #120	@ 0x78
 8000c56:	4691      	mov	r9, r2
 8000c58:	4680      	mov	r8, r0
 8000c5a:	460c      	mov	r4, r1
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000c62:	d807      	bhi.n	8000c74 <_printf_i+0x28>
 8000c64:	2f62      	cmp	r7, #98	@ 0x62
 8000c66:	d80a      	bhi.n	8000c7e <_printf_i+0x32>
 8000c68:	2f00      	cmp	r7, #0
 8000c6a:	f000 80d2 	beq.w	8000e12 <_printf_i+0x1c6>
 8000c6e:	2f58      	cmp	r7, #88	@ 0x58
 8000c70:	f000 80b9 	beq.w	8000de6 <_printf_i+0x19a>
 8000c74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000c7c:	e03a      	b.n	8000cf4 <_printf_i+0xa8>
 8000c7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000c82:	2b15      	cmp	r3, #21
 8000c84:	d8f6      	bhi.n	8000c74 <_printf_i+0x28>
 8000c86:	a101      	add	r1, pc, #4	@ (adr r1, 8000c8c <_printf_i+0x40>)
 8000c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000c8c:	08000ce5 	.word	0x08000ce5
 8000c90:	08000cf9 	.word	0x08000cf9
 8000c94:	08000c75 	.word	0x08000c75
 8000c98:	08000c75 	.word	0x08000c75
 8000c9c:	08000c75 	.word	0x08000c75
 8000ca0:	08000c75 	.word	0x08000c75
 8000ca4:	08000cf9 	.word	0x08000cf9
 8000ca8:	08000c75 	.word	0x08000c75
 8000cac:	08000c75 	.word	0x08000c75
 8000cb0:	08000c75 	.word	0x08000c75
 8000cb4:	08000c75 	.word	0x08000c75
 8000cb8:	08000df9 	.word	0x08000df9
 8000cbc:	08000d23 	.word	0x08000d23
 8000cc0:	08000db3 	.word	0x08000db3
 8000cc4:	08000c75 	.word	0x08000c75
 8000cc8:	08000c75 	.word	0x08000c75
 8000ccc:	08000e1b 	.word	0x08000e1b
 8000cd0:	08000c75 	.word	0x08000c75
 8000cd4:	08000d23 	.word	0x08000d23
 8000cd8:	08000c75 	.word	0x08000c75
 8000cdc:	08000c75 	.word	0x08000c75
 8000ce0:	08000dbb 	.word	0x08000dbb
 8000ce4:	6833      	ldr	r3, [r6, #0]
 8000ce6:	1d1a      	adds	r2, r3, #4
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6032      	str	r2, [r6, #0]
 8000cec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000cf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e09d      	b.n	8000e34 <_printf_i+0x1e8>
 8000cf8:	6833      	ldr	r3, [r6, #0]
 8000cfa:	6820      	ldr	r0, [r4, #0]
 8000cfc:	1d19      	adds	r1, r3, #4
 8000cfe:	6031      	str	r1, [r6, #0]
 8000d00:	0606      	lsls	r6, r0, #24
 8000d02:	d501      	bpl.n	8000d08 <_printf_i+0xbc>
 8000d04:	681d      	ldr	r5, [r3, #0]
 8000d06:	e003      	b.n	8000d10 <_printf_i+0xc4>
 8000d08:	0645      	lsls	r5, r0, #25
 8000d0a:	d5fb      	bpl.n	8000d04 <_printf_i+0xb8>
 8000d0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d10:	2d00      	cmp	r5, #0
 8000d12:	da03      	bge.n	8000d1c <_printf_i+0xd0>
 8000d14:	232d      	movs	r3, #45	@ 0x2d
 8000d16:	426d      	negs	r5, r5
 8000d18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d1c:	4859      	ldr	r0, [pc, #356]	@ (8000e84 <_printf_i+0x238>)
 8000d1e:	230a      	movs	r3, #10
 8000d20:	e011      	b.n	8000d46 <_printf_i+0xfa>
 8000d22:	6821      	ldr	r1, [r4, #0]
 8000d24:	6833      	ldr	r3, [r6, #0]
 8000d26:	0608      	lsls	r0, r1, #24
 8000d28:	f853 5b04 	ldr.w	r5, [r3], #4
 8000d2c:	d402      	bmi.n	8000d34 <_printf_i+0xe8>
 8000d2e:	0649      	lsls	r1, r1, #25
 8000d30:	bf48      	it	mi
 8000d32:	b2ad      	uxthmi	r5, r5
 8000d34:	2f6f      	cmp	r7, #111	@ 0x6f
 8000d36:	4853      	ldr	r0, [pc, #332]	@ (8000e84 <_printf_i+0x238>)
 8000d38:	6033      	str	r3, [r6, #0]
 8000d3a:	bf14      	ite	ne
 8000d3c:	230a      	movne	r3, #10
 8000d3e:	2308      	moveq	r3, #8
 8000d40:	2100      	movs	r1, #0
 8000d42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000d46:	6866      	ldr	r6, [r4, #4]
 8000d48:	60a6      	str	r6, [r4, #8]
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	bfa2      	ittt	ge
 8000d4e:	6821      	ldrge	r1, [r4, #0]
 8000d50:	f021 0104 	bicge.w	r1, r1, #4
 8000d54:	6021      	strge	r1, [r4, #0]
 8000d56:	b90d      	cbnz	r5, 8000d5c <_printf_i+0x110>
 8000d58:	2e00      	cmp	r6, #0
 8000d5a:	d04b      	beq.n	8000df4 <_printf_i+0x1a8>
 8000d5c:	4616      	mov	r6, r2
 8000d5e:	fbb5 f1f3 	udiv	r1, r5, r3
 8000d62:	fb03 5711 	mls	r7, r3, r1, r5
 8000d66:	5dc7      	ldrb	r7, [r0, r7]
 8000d68:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000d6c:	462f      	mov	r7, r5
 8000d6e:	42bb      	cmp	r3, r7
 8000d70:	460d      	mov	r5, r1
 8000d72:	d9f4      	bls.n	8000d5e <_printf_i+0x112>
 8000d74:	2b08      	cmp	r3, #8
 8000d76:	d10b      	bne.n	8000d90 <_printf_i+0x144>
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	07df      	lsls	r7, r3, #31
 8000d7c:	d508      	bpl.n	8000d90 <_printf_i+0x144>
 8000d7e:	6923      	ldr	r3, [r4, #16]
 8000d80:	6861      	ldr	r1, [r4, #4]
 8000d82:	4299      	cmp	r1, r3
 8000d84:	bfde      	ittt	le
 8000d86:	2330      	movle	r3, #48	@ 0x30
 8000d88:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000d8c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000d90:	1b92      	subs	r2, r2, r6
 8000d92:	6122      	str	r2, [r4, #16]
 8000d94:	f8cd a000 	str.w	sl, [sp]
 8000d98:	464b      	mov	r3, r9
 8000d9a:	aa03      	add	r2, sp, #12
 8000d9c:	4621      	mov	r1, r4
 8000d9e:	4640      	mov	r0, r8
 8000da0:	f7ff fee6 	bl	8000b70 <_printf_common>
 8000da4:	3001      	adds	r0, #1
 8000da6:	d14a      	bne.n	8000e3e <_printf_i+0x1f2>
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	b004      	add	sp, #16
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	6823      	ldr	r3, [r4, #0]
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	6023      	str	r3, [r4, #0]
 8000dba:	4833      	ldr	r0, [pc, #204]	@ (8000e88 <_printf_i+0x23c>)
 8000dbc:	2778      	movs	r7, #120	@ 0x78
 8000dbe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000dc2:	6823      	ldr	r3, [r4, #0]
 8000dc4:	6831      	ldr	r1, [r6, #0]
 8000dc6:	061f      	lsls	r7, r3, #24
 8000dc8:	f851 5b04 	ldr.w	r5, [r1], #4
 8000dcc:	d402      	bmi.n	8000dd4 <_printf_i+0x188>
 8000dce:	065f      	lsls	r7, r3, #25
 8000dd0:	bf48      	it	mi
 8000dd2:	b2ad      	uxthmi	r5, r5
 8000dd4:	6031      	str	r1, [r6, #0]
 8000dd6:	07d9      	lsls	r1, r3, #31
 8000dd8:	bf44      	itt	mi
 8000dda:	f043 0320 	orrmi.w	r3, r3, #32
 8000dde:	6023      	strmi	r3, [r4, #0]
 8000de0:	b11d      	cbz	r5, 8000dea <_printf_i+0x19e>
 8000de2:	2310      	movs	r3, #16
 8000de4:	e7ac      	b.n	8000d40 <_printf_i+0xf4>
 8000de6:	4827      	ldr	r0, [pc, #156]	@ (8000e84 <_printf_i+0x238>)
 8000de8:	e7e9      	b.n	8000dbe <_printf_i+0x172>
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	f023 0320 	bic.w	r3, r3, #32
 8000df0:	6023      	str	r3, [r4, #0]
 8000df2:	e7f6      	b.n	8000de2 <_printf_i+0x196>
 8000df4:	4616      	mov	r6, r2
 8000df6:	e7bd      	b.n	8000d74 <_printf_i+0x128>
 8000df8:	6833      	ldr	r3, [r6, #0]
 8000dfa:	6825      	ldr	r5, [r4, #0]
 8000dfc:	6961      	ldr	r1, [r4, #20]
 8000dfe:	1d18      	adds	r0, r3, #4
 8000e00:	6030      	str	r0, [r6, #0]
 8000e02:	062e      	lsls	r6, r5, #24
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	d501      	bpl.n	8000e0c <_printf_i+0x1c0>
 8000e08:	6019      	str	r1, [r3, #0]
 8000e0a:	e002      	b.n	8000e12 <_printf_i+0x1c6>
 8000e0c:	0668      	lsls	r0, r5, #25
 8000e0e:	d5fb      	bpl.n	8000e08 <_printf_i+0x1bc>
 8000e10:	8019      	strh	r1, [r3, #0]
 8000e12:	2300      	movs	r3, #0
 8000e14:	6123      	str	r3, [r4, #16]
 8000e16:	4616      	mov	r6, r2
 8000e18:	e7bc      	b.n	8000d94 <_printf_i+0x148>
 8000e1a:	6833      	ldr	r3, [r6, #0]
 8000e1c:	1d1a      	adds	r2, r3, #4
 8000e1e:	6032      	str	r2, [r6, #0]
 8000e20:	681e      	ldr	r6, [r3, #0]
 8000e22:	6862      	ldr	r2, [r4, #4]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4630      	mov	r0, r6
 8000e28:	f7ff f9da 	bl	80001e0 <memchr>
 8000e2c:	b108      	cbz	r0, 8000e32 <_printf_i+0x1e6>
 8000e2e:	1b80      	subs	r0, r0, r6
 8000e30:	6060      	str	r0, [r4, #4]
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	6123      	str	r3, [r4, #16]
 8000e36:	2300      	movs	r3, #0
 8000e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e3c:	e7aa      	b.n	8000d94 <_printf_i+0x148>
 8000e3e:	6923      	ldr	r3, [r4, #16]
 8000e40:	4632      	mov	r2, r6
 8000e42:	4649      	mov	r1, r9
 8000e44:	4640      	mov	r0, r8
 8000e46:	47d0      	blx	sl
 8000e48:	3001      	adds	r0, #1
 8000e4a:	d0ad      	beq.n	8000da8 <_printf_i+0x15c>
 8000e4c:	6823      	ldr	r3, [r4, #0]
 8000e4e:	079b      	lsls	r3, r3, #30
 8000e50:	d413      	bmi.n	8000e7a <_printf_i+0x22e>
 8000e52:	68e0      	ldr	r0, [r4, #12]
 8000e54:	9b03      	ldr	r3, [sp, #12]
 8000e56:	4298      	cmp	r0, r3
 8000e58:	bfb8      	it	lt
 8000e5a:	4618      	movlt	r0, r3
 8000e5c:	e7a6      	b.n	8000dac <_printf_i+0x160>
 8000e5e:	2301      	movs	r3, #1
 8000e60:	4632      	mov	r2, r6
 8000e62:	4649      	mov	r1, r9
 8000e64:	4640      	mov	r0, r8
 8000e66:	47d0      	blx	sl
 8000e68:	3001      	adds	r0, #1
 8000e6a:	d09d      	beq.n	8000da8 <_printf_i+0x15c>
 8000e6c:	3501      	adds	r5, #1
 8000e6e:	68e3      	ldr	r3, [r4, #12]
 8000e70:	9903      	ldr	r1, [sp, #12]
 8000e72:	1a5b      	subs	r3, r3, r1
 8000e74:	42ab      	cmp	r3, r5
 8000e76:	dcf2      	bgt.n	8000e5e <_printf_i+0x212>
 8000e78:	e7eb      	b.n	8000e52 <_printf_i+0x206>
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	f104 0619 	add.w	r6, r4, #25
 8000e80:	e7f5      	b.n	8000e6e <_printf_i+0x222>
 8000e82:	bf00      	nop
 8000e84:	08000fdb 	.word	0x08000fdb
 8000e88:	08000fec 	.word	0x08000fec

08000e8c <memmove>:
 8000e8c:	4288      	cmp	r0, r1
 8000e8e:	b510      	push	{r4, lr}
 8000e90:	eb01 0402 	add.w	r4, r1, r2
 8000e94:	d902      	bls.n	8000e9c <memmove+0x10>
 8000e96:	4284      	cmp	r4, r0
 8000e98:	4623      	mov	r3, r4
 8000e9a:	d807      	bhi.n	8000eac <memmove+0x20>
 8000e9c:	1e43      	subs	r3, r0, #1
 8000e9e:	42a1      	cmp	r1, r4
 8000ea0:	d008      	beq.n	8000eb4 <memmove+0x28>
 8000ea2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000ea6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000eaa:	e7f8      	b.n	8000e9e <memmove+0x12>
 8000eac:	4402      	add	r2, r0
 8000eae:	4601      	mov	r1, r0
 8000eb0:	428a      	cmp	r2, r1
 8000eb2:	d100      	bne.n	8000eb6 <memmove+0x2a>
 8000eb4:	bd10      	pop	{r4, pc}
 8000eb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000eba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000ebe:	e7f7      	b.n	8000eb0 <memmove+0x24>

08000ec0 <_sbrk_r>:
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	4d06      	ldr	r5, [pc, #24]	@ (8000edc <_sbrk_r+0x1c>)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4604      	mov	r4, r0
 8000ec8:	4608      	mov	r0, r1
 8000eca:	602b      	str	r3, [r5, #0]
 8000ecc:	f000 f84c 	bl	8000f68 <_sbrk>
 8000ed0:	1c43      	adds	r3, r0, #1
 8000ed2:	d102      	bne.n	8000eda <_sbrk_r+0x1a>
 8000ed4:	682b      	ldr	r3, [r5, #0]
 8000ed6:	b103      	cbz	r3, 8000eda <_sbrk_r+0x1a>
 8000ed8:	6023      	str	r3, [r4, #0]
 8000eda:	bd38      	pop	{r3, r4, r5, pc}
 8000edc:	200002b4 	.word	0x200002b4

08000ee0 <memcpy>:
 8000ee0:	440a      	add	r2, r1
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee8:	d100      	bne.n	8000eec <memcpy+0xc>
 8000eea:	4770      	bx	lr
 8000eec:	b510      	push	{r4, lr}
 8000eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000ef6:	4291      	cmp	r1, r2
 8000ef8:	d1f9      	bne.n	8000eee <memcpy+0xe>
 8000efa:	bd10      	pop	{r4, pc}

08000efc <_realloc_r>:
 8000efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f00:	4680      	mov	r8, r0
 8000f02:	4615      	mov	r5, r2
 8000f04:	460c      	mov	r4, r1
 8000f06:	b921      	cbnz	r1, 8000f12 <_realloc_r+0x16>
 8000f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f0c:	4611      	mov	r1, r2
 8000f0e:	f7ff bc4b 	b.w	80007a8 <_malloc_r>
 8000f12:	b92a      	cbnz	r2, 8000f20 <_realloc_r+0x24>
 8000f14:	f7ff fbdc 	bl	80006d0 <_free_r>
 8000f18:	2400      	movs	r4, #0
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f20:	f000 f81a 	bl	8000f58 <_malloc_usable_size_r>
 8000f24:	4285      	cmp	r5, r0
 8000f26:	4606      	mov	r6, r0
 8000f28:	d802      	bhi.n	8000f30 <_realloc_r+0x34>
 8000f2a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8000f2e:	d8f4      	bhi.n	8000f1a <_realloc_r+0x1e>
 8000f30:	4629      	mov	r1, r5
 8000f32:	4640      	mov	r0, r8
 8000f34:	f7ff fc38 	bl	80007a8 <_malloc_r>
 8000f38:	4607      	mov	r7, r0
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d0ec      	beq.n	8000f18 <_realloc_r+0x1c>
 8000f3e:	42b5      	cmp	r5, r6
 8000f40:	462a      	mov	r2, r5
 8000f42:	4621      	mov	r1, r4
 8000f44:	bf28      	it	cs
 8000f46:	4632      	movcs	r2, r6
 8000f48:	f7ff ffca 	bl	8000ee0 <memcpy>
 8000f4c:	4621      	mov	r1, r4
 8000f4e:	4640      	mov	r0, r8
 8000f50:	f7ff fbbe 	bl	80006d0 <_free_r>
 8000f54:	463c      	mov	r4, r7
 8000f56:	e7e0      	b.n	8000f1a <_realloc_r+0x1e>

08000f58 <_malloc_usable_size_r>:
 8000f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f5c:	1f18      	subs	r0, r3, #4
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	bfbc      	itt	lt
 8000f62:	580b      	ldrlt	r3, [r1, r0]
 8000f64:	18c0      	addlt	r0, r0, r3
 8000f66:	4770      	bx	lr

08000f68 <_sbrk>:
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <_sbrk+0x14>)
 8000f6a:	6811      	ldr	r1, [r2, #0]
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	b909      	cbnz	r1, 8000f74 <_sbrk+0xc>
 8000f70:	4903      	ldr	r1, [pc, #12]	@ (8000f80 <_sbrk+0x18>)
 8000f72:	6011      	str	r1, [r2, #0]
 8000f74:	6810      	ldr	r0, [r2, #0]
 8000f76:	4403      	add	r3, r0
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4770      	bx	lr
 8000f7c:	200002c4 	.word	0x200002c4
 8000f80:	200002c8 	.word	0x200002c8

08000f84 <_init>:
 8000f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f86:	bf00      	nop
 8000f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f8a:	bc08      	pop	{r3}
 8000f8c:	469e      	mov	lr, r3
 8000f8e:	4770      	bx	lr

08000f90 <_fini>:
 8000f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f92:	bf00      	nop
 8000f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f96:	bc08      	pop	{r3}
 8000f98:	469e      	mov	lr, r3
 8000f9a:	4770      	bx	lr
